{"cells":[{"cell_type":"markdown","id":"a469a62e","metadata":{"papermill":{"duration":0.222932,"end_time":"2022-02-25T05:56:01.064134","exception":false,"start_time":"2022-02-25T05:56:00.841202","status":"completed"},"tags":[],"id":"a469a62e"},"source":["# Project Title: Data scientist salary prediction "]},{"cell_type":"code","execution_count":null,"id":"5879b627","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:01.958067Z","iopub.status.busy":"2022-02-25T05:56:01.953420Z","iopub.status.idle":"2022-02-25T05:56:03.944311Z","shell.execute_reply":"2022-02-25T05:56:03.944859Z","shell.execute_reply.started":"2022-02-23T19:50:53.017098Z"},"papermill":{"duration":2.222031,"end_time":"2022-02-25T05:56:03.945167","exception":false,"start_time":"2022-02-25T05:56:01.723136","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"5879b627","executionInfo":{"status":"ok","timestamp":1647585698175,"user_tz":-330,"elapsed":3171,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"5f9d1d3a-932e-478e-b6cf-1b5edb7da992"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"]}],"source":["#mporting libraries\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from matplotlib import rcParams\n","import statsmodels.api as sm\n","from sklearn.model_selection import train_test_split\n","from statsmodels.tools.eval_measures import rmse\n","from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n","import random"]},{"cell_type":"code","execution_count":null,"id":"00fa45b6","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:04.377637Z","iopub.status.busy":"2022-02-25T05:56:04.376940Z","iopub.status.idle":"2022-02-25T05:56:04.472313Z","shell.execute_reply":"2022-02-25T05:56:04.472842Z","shell.execute_reply.started":"2022-02-23T19:50:54.888368Z"},"papermill":{"duration":0.312394,"end_time":"2022-02-25T05:56:04.473037","exception":false,"start_time":"2022-02-25T05:56:04.160643","status":"completed"},"tags":[],"colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":74},"id":"00fa45b6","executionInfo":{"status":"ok","timestamp":1647585765412,"user_tz":-330,"elapsed":67291,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"6784a2e5-e894-4c83-93ad-37089ac6412f"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-ef6b3233-010e-43ad-a9a6-9a03282c4c3a\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-ef6b3233-010e-43ad-a9a6-9a03282c4c3a\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving data_cleaned_2021.csv to data_cleaned_2021.csv\n"]}],"source":["# Uploading dataset\n","from google.colab import files\n","uploaded = files.upload()\n","df= pd.read_csv(\"data_cleaned_2021.csv\")\n","salary = df"]},{"cell_type":"markdown","id":"8eafe8c9","metadata":{"papermill":{"duration":0.216876,"end_time":"2022-02-25T05:56:06.250344","exception":false,"start_time":"2022-02-25T05:56:06.033468","status":"completed"},"tags":[],"id":"8eafe8c9"},"source":["# Handling missing values"]},{"cell_type":"code","execution_count":null,"id":"81187787","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:07.135469Z","iopub.status.busy":"2022-02-25T05:56:07.134768Z","iopub.status.idle":"2022-02-25T05:56:07.141329Z","shell.execute_reply":"2022-02-25T05:56:07.141880Z","shell.execute_reply.started":"2022-02-23T19:50:55.074579Z"},"papermill":{"duration":0.232135,"end_time":"2022-02-25T05:56:07.142058","exception":false,"start_time":"2022-02-25T05:56:06.909923","status":"completed"},"tags":[],"id":"81187787"},"outputs":[],"source":["#Replacing object and int values of -1 with NaN\n","salary=salary.replace(['-1'],[np.nan])\n","salary=salary.replace([-1],[np.nan])\n","salary.Rating.unique()"]},{"cell_type":"code","execution_count":null,"id":"164dabf3","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:08.495112Z","iopub.status.busy":"2022-02-25T05:56:08.494445Z","iopub.status.idle":"2022-02-25T05:56:08.511937Z","shell.execute_reply":"2022-02-25T05:56:08.512467Z","shell.execute_reply.started":"2022-02-23T19:50:55.116426Z"},"papermill":{"duration":0.24676,"end_time":"2022-02-25T05:56:08.512645","exception":false,"start_time":"2022-02-25T05:56:08.265885","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"164dabf3","executionInfo":{"status":"ok","timestamp":1647309318816,"user_tz":-330,"elapsed":97,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"7579ce75-2a97-4dd7-e1e8-f531f1a38a29"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 742 entries, 0 to 741\n","Data columns (total 42 columns):\n"," #   Column              Non-Null Count  Dtype  \n","---  ------              --------------  -----  \n"," 0   index               742 non-null    float64\n"," 1   Job Title           742 non-null    object \n"," 2   Salary Estimate     742 non-null    object \n"," 3   Job Description     742 non-null    object \n"," 4   Rating              731 non-null    float64\n"," 5   Company Name        742 non-null    object \n"," 6   Location            742 non-null    object \n"," 7   Headquarters        741 non-null    object \n"," 8   Size                742 non-null    object \n"," 9   Founded             692 non-null    float64\n"," 10  Type of ownership   742 non-null    object \n"," 11  Industry            732 non-null    object \n"," 12  Sector              732 non-null    object \n"," 13  Revenue             742 non-null    object \n"," 14  Competitors         282 non-null    object \n"," 15  Hourly              742 non-null    float64\n"," 16  Employer provided   742 non-null    float64\n"," 17  Lower Salary        742 non-null    float64\n"," 18  Upper Salary        742 non-null    float64\n"," 19  Avg Salary(K)       742 non-null    float64\n"," 20  company_txt         742 non-null    object \n"," 21  Job Location        742 non-null    object \n"," 22  Age                 692 non-null    float64\n"," 23  Python              742 non-null    float64\n"," 24  spark               742 non-null    float64\n"," 25  aws                 742 non-null    float64\n"," 26  excel               742 non-null    float64\n"," 27  sql                 742 non-null    float64\n"," 28  sas                 742 non-null    float64\n"," 29  keras               742 non-null    float64\n"," 30  pytorch             742 non-null    float64\n"," 31  scikit              742 non-null    float64\n"," 32  tensor              742 non-null    float64\n"," 33  hadoop              742 non-null    float64\n"," 34  tableau             742 non-null    float64\n"," 35  bi                  742 non-null    float64\n"," 36  flink               742 non-null    float64\n"," 37  mongo               742 non-null    float64\n"," 38  google_an           742 non-null    float64\n"," 39  job_title_sim       742 non-null    object \n"," 40  seniority_by_title  742 non-null    object \n"," 41  Degree              742 non-null    object \n","dtypes: float64(25), object(17)\n","memory usage: 243.6+ KB\n"]}],"source":["#Dropping the index column\n","salary = salary.drop(\"index\",axis=1)\n","salary.info()"]},{"cell_type":"code","execution_count":null,"id":"f2231da6","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:13.039290Z","iopub.status.busy":"2022-02-25T05:56:13.038538Z","iopub.status.idle":"2022-02-25T05:56:13.043381Z","shell.execute_reply":"2022-02-25T05:56:13.044005Z","shell.execute_reply.started":"2022-02-23T19:50:55.23978Z"},"papermill":{"duration":0.228847,"end_time":"2022-02-25T05:56:13.044180","exception":false,"start_time":"2022-02-25T05:56:12.815333","status":"completed"},"tags":[],"id":"f2231da6"},"outputs":[],"source":["salary[\"Competitors\"] = salary[\"Competitors\"].fillna(salary[\"Competitors\"].mode()[0]) \n","salary[\"Industry\"] = salary[\"Industry\"].fillna(salary[\"Industry\"].mode()[0])\n","salary[\"Sector\"] = salary[\"Sector\"].fillna(salary[\"Sector\"].mode()[0]) \n","salary[\"Headquarters\"] = salary[\"Headquarters\"].fillna(salary[\"Headquarters\"].mode()[0])  \n","salary[\"Rating\"] = salary[\"Rating\"].fillna(salary[\"Rating\"].mean())\n","salary[\"Age\"] = salary[\"Age\"].fillna(salary[\"Age\"].median())\n","salary[\"Founded\"] = salary[\"Founded\"].fillna(salary[\"Founded\"].median())\n","salary.isnull().sum()"]},{"cell_type":"markdown","id":"ef01320f","metadata":{"papermill":{"duration":0.226167,"end_time":"2022-02-25T05:56:20.603525","exception":false,"start_time":"2022-02-25T05:56:20.377358","status":"completed"},"tags":[],"id":"ef01320f"},"source":["# At last check we check is there any null values or not"]},{"cell_type":"markdown","id":"ba3efd50","metadata":{"papermill":{"duration":0.226951,"end_time":"2022-02-25T05:56:24.032927","exception":false,"start_time":"2022-02-25T05:56:23.805976","status":"completed"},"tags":[],"id":"ba3efd50"},"source":["## There are two columns named as company name and company txt so we will check difference and work on them"]},{"cell_type":"code","execution_count":null,"id":"db1aefd6","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:24.492257Z","iopub.status.busy":"2022-02-25T05:56:24.491299Z","iopub.status.idle":"2022-02-25T05:56:24.499469Z","shell.execute_reply":"2022-02-25T05:56:24.498940Z","shell.execute_reply.started":"2022-02-23T19:50:56.380699Z"},"papermill":{"duration":0.239087,"end_time":"2022-02-25T05:56:24.499606","exception":false,"start_time":"2022-02-25T05:56:24.260519","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"db1aefd6","executionInfo":{"status":"ok","timestamp":1647309322833,"user_tz":-330,"elapsed":111,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"39aa8fc0-23eb-4076-f1be-3e8bd1090080"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0                          Tecolote Research\\n3.8\n","1      University of Maryland Medical System\\n3.4\n","2                                    KnowBe4\\n4.8\n","3                                       PNNL\\n3.8\n","4                         Affinity Solutions\\n2.9\n","                          ...                    \n","737                                      GSK\\n3.9\n","738                               Eventbrite\\n4.4\n","739           Software Engineering Institute\\n2.6\n","740                             Numeric, LLC\\n3.2\n","741             Riverside Research Institute\\n3.6\n","Name: Company Name, Length: 742, dtype: object"]},"metadata":{},"execution_count":30}],"source":["salary[\"Company Name\"]=salary[\"Company Name\"].str[:-4] #\"company Name column conatin name with rating also so we are removing rating given in that column\""]},{"cell_type":"code","execution_count":null,"id":"99f5f436","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:25.899992Z","iopub.status.busy":"2022-02-25T05:56:25.898969Z","iopub.status.idle":"2022-02-25T05:56:25.906718Z","shell.execute_reply":"2022-02-25T05:56:25.906101Z","shell.execute_reply.started":"2022-02-23T19:50:56.418544Z"},"papermill":{"duration":0.241196,"end_time":"2022-02-25T05:56:25.906885","exception":false,"start_time":"2022-02-25T05:56:25.665689","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"99f5f436","executionInfo":{"status":"ok","timestamp":1647309322850,"user_tz":-330,"elapsed":121,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"25113bfc-a76c-47b3-eb5a-bf87c51984d1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0                          Tecolote Research\n","1      University of Maryland Medical System\n","2                                    KnowBe4\n","3                                       PNNL\n","4                         Affinity Solutions\n","                       ...                  \n","737                                      GSK\n","738                               Eventbrite\n","739           Software Engineering Institute\n","740                             Numeric, LLC\n","741             Riverside Research Institute\n","Name: company_txt, Length: 742, dtype: object"]},"metadata":{},"execution_count":33}],"source":["salary[\"company_txt\"]"]},{"cell_type":"code","execution_count":null,"id":"3c39ce17","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:26.379470Z","iopub.status.busy":"2022-02-25T05:56:26.378729Z","iopub.status.idle":"2022-02-25T05:56:26.381370Z","shell.execute_reply":"2022-02-25T05:56:26.381878Z","shell.execute_reply.started":"2022-02-23T19:50:56.429324Z"},"papermill":{"duration":0.242091,"end_time":"2022-02-25T05:56:26.382060","exception":false,"start_time":"2022-02-25T05:56:26.139969","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"3c39ce17","executionInfo":{"status":"ok","timestamp":1647309322851,"user_tz":-330,"elapsed":117,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"8df66bfd-5494-4fa3-b60c-32291fc07e01"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      True\n","1      True\n","2      True\n","3      True\n","4      True\n","       ... \n","737    True\n","738    True\n","739    True\n","740    True\n","741    True\n","Name: compare, Length: 742, dtype: bool"]},"metadata":{},"execution_count":34}],"source":["salary['compare'] = (salary['Company Name'] == salary['company_txt'])\n","salary['compare'] "]},{"cell_type":"code","execution_count":null,"id":"b6f911f0","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:26.842936Z","iopub.status.busy":"2022-02-25T05:56:26.842222Z","iopub.status.idle":"2022-02-25T05:56:26.849385Z","shell.execute_reply":"2022-02-25T05:56:26.849962Z","shell.execute_reply.started":"2022-02-23T19:50:56.444466Z"},"papermill":{"duration":0.238774,"end_time":"2022-02-25T05:56:26.850141","exception":false,"start_time":"2022-02-25T05:56:26.611367","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"b6f911f0","executionInfo":{"status":"ok","timestamp":1647309322854,"user_tz":-330,"elapsed":115,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"0a75489b-a56d-405f-ad26-bc9a5531828d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True     731\n","False     11\n","Name: compare, dtype: int64"]},"metadata":{},"execution_count":35}],"source":["salary['compare'].value_counts()# checking both column values are same or not but we get to know that 11 are different values"]},{"cell_type":"markdown","id":"28b666f2","metadata":{"papermill":{"duration":0.236329,"end_time":"2022-02-25T05:56:27.317781","exception":false,"start_time":"2022-02-25T05:56:27.081452","status":"completed"},"tags":[],"id":"28b666f2"},"source":["# checking False values to change their company name"]},{"cell_type":"code","execution_count":null,"id":"a1fd6a9c","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:27.849419Z","iopub.status.busy":"2022-02-25T05:56:27.848423Z","iopub.status.idle":"2022-02-25T05:56:27.913790Z","shell.execute_reply":"2022-02-25T05:56:27.914303Z","shell.execute_reply.started":"2022-02-23T19:50:56.457863Z"},"papermill":{"duration":0.335052,"end_time":"2022-02-25T05:56:27.914472","exception":false,"start_time":"2022-02-25T05:56:27.579420","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"a1fd6a9c","executionInfo":{"status":"ok","timestamp":1647309323842,"user_tz":-330,"elapsed":1099,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"bdff5df7-534c-4cd0-83b7-c5f519400eca"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                             Job Title  \\\n","176  Principal Data Scientist with over 10 years ex...   \n","266  Principal Data Scientist with over 10 years ex...   \n","300                               Data Operations Lead   \n","370    Research Scientist, Immunology - Cancer Biology   \n","404  Senior Scientist, Cell Pharmacology/Assay Deve...   \n","456                                     Data Scientist   \n","551    Research Scientist, Immunology - Cancer Biology   \n","581      Scientist – Cancer Discovery, Molecular Assay   \n","609  Senior Scientist, Cell Pharmacology/Assay Deve...   \n","641  Principal Research Scientist/Team Lead, Medici...   \n","730    Research Scientist, Immunology - Cancer Biology   \n","\n","                          Salary Estimate  \\\n","176  Employer Provided Salary:$200K-$250K   \n","266  Employer Provided Salary:$200K-$250K   \n","300    Employer Provided Salary:$85K-$90K   \n","370  Employer Provided Salary:$100K-$140K   \n","404  Employer Provided Salary:$110K-$130K   \n","456           $81K-$140K (Glassdoor est.)   \n","551  Employer Provided Salary:$100K-$140K   \n","581  Employer Provided Salary:$100K-$135K   \n","609  Employer Provided Salary:$110K-$130K   \n","641  Employer Provided Salary:$120K-$145K   \n","730  Employer Provided Salary:$100K-$140K   \n","\n","                                       Job Description    Rating  \\\n","176  Position Title: Principal Data Scientist\\nLoca...  3.688372   \n","266  Position Title: Principal Data Scientist\\nLoca...  3.688372   \n","300  Data Operations Lead\\nLocation: Flexible thoug...  3.688372   \n","370  Research Scientist, Immunology - Cancer Biolog...  3.688372   \n","404  Senior Scientist, Cell Pharmacology/Assay Deve...  3.688372   \n","456  As a Data Scientist, you will play a critical ...  3.688372   \n","551  Research Scientist, Immunology - Cancer Biolog...  3.688372   \n","581  Scientist – Cancer Discovery, Molecular Assay\\...  3.688372   \n","609  Senior Scientist, Cell Pharmacology/Assay Deve...  3.688372   \n","641  Principal Research Scientist/Team Lead, Medici...  3.688372   \n","730  Research Scientist, Immunology - Cancer Biolog...  3.688372   \n","\n","            Company Name           Location       Headquarters        Size  \\\n","176        CA-One Tech C  San Francisco, CA        Fremont, CA   51 - 200    \n","266        CA-One Tech C  San Francisco, CA        Fremont, CA   51 - 200    \n","300                       San Francisco, CA  San Francisco, CA  201 - 500    \n","370               Kronos      Cambridge, MA      San Mateo, CA     unknown   \n","404               Kronos      Cambridge, MA      San Mateo, CA     unknown   \n","456                            New York, NY       Noida, India     unknown   \n","551               Kronos      Cambridge, MA      San Mateo, CA     unknown   \n","581  Monte Rosa Therapeu      Cambridge, MA       New York, NY     unknown   \n","609               Kronos      Cambridge, MA      San Mateo, CA     unknown   \n","641               Kronos      Cambridge, MA      San Mateo, CA     unknown   \n","730               Kronos      Cambridge, MA      San Mateo, CA     unknown   \n","\n","     Founded       Type of ownership                   Industry  \\\n","176   2017.0       Company - Private                IT Services   \n","266   2017.0       Company - Private                IT Services   \n","300   1992.0  Nonprofit Organization  Biotech & Pharmaceuticals   \n","370   1992.0       Company - Private  Biotech & Pharmaceuticals   \n","404   1992.0       Company - Private  Biotech & Pharmaceuticals   \n","456   1992.0       Company - Private  Biotech & Pharmaceuticals   \n","551   1992.0       Company - Private  Biotech & Pharmaceuticals   \n","581   1992.0      Other Organization  Biotech & Pharmaceuticals   \n","609   1992.0       Company - Private  Biotech & Pharmaceuticals   \n","641   1992.0       Company - Private  Biotech & Pharmaceuticals   \n","730   1992.0       Company - Private  Biotech & Pharmaceuticals   \n","\n","                     Sector                   Revenue  \\\n","176  Information Technology   $5 to $10 million (USD)   \n","266  Information Technology   $5 to $10 million (USD)   \n","300  Information Technology  Unknown / Non-Applicable   \n","370  Information Technology  Unknown / Non-Applicable   \n","404  Information Technology  Unknown / Non-Applicable   \n","456  Information Technology  Unknown / Non-Applicable   \n","551  Information Technology  Unknown / Non-Applicable   \n","581  Information Technology  Unknown / Non-Applicable   \n","609  Information Technology  Unknown / Non-Applicable   \n","641  Information Technology  Unknown / Non-Applicable   \n","730  Information Technology  Unknown / Non-Applicable   \n","\n","                  Competitors  Hourly  Employer provided  Lower Salary  \\\n","176  Novartis, Baxter, Pfizer     0.0                1.0         200.0   \n","266  Novartis, Baxter, Pfizer     0.0                1.0         200.0   \n","300  Novartis, Baxter, Pfizer     0.0                1.0          85.0   \n","370  Novartis, Baxter, Pfizer     0.0                1.0         100.0   \n","404  Novartis, Baxter, Pfizer     0.0                1.0         110.0   \n","456  Novartis, Baxter, Pfizer     0.0                0.0          81.0   \n","551  Novartis, Baxter, Pfizer     0.0                1.0         100.0   \n","581  Novartis, Baxter, Pfizer     0.0                1.0         100.0   \n","609  Novartis, Baxter, Pfizer     0.0                1.0         110.0   \n","641  Novartis, Baxter, Pfizer     0.0                1.0         120.0   \n","730  Novartis, Baxter, Pfizer     0.0                1.0         100.0   \n","\n","     Upper Salary  Avg Salary(K)             company_txt Job Location   Age  \\\n","176         250.0          225.0        CA-One Tech Clou           CA   4.0   \n","266         250.0          225.0        CA-One Tech Clou           CA   4.0   \n","300          90.0           87.5                     Mus           CA  29.0   \n","370         140.0          120.0               Kronos Bi           MA  29.0   \n","404         130.0          120.0               Kronos Bi           MA  29.0   \n","456         140.0          110.5                     ALI           NY  29.0   \n","551         140.0          120.0               Kronos Bi           MA  29.0   \n","581         135.0          117.5  Monte Rosa Therapeutic           MA  29.0   \n","609         130.0          120.0               Kronos Bi           MA  29.0   \n","641         145.0          132.5               Kronos Bi           MA  29.0   \n","730         140.0          120.0               Kronos Bi           MA  29.0   \n","\n","     Python  spark  aws  excel  sql  sas  keras  pytorch  scikit  tensor  \\\n","176     1.0    0.0  1.0    1.0  0.0  0.0    0.0      0.0     0.0     0.0   \n","266     1.0    0.0  1.0    1.0  0.0  0.0    0.0      0.0     0.0     0.0   \n","300     1.0    0.0  0.0    1.0  1.0  0.0    0.0      0.0     0.0     0.0   \n","370     0.0    0.0  0.0    1.0  0.0  0.0    0.0      0.0     0.0     0.0   \n","404     0.0    0.0  0.0    0.0  0.0  0.0    0.0      0.0     0.0     0.0   \n","456     1.0    0.0  0.0    0.0  1.0  0.0    0.0      0.0     0.0     1.0   \n","551     0.0    0.0  0.0    1.0  0.0  0.0    0.0      0.0     0.0     0.0   \n","581     0.0    0.0  0.0    1.0  0.0  0.0    0.0      0.0     0.0     0.0   \n","609     0.0    0.0  0.0    0.0  0.0  0.0    0.0      0.0     0.0     0.0   \n","641     0.0    0.0  0.0    0.0  0.0  0.0    0.0      0.0     0.0     0.0   \n","730     0.0    0.0  0.0    1.0  0.0  0.0    0.0      0.0     0.0     0.0   \n","\n","     hadoop  tableau   bi  flink  mongo  google_an    job_title_sim  \\\n","176     0.0      1.0  0.0    0.0    0.0        0.0   data scientist   \n","266     0.0      1.0  0.0    0.0    0.0        0.0   data scientist   \n","300     0.0      1.0  0.0    0.0    0.0        0.0               na   \n","370     0.0      0.0  0.0    0.0    0.0        0.0  other scientist   \n","404     0.0      0.0  0.0    0.0    0.0        0.0  other scientist   \n","456     0.0      0.0  0.0    0.0    0.0        0.0   data scientist   \n","551     0.0      0.0  0.0    0.0    0.0        0.0  other scientist   \n","581     0.0      0.0  0.0    0.0    0.0        0.0  other scientist   \n","609     0.0      0.0  0.0    0.0    0.0        0.0  other scientist   \n","641     0.0      0.0  0.0    0.0    0.0        0.0  other scientist   \n","730     0.0      0.0  0.0    0.0    0.0        0.0  other scientist   \n","\n","    seniority_by_title Degree  compare  \n","176                 sr     na    False  \n","266                 sr     na    False  \n","300                 sr      M    False  \n","370                 na      P    False  \n","404                 sr      P    False  \n","456                 na      M    False  \n","551                 na      P    False  \n","581                 na      P    False  \n","609                 sr      P    False  \n","641                 sr      P    False  \n","730                 na      P    False  "],"text/html":["\n","  <div id=\"df-c84e449c-218c-4c3e-be9f-8a68c9bad78b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Job Title</th>\n","      <th>Salary Estimate</th>\n","      <th>Job Description</th>\n","      <th>Rating</th>\n","      <th>Company Name</th>\n","      <th>Location</th>\n","      <th>Headquarters</th>\n","      <th>Size</th>\n","      <th>Founded</th>\n","      <th>Type of ownership</th>\n","      <th>Industry</th>\n","      <th>Sector</th>\n","      <th>Revenue</th>\n","      <th>Competitors</th>\n","      <th>Hourly</th>\n","      <th>Employer provided</th>\n","      <th>Lower Salary</th>\n","      <th>Upper Salary</th>\n","      <th>Avg Salary(K)</th>\n","      <th>company_txt</th>\n","      <th>Job Location</th>\n","      <th>Age</th>\n","      <th>Python</th>\n","      <th>spark</th>\n","      <th>aws</th>\n","      <th>excel</th>\n","      <th>sql</th>\n","      <th>sas</th>\n","      <th>keras</th>\n","      <th>pytorch</th>\n","      <th>scikit</th>\n","      <th>tensor</th>\n","      <th>hadoop</th>\n","      <th>tableau</th>\n","      <th>bi</th>\n","      <th>flink</th>\n","      <th>mongo</th>\n","      <th>google_an</th>\n","      <th>job_title_sim</th>\n","      <th>seniority_by_title</th>\n","      <th>Degree</th>\n","      <th>compare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>176</th>\n","      <td>Principal Data Scientist with over 10 years ex...</td>\n","      <td>Employer Provided Salary:$200K-$250K</td>\n","      <td>Position Title: Principal Data Scientist\\nLoca...</td>\n","      <td>3.688372</td>\n","      <td>CA-One Tech C</td>\n","      <td>San Francisco, CA</td>\n","      <td>Fremont, CA</td>\n","      <td>51 - 200</td>\n","      <td>2017.0</td>\n","      <td>Company - Private</td>\n","      <td>IT Services</td>\n","      <td>Information Technology</td>\n","      <td>$5 to $10 million (USD)</td>\n","      <td>Novartis, Baxter, Pfizer</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>200.0</td>\n","      <td>250.0</td>\n","      <td>225.0</td>\n","      <td>CA-One Tech Clou</td>\n","      <td>CA</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>data scientist</td>\n","      <td>sr</td>\n","      <td>na</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>266</th>\n","      <td>Principal Data Scientist with over 10 years ex...</td>\n","      <td>Employer Provided Salary:$200K-$250K</td>\n","      <td>Position Title: Principal Data Scientist\\nLoca...</td>\n","      <td>3.688372</td>\n","      <td>CA-One Tech C</td>\n","      <td>San Francisco, CA</td>\n","      <td>Fremont, CA</td>\n","      <td>51 - 200</td>\n","      <td>2017.0</td>\n","      <td>Company - Private</td>\n","      <td>IT Services</td>\n","      <td>Information Technology</td>\n","      <td>$5 to $10 million (USD)</td>\n","      <td>Novartis, Baxter, Pfizer</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>200.0</td>\n","      <td>250.0</td>\n","      <td>225.0</td>\n","      <td>CA-One Tech Clou</td>\n","      <td>CA</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>data scientist</td>\n","      <td>sr</td>\n","      <td>na</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>300</th>\n","      <td>Data Operations Lead</td>\n","      <td>Employer Provided Salary:$85K-$90K</td>\n","      <td>Data Operations Lead\\nLocation: Flexible thoug...</td>\n","      <td>3.688372</td>\n","      <td></td>\n","      <td>San Francisco, CA</td>\n","      <td>San Francisco, CA</td>\n","      <td>201 - 500</td>\n","      <td>1992.0</td>\n","      <td>Nonprofit Organization</td>\n","      <td>Biotech &amp; Pharmaceuticals</td>\n","      <td>Information Technology</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>Novartis, Baxter, Pfizer</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>85.0</td>\n","      <td>90.0</td>\n","      <td>87.5</td>\n","      <td>Mus</td>\n","      <td>CA</td>\n","      <td>29.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>na</td>\n","      <td>sr</td>\n","      <td>M</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>370</th>\n","      <td>Research Scientist, Immunology - Cancer Biology</td>\n","      <td>Employer Provided Salary:$100K-$140K</td>\n","      <td>Research Scientist, Immunology - Cancer Biolog...</td>\n","      <td>3.688372</td>\n","      <td>Kronos</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>1992.0</td>\n","      <td>Company - Private</td>\n","      <td>Biotech &amp; Pharmaceuticals</td>\n","      <td>Information Technology</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>Novartis, Baxter, Pfizer</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>100.0</td>\n","      <td>140.0</td>\n","      <td>120.0</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>29.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>other scientist</td>\n","      <td>na</td>\n","      <td>P</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>404</th>\n","      <td>Senior Scientist, Cell Pharmacology/Assay Deve...</td>\n","      <td>Employer Provided Salary:$110K-$130K</td>\n","      <td>Senior Scientist, Cell Pharmacology/Assay Deve...</td>\n","      <td>3.688372</td>\n","      <td>Kronos</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>1992.0</td>\n","      <td>Company - Private</td>\n","      <td>Biotech &amp; Pharmaceuticals</td>\n","      <td>Information Technology</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>Novartis, Baxter, Pfizer</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>110.0</td>\n","      <td>130.0</td>\n","      <td>120.0</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>29.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>other scientist</td>\n","      <td>sr</td>\n","      <td>P</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>456</th>\n","      <td>Data Scientist</td>\n","      <td>$81K-$140K (Glassdoor est.)</td>\n","      <td>As a Data Scientist, you will play a critical ...</td>\n","      <td>3.688372</td>\n","      <td></td>\n","      <td>New York, NY</td>\n","      <td>Noida, India</td>\n","      <td>unknown</td>\n","      <td>1992.0</td>\n","      <td>Company - Private</td>\n","      <td>Biotech &amp; Pharmaceuticals</td>\n","      <td>Information Technology</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>Novartis, Baxter, Pfizer</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>81.0</td>\n","      <td>140.0</td>\n","      <td>110.5</td>\n","      <td>ALI</td>\n","      <td>NY</td>\n","      <td>29.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>data scientist</td>\n","      <td>na</td>\n","      <td>M</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>551</th>\n","      <td>Research Scientist, Immunology - Cancer Biology</td>\n","      <td>Employer Provided Salary:$100K-$140K</td>\n","      <td>Research Scientist, Immunology - Cancer Biolog...</td>\n","      <td>3.688372</td>\n","      <td>Kronos</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>1992.0</td>\n","      <td>Company - Private</td>\n","      <td>Biotech &amp; Pharmaceuticals</td>\n","      <td>Information Technology</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>Novartis, Baxter, Pfizer</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>100.0</td>\n","      <td>140.0</td>\n","      <td>120.0</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>29.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>other scientist</td>\n","      <td>na</td>\n","      <td>P</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>581</th>\n","      <td>Scientist – Cancer Discovery, Molecular Assay</td>\n","      <td>Employer Provided Salary:$100K-$135K</td>\n","      <td>Scientist – Cancer Discovery, Molecular Assay\\...</td>\n","      <td>3.688372</td>\n","      <td>Monte Rosa Therapeu</td>\n","      <td>Cambridge, MA</td>\n","      <td>New York, NY</td>\n","      <td>unknown</td>\n","      <td>1992.0</td>\n","      <td>Other Organization</td>\n","      <td>Biotech &amp; Pharmaceuticals</td>\n","      <td>Information Technology</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>Novartis, Baxter, Pfizer</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>100.0</td>\n","      <td>135.0</td>\n","      <td>117.5</td>\n","      <td>Monte Rosa Therapeutic</td>\n","      <td>MA</td>\n","      <td>29.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>other scientist</td>\n","      <td>na</td>\n","      <td>P</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>609</th>\n","      <td>Senior Scientist, Cell Pharmacology/Assay Deve...</td>\n","      <td>Employer Provided Salary:$110K-$130K</td>\n","      <td>Senior Scientist, Cell Pharmacology/Assay Deve...</td>\n","      <td>3.688372</td>\n","      <td>Kronos</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>1992.0</td>\n","      <td>Company - Private</td>\n","      <td>Biotech &amp; Pharmaceuticals</td>\n","      <td>Information Technology</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>Novartis, Baxter, Pfizer</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>110.0</td>\n","      <td>130.0</td>\n","      <td>120.0</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>29.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>other scientist</td>\n","      <td>sr</td>\n","      <td>P</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>641</th>\n","      <td>Principal Research Scientist/Team Lead, Medici...</td>\n","      <td>Employer Provided Salary:$120K-$145K</td>\n","      <td>Principal Research Scientist/Team Lead, Medici...</td>\n","      <td>3.688372</td>\n","      <td>Kronos</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>1992.0</td>\n","      <td>Company - Private</td>\n","      <td>Biotech &amp; Pharmaceuticals</td>\n","      <td>Information Technology</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>Novartis, Baxter, Pfizer</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>120.0</td>\n","      <td>145.0</td>\n","      <td>132.5</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>29.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>other scientist</td>\n","      <td>sr</td>\n","      <td>P</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>730</th>\n","      <td>Research Scientist, Immunology - Cancer Biology</td>\n","      <td>Employer Provided Salary:$100K-$140K</td>\n","      <td>Research Scientist, Immunology - Cancer Biolog...</td>\n","      <td>3.688372</td>\n","      <td>Kronos</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>1992.0</td>\n","      <td>Company - Private</td>\n","      <td>Biotech &amp; Pharmaceuticals</td>\n","      <td>Information Technology</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>Novartis, Baxter, Pfizer</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>100.0</td>\n","      <td>140.0</td>\n","      <td>120.0</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>29.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>other scientist</td>\n","      <td>na</td>\n","      <td>P</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c84e449c-218c-4c3e-be9f-8a68c9bad78b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c84e449c-218c-4c3e-be9f-8a68c9bad78b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c84e449c-218c-4c3e-be9f-8a68c9bad78b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":36}],"source":["salary[salary[\"compare\"]==False]"]},{"cell_type":"code","execution_count":null,"id":"c270b670","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:28.383383Z","iopub.status.busy":"2022-02-25T05:56:28.382387Z","iopub.status.idle":"2022-02-25T05:56:28.388241Z","shell.execute_reply":"2022-02-25T05:56:28.388849Z","shell.execute_reply.started":"2022-02-23T19:50:56.529306Z"},"papermill":{"duration":0.239531,"end_time":"2022-02-25T05:56:28.389017","exception":false,"start_time":"2022-02-25T05:56:28.149486","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"c270b670","executionInfo":{"status":"ok","timestamp":1647309323848,"user_tz":-330,"elapsed":179,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"cface679-7ab4-400e-f083-4bff3f693b12"},"outputs":[{"output_type":"stream","name":"stdout","text":["[176 266 300 370 404 456 551 581 609 641 730]\n"]}],"source":["print(salary[salary[\"compare\"]==False].index.values)"]},{"cell_type":"code","execution_count":null,"id":"08c9096b","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:28.862039Z","iopub.status.busy":"2022-02-25T05:56:28.859790Z","iopub.status.idle":"2022-02-25T05:56:28.865488Z","shell.execute_reply":"2022-02-25T05:56:28.866133Z","shell.execute_reply.started":"2022-02-23T19:50:56.537763Z"},"papermill":{"duration":0.242266,"end_time":"2022-02-25T05:56:28.866316","exception":false,"start_time":"2022-02-25T05:56:28.624050","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"08c9096b","executionInfo":{"status":"ok","timestamp":1647309323851,"user_tz":-330,"elapsed":161,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"17e68865-ef01-4fc7-843b-5f92fba2752c"},"outputs":[{"output_type":"stream","name":"stdout","text":["[370 404 551 609 641 730]\n"]}],"source":["print(salary[salary[\"Company Name\"]==\"Kronos\"].index.values)"]},{"cell_type":"code","execution_count":null,"id":"b8986970","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:29.332525Z","iopub.status.busy":"2022-02-25T05:56:29.331841Z","iopub.status.idle":"2022-02-25T05:56:29.363501Z","shell.execute_reply":"2022-02-25T05:56:29.364076Z","shell.execute_reply.started":"2022-02-23T19:50:56.550726Z"},"papermill":{"duration":0.265681,"end_time":"2022-02-25T05:56:29.364251","exception":false,"start_time":"2022-02-25T05:56:29.098570","status":"completed"},"scrolled":true,"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"b8986970","executionInfo":{"status":"ok","timestamp":1647309323863,"user_tz":-330,"elapsed":168,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"13347e6d-7ff8-4ad1-c876-5245b2d9b3dd"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     index                                          Job Title  \\\n","370    472    Research Scientist, Immunology - Cancer Biology   \n","404    518  Senior Scientist, Cell Pharmacology/Assay Deve...   \n","551    703    Research Scientist, Immunology - Cancer Biology   \n","609    778  Senior Scientist, Cell Pharmacology/Assay Deve...   \n","641    819  Principal Research Scientist/Team Lead, Medici...   \n","730    943    Research Scientist, Immunology - Cancer Biology   \n","\n","                          Salary Estimate  \\\n","370  Employer Provided Salary:$100K-$140K   \n","404  Employer Provided Salary:$110K-$130K   \n","551  Employer Provided Salary:$100K-$140K   \n","609  Employer Provided Salary:$110K-$130K   \n","641  Employer Provided Salary:$120K-$145K   \n","730  Employer Provided Salary:$100K-$140K   \n","\n","                                       Job Description  Rating Company Name  \\\n","370  Research Scientist, Immunology - Cancer Biolog...    -1.0   Kronos Bio   \n","404  Senior Scientist, Cell Pharmacology/Assay Deve...    -1.0   Kronos Bio   \n","551  Research Scientist, Immunology - Cancer Biolog...    -1.0   Kronos Bio   \n","609  Senior Scientist, Cell Pharmacology/Assay Deve...    -1.0   Kronos Bio   \n","641  Principal Research Scientist/Team Lead, Medici...    -1.0   Kronos Bio   \n","730  Research Scientist, Immunology - Cancer Biolog...    -1.0   Kronos Bio   \n","\n","          Location   Headquarters     Size  Founded  Type of ownership  \\\n","370  Cambridge, MA  San Mateo, CA  unknown       -1  Company - Private   \n","404  Cambridge, MA  San Mateo, CA  unknown       -1  Company - Private   \n","551  Cambridge, MA  San Mateo, CA  unknown       -1  Company - Private   \n","609  Cambridge, MA  San Mateo, CA  unknown       -1  Company - Private   \n","641  Cambridge, MA  San Mateo, CA  unknown       -1  Company - Private   \n","730  Cambridge, MA  San Mateo, CA  unknown       -1  Company - Private   \n","\n","    Industry Sector                   Revenue Competitors  Hourly  \\\n","370       -1     -1  Unknown / Non-Applicable          -1       0   \n","404       -1     -1  Unknown / Non-Applicable          -1       0   \n","551       -1     -1  Unknown / Non-Applicable          -1       0   \n","609       -1     -1  Unknown / Non-Applicable          -1       0   \n","641       -1     -1  Unknown / Non-Applicable          -1       0   \n","730       -1     -1  Unknown / Non-Applicable          -1       0   \n","\n","     Employer provided  Lower Salary  Upper Salary  Avg Salary(K) company_txt  \\\n","370                  1           100           140          120.0   Kronos Bi   \n","404                  1           110           130          120.0   Kronos Bi   \n","551                  1           100           140          120.0   Kronos Bi   \n","609                  1           110           130          120.0   Kronos Bi   \n","641                  1           120           145          132.5   Kronos Bi   \n","730                  1           100           140          120.0   Kronos Bi   \n","\n","    Job Location  Age  Python  spark  aws  excel  sql  sas  keras  pytorch  \\\n","370           MA   -1       0      0    0      1    0    0      0        0   \n","404           MA   -1       0      0    0      0    0    0      0        0   \n","551           MA   -1       0      0    0      1    0    0      0        0   \n","609           MA   -1       0      0    0      0    0    0      0        0   \n","641           MA   -1       0      0    0      0    0    0      0        0   \n","730           MA   -1       0      0    0      1    0    0      0        0   \n","\n","     scikit  tensor  hadoop  tableau  bi  flink  mongo  google_an  \\\n","370       0       0       0        0   0      0      0          0   \n","404       0       0       0        0   0      0      0          0   \n","551       0       0       0        0   0      0      0          0   \n","609       0       0       0        0   0      0      0          0   \n","641       0       0       0        0   0      0      0          0   \n","730       0       0       0        0   0      0      0          0   \n","\n","       job_title_sim seniority_by_title Degree  \n","370  other scientist                 na      P  \n","404  other scientist                 sr      P  \n","551  other scientist                 na      P  \n","609  other scientist                 sr      P  \n","641  other scientist                 sr      P  \n","730  other scientist                 na      P  "],"text/html":["\n","  <div id=\"df-c2cf421a-3890-45bd-a9ae-becb3d06ca8d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>Job Title</th>\n","      <th>Salary Estimate</th>\n","      <th>Job Description</th>\n","      <th>Rating</th>\n","      <th>Company Name</th>\n","      <th>Location</th>\n","      <th>Headquarters</th>\n","      <th>Size</th>\n","      <th>Founded</th>\n","      <th>Type of ownership</th>\n","      <th>Industry</th>\n","      <th>Sector</th>\n","      <th>Revenue</th>\n","      <th>Competitors</th>\n","      <th>Hourly</th>\n","      <th>Employer provided</th>\n","      <th>Lower Salary</th>\n","      <th>Upper Salary</th>\n","      <th>Avg Salary(K)</th>\n","      <th>company_txt</th>\n","      <th>Job Location</th>\n","      <th>Age</th>\n","      <th>Python</th>\n","      <th>spark</th>\n","      <th>aws</th>\n","      <th>excel</th>\n","      <th>sql</th>\n","      <th>sas</th>\n","      <th>keras</th>\n","      <th>pytorch</th>\n","      <th>scikit</th>\n","      <th>tensor</th>\n","      <th>hadoop</th>\n","      <th>tableau</th>\n","      <th>bi</th>\n","      <th>flink</th>\n","      <th>mongo</th>\n","      <th>google_an</th>\n","      <th>job_title_sim</th>\n","      <th>seniority_by_title</th>\n","      <th>Degree</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>370</th>\n","      <td>472</td>\n","      <td>Research Scientist, Immunology - Cancer Biology</td>\n","      <td>Employer Provided Salary:$100K-$140K</td>\n","      <td>Research Scientist, Immunology - Cancer Biolog...</td>\n","      <td>-1.0</td>\n","      <td>Kronos Bio</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>-1</td>\n","      <td>Company - Private</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>100</td>\n","      <td>140</td>\n","      <td>120.0</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>other scientist</td>\n","      <td>na</td>\n","      <td>P</td>\n","    </tr>\n","    <tr>\n","      <th>404</th>\n","      <td>518</td>\n","      <td>Senior Scientist, Cell Pharmacology/Assay Deve...</td>\n","      <td>Employer Provided Salary:$110K-$130K</td>\n","      <td>Senior Scientist, Cell Pharmacology/Assay Deve...</td>\n","      <td>-1.0</td>\n","      <td>Kronos Bio</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>-1</td>\n","      <td>Company - Private</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>110</td>\n","      <td>130</td>\n","      <td>120.0</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>other scientist</td>\n","      <td>sr</td>\n","      <td>P</td>\n","    </tr>\n","    <tr>\n","      <th>551</th>\n","      <td>703</td>\n","      <td>Research Scientist, Immunology - Cancer Biology</td>\n","      <td>Employer Provided Salary:$100K-$140K</td>\n","      <td>Research Scientist, Immunology - Cancer Biolog...</td>\n","      <td>-1.0</td>\n","      <td>Kronos Bio</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>-1</td>\n","      <td>Company - Private</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>100</td>\n","      <td>140</td>\n","      <td>120.0</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>other scientist</td>\n","      <td>na</td>\n","      <td>P</td>\n","    </tr>\n","    <tr>\n","      <th>609</th>\n","      <td>778</td>\n","      <td>Senior Scientist, Cell Pharmacology/Assay Deve...</td>\n","      <td>Employer Provided Salary:$110K-$130K</td>\n","      <td>Senior Scientist, Cell Pharmacology/Assay Deve...</td>\n","      <td>-1.0</td>\n","      <td>Kronos Bio</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>-1</td>\n","      <td>Company - Private</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>110</td>\n","      <td>130</td>\n","      <td>120.0</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>other scientist</td>\n","      <td>sr</td>\n","      <td>P</td>\n","    </tr>\n","    <tr>\n","      <th>641</th>\n","      <td>819</td>\n","      <td>Principal Research Scientist/Team Lead, Medici...</td>\n","      <td>Employer Provided Salary:$120K-$145K</td>\n","      <td>Principal Research Scientist/Team Lead, Medici...</td>\n","      <td>-1.0</td>\n","      <td>Kronos Bio</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>-1</td>\n","      <td>Company - Private</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>120</td>\n","      <td>145</td>\n","      <td>132.5</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>other scientist</td>\n","      <td>sr</td>\n","      <td>P</td>\n","    </tr>\n","    <tr>\n","      <th>730</th>\n","      <td>943</td>\n","      <td>Research Scientist, Immunology - Cancer Biology</td>\n","      <td>Employer Provided Salary:$100K-$140K</td>\n","      <td>Research Scientist, Immunology - Cancer Biolog...</td>\n","      <td>-1.0</td>\n","      <td>Kronos Bio</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>-1</td>\n","      <td>Company - Private</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>100</td>\n","      <td>140</td>\n","      <td>120.0</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>other scientist</td>\n","      <td>na</td>\n","      <td>P</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c2cf421a-3890-45bd-a9ae-becb3d06ca8d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c2cf421a-3890-45bd-a9ae-becb3d06ca8d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c2cf421a-3890-45bd-a9ae-becb3d06ca8d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":39}],"source":["df.loc[[370,404,551,609,641,730]] # checking original data frame company name values as we reduced name by 4 letters from right side"]},{"cell_type":"markdown","id":"675e67e4","metadata":{"papermill":{"duration":0.234196,"end_time":"2022-02-25T05:56:29.834452","exception":false,"start_time":"2022-02-25T05:56:29.600256","status":"completed"},"tags":[],"id":"675e67e4"},"source":["#as in above original dataframe comapany name of above index values is **\"Kronos Bio\"** so we replace them"]},{"cell_type":"code","execution_count":null,"id":"a6a4aa79","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:30.311500Z","iopub.status.busy":"2022-02-25T05:56:30.310850Z","iopub.status.idle":"2022-02-25T05:56:30.315450Z","shell.execute_reply":"2022-02-25T05:56:30.316018Z","shell.execute_reply.started":"2022-02-23T19:50:56.589312Z"},"papermill":{"duration":0.242182,"end_time":"2022-02-25T05:56:30.316201","exception":false,"start_time":"2022-02-25T05:56:30.074019","status":"completed"},"tags":[],"id":"a6a4aa79"},"outputs":[],"source":["salary.loc[[370,404,551,609,641,730], 'Company Name'] = \"Kronos Bio\" "]},{"cell_type":"code","execution_count":null,"id":"1bec355a","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:30.788171Z","iopub.status.busy":"2022-02-25T05:56:30.787470Z","iopub.status.idle":"2022-02-25T05:56:30.837474Z","shell.execute_reply":"2022-02-25T05:56:30.836762Z","shell.execute_reply.started":"2022-02-23T19:50:56.596789Z"},"papermill":{"duration":0.286307,"end_time":"2022-02-25T05:56:30.837625","exception":false,"start_time":"2022-02-25T05:56:30.551318","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"1bec355a","executionInfo":{"status":"ok","timestamp":1647309323869,"user_tz":-330,"elapsed":167,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"02281404-0b20-49bd-fb1e-7f98714b53ce"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                             Job Title  \\\n","370    Research Scientist, Immunology - Cancer Biology   \n","404  Senior Scientist, Cell Pharmacology/Assay Deve...   \n","551    Research Scientist, Immunology - Cancer Biology   \n","609  Senior Scientist, Cell Pharmacology/Assay Deve...   \n","641  Principal Research Scientist/Team Lead, Medici...   \n","730    Research Scientist, Immunology - Cancer Biology   \n","\n","                          Salary Estimate  \\\n","370  Employer Provided Salary:$100K-$140K   \n","404  Employer Provided Salary:$110K-$130K   \n","551  Employer Provided Salary:$100K-$140K   \n","609  Employer Provided Salary:$110K-$130K   \n","641  Employer Provided Salary:$120K-$145K   \n","730  Employer Provided Salary:$100K-$140K   \n","\n","                                       Job Description    Rating Company Name  \\\n","370  Research Scientist, Immunology - Cancer Biolog...  3.688372   Kronos Bio   \n","404  Senior Scientist, Cell Pharmacology/Assay Deve...  3.688372   Kronos Bio   \n","551  Research Scientist, Immunology - Cancer Biolog...  3.688372   Kronos Bio   \n","609  Senior Scientist, Cell Pharmacology/Assay Deve...  3.688372   Kronos Bio   \n","641  Principal Research Scientist/Team Lead, Medici...  3.688372   Kronos Bio   \n","730  Research Scientist, Immunology - Cancer Biolog...  3.688372   Kronos Bio   \n","\n","          Location   Headquarters     Size  Founded  Type of ownership  \\\n","370  Cambridge, MA  San Mateo, CA  unknown   1992.0  Company - Private   \n","404  Cambridge, MA  San Mateo, CA  unknown   1992.0  Company - Private   \n","551  Cambridge, MA  San Mateo, CA  unknown   1992.0  Company - Private   \n","609  Cambridge, MA  San Mateo, CA  unknown   1992.0  Company - Private   \n","641  Cambridge, MA  San Mateo, CA  unknown   1992.0  Company - Private   \n","730  Cambridge, MA  San Mateo, CA  unknown   1992.0  Company - Private   \n","\n","                      Industry                  Sector  \\\n","370  Biotech & Pharmaceuticals  Information Technology   \n","404  Biotech & Pharmaceuticals  Information Technology   \n","551  Biotech & Pharmaceuticals  Information Technology   \n","609  Biotech & Pharmaceuticals  Information Technology   \n","641  Biotech & Pharmaceuticals  Information Technology   \n","730  Biotech & Pharmaceuticals  Information Technology   \n","\n","                      Revenue               Competitors  Hourly  \\\n","370  Unknown / Non-Applicable  Novartis, Baxter, Pfizer     0.0   \n","404  Unknown / Non-Applicable  Novartis, Baxter, Pfizer     0.0   \n","551  Unknown / Non-Applicable  Novartis, Baxter, Pfizer     0.0   \n","609  Unknown / Non-Applicable  Novartis, Baxter, Pfizer     0.0   \n","641  Unknown / Non-Applicable  Novartis, Baxter, Pfizer     0.0   \n","730  Unknown / Non-Applicable  Novartis, Baxter, Pfizer     0.0   \n","\n","     Employer provided  Lower Salary  Upper Salary  Avg Salary(K) company_txt  \\\n","370                1.0         100.0         140.0          120.0   Kronos Bi   \n","404                1.0         110.0         130.0          120.0   Kronos Bi   \n","551                1.0         100.0         140.0          120.0   Kronos Bi   \n","609                1.0         110.0         130.0          120.0   Kronos Bi   \n","641                1.0         120.0         145.0          132.5   Kronos Bi   \n","730                1.0         100.0         140.0          120.0   Kronos Bi   \n","\n","    Job Location   Age  Python  spark  aws  excel  sql  sas  keras  pytorch  \\\n","370           MA  29.0     0.0    0.0  0.0    1.0  0.0  0.0    0.0      0.0   \n","404           MA  29.0     0.0    0.0  0.0    0.0  0.0  0.0    0.0      0.0   \n","551           MA  29.0     0.0    0.0  0.0    1.0  0.0  0.0    0.0      0.0   \n","609           MA  29.0     0.0    0.0  0.0    0.0  0.0  0.0    0.0      0.0   \n","641           MA  29.0     0.0    0.0  0.0    0.0  0.0  0.0    0.0      0.0   \n","730           MA  29.0     0.0    0.0  0.0    1.0  0.0  0.0    0.0      0.0   \n","\n","     scikit  tensor  hadoop  tableau   bi  flink  mongo  google_an  \\\n","370     0.0     0.0     0.0      0.0  0.0    0.0    0.0        0.0   \n","404     0.0     0.0     0.0      0.0  0.0    0.0    0.0        0.0   \n","551     0.0     0.0     0.0      0.0  0.0    0.0    0.0        0.0   \n","609     0.0     0.0     0.0      0.0  0.0    0.0    0.0        0.0   \n","641     0.0     0.0     0.0      0.0  0.0    0.0    0.0        0.0   \n","730     0.0     0.0     0.0      0.0  0.0    0.0    0.0        0.0   \n","\n","       job_title_sim seniority_by_title Degree  compare  \n","370  other scientist                 na      P    False  \n","404  other scientist                 sr      P    False  \n","551  other scientist                 na      P    False  \n","609  other scientist                 sr      P    False  \n","641  other scientist                 sr      P    False  \n","730  other scientist                 na      P    False  "],"text/html":["\n","  <div id=\"df-96b55138-9928-4cb5-a969-1216b694c445\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Job Title</th>\n","      <th>Salary Estimate</th>\n","      <th>Job Description</th>\n","      <th>Rating</th>\n","      <th>Company Name</th>\n","      <th>Location</th>\n","      <th>Headquarters</th>\n","      <th>Size</th>\n","      <th>Founded</th>\n","      <th>Type of ownership</th>\n","      <th>Industry</th>\n","      <th>Sector</th>\n","      <th>Revenue</th>\n","      <th>Competitors</th>\n","      <th>Hourly</th>\n","      <th>Employer provided</th>\n","      <th>Lower Salary</th>\n","      <th>Upper Salary</th>\n","      <th>Avg Salary(K)</th>\n","      <th>company_txt</th>\n","      <th>Job Location</th>\n","      <th>Age</th>\n","      <th>Python</th>\n","      <th>spark</th>\n","      <th>aws</th>\n","      <th>excel</th>\n","      <th>sql</th>\n","      <th>sas</th>\n","      <th>keras</th>\n","      <th>pytorch</th>\n","      <th>scikit</th>\n","      <th>tensor</th>\n","      <th>hadoop</th>\n","      <th>tableau</th>\n","      <th>bi</th>\n","      <th>flink</th>\n","      <th>mongo</th>\n","      <th>google_an</th>\n","      <th>job_title_sim</th>\n","      <th>seniority_by_title</th>\n","      <th>Degree</th>\n","      <th>compare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>370</th>\n","      <td>Research Scientist, Immunology - Cancer Biology</td>\n","      <td>Employer Provided Salary:$100K-$140K</td>\n","      <td>Research Scientist, Immunology - Cancer Biolog...</td>\n","      <td>3.688372</td>\n","      <td>Kronos Bio</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>1992.0</td>\n","      <td>Company - Private</td>\n","      <td>Biotech &amp; Pharmaceuticals</td>\n","      <td>Information Technology</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>Novartis, Baxter, Pfizer</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>100.0</td>\n","      <td>140.0</td>\n","      <td>120.0</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>29.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>other scientist</td>\n","      <td>na</td>\n","      <td>P</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>404</th>\n","      <td>Senior Scientist, Cell Pharmacology/Assay Deve...</td>\n","      <td>Employer Provided Salary:$110K-$130K</td>\n","      <td>Senior Scientist, Cell Pharmacology/Assay Deve...</td>\n","      <td>3.688372</td>\n","      <td>Kronos Bio</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>1992.0</td>\n","      <td>Company - Private</td>\n","      <td>Biotech &amp; Pharmaceuticals</td>\n","      <td>Information Technology</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>Novartis, Baxter, Pfizer</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>110.0</td>\n","      <td>130.0</td>\n","      <td>120.0</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>29.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>other scientist</td>\n","      <td>sr</td>\n","      <td>P</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>551</th>\n","      <td>Research Scientist, Immunology - Cancer Biology</td>\n","      <td>Employer Provided Salary:$100K-$140K</td>\n","      <td>Research Scientist, Immunology - Cancer Biolog...</td>\n","      <td>3.688372</td>\n","      <td>Kronos Bio</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>1992.0</td>\n","      <td>Company - Private</td>\n","      <td>Biotech &amp; Pharmaceuticals</td>\n","      <td>Information Technology</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>Novartis, Baxter, Pfizer</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>100.0</td>\n","      <td>140.0</td>\n","      <td>120.0</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>29.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>other scientist</td>\n","      <td>na</td>\n","      <td>P</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>609</th>\n","      <td>Senior Scientist, Cell Pharmacology/Assay Deve...</td>\n","      <td>Employer Provided Salary:$110K-$130K</td>\n","      <td>Senior Scientist, Cell Pharmacology/Assay Deve...</td>\n","      <td>3.688372</td>\n","      <td>Kronos Bio</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>1992.0</td>\n","      <td>Company - Private</td>\n","      <td>Biotech &amp; Pharmaceuticals</td>\n","      <td>Information Technology</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>Novartis, Baxter, Pfizer</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>110.0</td>\n","      <td>130.0</td>\n","      <td>120.0</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>29.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>other scientist</td>\n","      <td>sr</td>\n","      <td>P</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>641</th>\n","      <td>Principal Research Scientist/Team Lead, Medici...</td>\n","      <td>Employer Provided Salary:$120K-$145K</td>\n","      <td>Principal Research Scientist/Team Lead, Medici...</td>\n","      <td>3.688372</td>\n","      <td>Kronos Bio</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>1992.0</td>\n","      <td>Company - Private</td>\n","      <td>Biotech &amp; Pharmaceuticals</td>\n","      <td>Information Technology</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>Novartis, Baxter, Pfizer</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>120.0</td>\n","      <td>145.0</td>\n","      <td>132.5</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>29.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>other scientist</td>\n","      <td>sr</td>\n","      <td>P</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>730</th>\n","      <td>Research Scientist, Immunology - Cancer Biology</td>\n","      <td>Employer Provided Salary:$100K-$140K</td>\n","      <td>Research Scientist, Immunology - Cancer Biolog...</td>\n","      <td>3.688372</td>\n","      <td>Kronos Bio</td>\n","      <td>Cambridge, MA</td>\n","      <td>San Mateo, CA</td>\n","      <td>unknown</td>\n","      <td>1992.0</td>\n","      <td>Company - Private</td>\n","      <td>Biotech &amp; Pharmaceuticals</td>\n","      <td>Information Technology</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>Novartis, Baxter, Pfizer</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>100.0</td>\n","      <td>140.0</td>\n","      <td>120.0</td>\n","      <td>Kronos Bi</td>\n","      <td>MA</td>\n","      <td>29.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>other scientist</td>\n","      <td>na</td>\n","      <td>P</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-96b55138-9928-4cb5-a969-1216b694c445')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-96b55138-9928-4cb5-a969-1216b694c445 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-96b55138-9928-4cb5-a969-1216b694c445');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":41}],"source":["salary.loc[[370,404,551,609,641,730]] # checking company name changed or not for given index values"]},{"cell_type":"code","execution_count":null,"id":"f5f7b5b5","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:31.318667Z","iopub.status.busy":"2022-02-25T05:56:31.317967Z","iopub.status.idle":"2022-02-25T05:56:31.345723Z","shell.execute_reply":"2022-02-25T05:56:31.346319Z","shell.execute_reply.started":"2022-02-23T19:50:56.650891Z"},"papermill":{"duration":0.267797,"end_time":"2022-02-25T05:56:31.346530","exception":false,"start_time":"2022-02-25T05:56:31.078733","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"f5f7b5b5","executionInfo":{"status":"ok","timestamp":1647309323871,"user_tz":-330,"elapsed":162,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"68ac0a2c-7ecd-4bd8-e943-3c7b5a4aaa02"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     index                                          Job Title  \\\n","176    208  Principal Data Scientist with over 10 years ex...   \n","266    331  Principal Data Scientist with over 10 years ex...   \n","\n","                          Salary Estimate  \\\n","176  Employer Provided Salary:$200K-$250K   \n","266  Employer Provided Salary:$200K-$250K   \n","\n","                                       Job Description  Rating  \\\n","176  Position Title: Principal Data Scientist\\nLoca...    -1.0   \n","266  Position Title: Principal Data Scientist\\nLoca...    -1.0   \n","\n","          Company Name           Location Headquarters       Size  Founded  \\\n","176  CA-One Tech Cloud  San Francisco, CA  Fremont, CA  51 - 200      2017   \n","266  CA-One Tech Cloud  San Francisco, CA  Fremont, CA  51 - 200      2017   \n","\n","     Type of ownership     Industry                  Sector  \\\n","176  Company - Private  IT Services  Information Technology   \n","266  Company - Private  IT Services  Information Technology   \n","\n","                     Revenue Competitors  Hourly  Employer provided  \\\n","176  $5 to $10 million (USD)          -1       0                  1   \n","266  $5 to $10 million (USD)          -1       0                  1   \n","\n","     Lower Salary  Upper Salary  Avg Salary(K)       company_txt Job Location  \\\n","176           200           250          225.0  CA-One Tech Clou           CA   \n","266           200           250          225.0  CA-One Tech Clou           CA   \n","\n","     Age  Python  spark  aws  excel  sql  sas  keras  pytorch  scikit  tensor  \\\n","176    4       1      0    1      1    0    0      0        0       0       0   \n","266    4       1      0    1      1    0    0      0        0       0       0   \n","\n","     hadoop  tableau  bi  flink  mongo  google_an   job_title_sim  \\\n","176       0        1   0      0      0          0  data scientist   \n","266       0        1   0      0      0          0  data scientist   \n","\n","    seniority_by_title Degree  \n","176                 sr     na  \n","266                 sr     na  "],"text/html":["\n","  <div id=\"df-c760ebd4-b886-434e-8fac-b9d451f5e045\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>Job Title</th>\n","      <th>Salary Estimate</th>\n","      <th>Job Description</th>\n","      <th>Rating</th>\n","      <th>Company Name</th>\n","      <th>Location</th>\n","      <th>Headquarters</th>\n","      <th>Size</th>\n","      <th>Founded</th>\n","      <th>Type of ownership</th>\n","      <th>Industry</th>\n","      <th>Sector</th>\n","      <th>Revenue</th>\n","      <th>Competitors</th>\n","      <th>Hourly</th>\n","      <th>Employer provided</th>\n","      <th>Lower Salary</th>\n","      <th>Upper Salary</th>\n","      <th>Avg Salary(K)</th>\n","      <th>company_txt</th>\n","      <th>Job Location</th>\n","      <th>Age</th>\n","      <th>Python</th>\n","      <th>spark</th>\n","      <th>aws</th>\n","      <th>excel</th>\n","      <th>sql</th>\n","      <th>sas</th>\n","      <th>keras</th>\n","      <th>pytorch</th>\n","      <th>scikit</th>\n","      <th>tensor</th>\n","      <th>hadoop</th>\n","      <th>tableau</th>\n","      <th>bi</th>\n","      <th>flink</th>\n","      <th>mongo</th>\n","      <th>google_an</th>\n","      <th>job_title_sim</th>\n","      <th>seniority_by_title</th>\n","      <th>Degree</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>176</th>\n","      <td>208</td>\n","      <td>Principal Data Scientist with over 10 years ex...</td>\n","      <td>Employer Provided Salary:$200K-$250K</td>\n","      <td>Position Title: Principal Data Scientist\\nLoca...</td>\n","      <td>-1.0</td>\n","      <td>CA-One Tech Cloud</td>\n","      <td>San Francisco, CA</td>\n","      <td>Fremont, CA</td>\n","      <td>51 - 200</td>\n","      <td>2017</td>\n","      <td>Company - Private</td>\n","      <td>IT Services</td>\n","      <td>Information Technology</td>\n","      <td>$5 to $10 million (USD)</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>200</td>\n","      <td>250</td>\n","      <td>225.0</td>\n","      <td>CA-One Tech Clou</td>\n","      <td>CA</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>data scientist</td>\n","      <td>sr</td>\n","      <td>na</td>\n","    </tr>\n","    <tr>\n","      <th>266</th>\n","      <td>331</td>\n","      <td>Principal Data Scientist with over 10 years ex...</td>\n","      <td>Employer Provided Salary:$200K-$250K</td>\n","      <td>Position Title: Principal Data Scientist\\nLoca...</td>\n","      <td>-1.0</td>\n","      <td>CA-One Tech Cloud</td>\n","      <td>San Francisco, CA</td>\n","      <td>Fremont, CA</td>\n","      <td>51 - 200</td>\n","      <td>2017</td>\n","      <td>Company - Private</td>\n","      <td>IT Services</td>\n","      <td>Information Technology</td>\n","      <td>$5 to $10 million (USD)</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>200</td>\n","      <td>250</td>\n","      <td>225.0</td>\n","      <td>CA-One Tech Clou</td>\n","      <td>CA</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>data scientist</td>\n","      <td>sr</td>\n","      <td>na</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c760ebd4-b886-434e-8fac-b9d451f5e045')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c760ebd4-b886-434e-8fac-b9d451f5e045 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c760ebd4-b886-434e-8fac-b9d451f5e045');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":42}],"source":["df.loc[[176,266]]"]},{"cell_type":"code","execution_count":null,"id":"feab0b44","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:31.825178Z","iopub.status.busy":"2022-02-25T05:56:31.824421Z","iopub.status.idle":"2022-02-25T05:56:31.829175Z","shell.execute_reply":"2022-02-25T05:56:31.829688Z","shell.execute_reply.started":"2022-02-23T19:50:56.681322Z"},"papermill":{"duration":0.244357,"end_time":"2022-02-25T05:56:31.829892","exception":false,"start_time":"2022-02-25T05:56:31.585535","status":"completed"},"tags":[],"id":"feab0b44"},"outputs":[],"source":["salary.loc[[176,266], 'Company Name'] = \"CA-One Tech Cloud\" #As name gets reduced so we will change name of above index"]},{"cell_type":"code","execution_count":null,"id":"bb85b68f","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:32.315169Z","iopub.status.busy":"2022-02-25T05:56:32.314395Z","iopub.status.idle":"2022-02-25T05:56:32.342533Z","shell.execute_reply":"2022-02-25T05:56:32.343061Z","shell.execute_reply.started":"2022-02-23T19:50:56.691873Z"},"papermill":{"duration":0.273099,"end_time":"2022-02-25T05:56:32.343232","exception":false,"start_time":"2022-02-25T05:56:32.070133","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"bb85b68f","executionInfo":{"status":"ok","timestamp":1647309323877,"user_tz":-330,"elapsed":159,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"b64276df-33e3-4d54-df69-c35773dd9999"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     index             Job Title                     Salary Estimate  \\\n","300    377  Data Operations Lead  Employer Provided Salary:$85K-$90K   \n","456    583        Data Scientist         $81K-$140K (Glassdoor est.)   \n","\n","                                       Job Description  Rating Company Name  \\\n","300  Data Operations Lead\\nLocation: Flexible thoug...    -1.0         Muso   \n","456  As a Data Scientist, you will play a critical ...    -1.0         ALIN   \n","\n","              Location       Headquarters        Size  Founded  \\\n","300  San Francisco, CA  San Francisco, CA  201 - 500        -1   \n","456       New York, NY       Noida, India     unknown       -1   \n","\n","          Type of ownership Industry Sector                   Revenue  \\\n","300  Nonprofit Organization       -1     -1  Unknown / Non-Applicable   \n","456       Company - Private       -1     -1  Unknown / Non-Applicable   \n","\n","    Competitors  Hourly  Employer provided  Lower Salary  Upper Salary  \\\n","300          -1       0                  1            85            90   \n","456          -1       0                  0            81           140   \n","\n","     Avg Salary(K) company_txt Job Location  Age  Python  spark  aws  excel  \\\n","300           87.5         Mus           CA   -1       1      0    0      1   \n","456          110.5         ALI           NY   -1       1      0    0      0   \n","\n","     sql  sas  keras  pytorch  scikit  tensor  hadoop  tableau  bi  flink  \\\n","300    1    0      0        0       0       0       0        1   0      0   \n","456    1    0      0        0       0       1       0        0   0      0   \n","\n","     mongo  google_an   job_title_sim seniority_by_title Degree  \n","300      0          0              na                 sr      M  \n","456      0          0  data scientist                 na      M  "],"text/html":["\n","  <div id=\"df-7faa869e-6eb8-46c7-a0e0-491f29a042d8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>Job Title</th>\n","      <th>Salary Estimate</th>\n","      <th>Job Description</th>\n","      <th>Rating</th>\n","      <th>Company Name</th>\n","      <th>Location</th>\n","      <th>Headquarters</th>\n","      <th>Size</th>\n","      <th>Founded</th>\n","      <th>Type of ownership</th>\n","      <th>Industry</th>\n","      <th>Sector</th>\n","      <th>Revenue</th>\n","      <th>Competitors</th>\n","      <th>Hourly</th>\n","      <th>Employer provided</th>\n","      <th>Lower Salary</th>\n","      <th>Upper Salary</th>\n","      <th>Avg Salary(K)</th>\n","      <th>company_txt</th>\n","      <th>Job Location</th>\n","      <th>Age</th>\n","      <th>Python</th>\n","      <th>spark</th>\n","      <th>aws</th>\n","      <th>excel</th>\n","      <th>sql</th>\n","      <th>sas</th>\n","      <th>keras</th>\n","      <th>pytorch</th>\n","      <th>scikit</th>\n","      <th>tensor</th>\n","      <th>hadoop</th>\n","      <th>tableau</th>\n","      <th>bi</th>\n","      <th>flink</th>\n","      <th>mongo</th>\n","      <th>google_an</th>\n","      <th>job_title_sim</th>\n","      <th>seniority_by_title</th>\n","      <th>Degree</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>300</th>\n","      <td>377</td>\n","      <td>Data Operations Lead</td>\n","      <td>Employer Provided Salary:$85K-$90K</td>\n","      <td>Data Operations Lead\\nLocation: Flexible thoug...</td>\n","      <td>-1.0</td>\n","      <td>Muso</td>\n","      <td>San Francisco, CA</td>\n","      <td>San Francisco, CA</td>\n","      <td>201 - 500</td>\n","      <td>-1</td>\n","      <td>Nonprofit Organization</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>85</td>\n","      <td>90</td>\n","      <td>87.5</td>\n","      <td>Mus</td>\n","      <td>CA</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>na</td>\n","      <td>sr</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>456</th>\n","      <td>583</td>\n","      <td>Data Scientist</td>\n","      <td>$81K-$140K (Glassdoor est.)</td>\n","      <td>As a Data Scientist, you will play a critical ...</td>\n","      <td>-1.0</td>\n","      <td>ALIN</td>\n","      <td>New York, NY</td>\n","      <td>Noida, India</td>\n","      <td>unknown</td>\n","      <td>-1</td>\n","      <td>Company - Private</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>81</td>\n","      <td>140</td>\n","      <td>110.5</td>\n","      <td>ALI</td>\n","      <td>NY</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>data scientist</td>\n","      <td>na</td>\n","      <td>M</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7faa869e-6eb8-46c7-a0e0-491f29a042d8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7faa869e-6eb8-46c7-a0e0-491f29a042d8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7faa869e-6eb8-46c7-a0e0-491f29a042d8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":44}],"source":["df.loc[[300,456]]"]},{"cell_type":"markdown","id":"4dae68a5","metadata":{"papermill":{"duration":0.240292,"end_time":"2022-02-25T05:56:32.829926","exception":false,"start_time":"2022-02-25T05:56:32.589634","status":"completed"},"tags":[],"id":"4dae68a5"},"source":["#For \"300\" and \"456\" index there is no name so we change original company name for 300 and 456"]},{"cell_type":"code","execution_count":null,"id":"f92ff392","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:33.317140Z","iopub.status.busy":"2022-02-25T05:56:33.316140Z","iopub.status.idle":"2022-02-25T05:56:33.321420Z","shell.execute_reply":"2022-02-25T05:56:33.321946Z","shell.execute_reply.started":"2022-02-23T19:50:56.727628Z"},"papermill":{"duration":0.249908,"end_time":"2022-02-25T05:56:33.322136","exception":false,"start_time":"2022-02-25T05:56:33.072228","status":"completed"},"tags":[],"id":"f92ff392"},"outputs":[],"source":["salary.loc[[300], 'Company Name'] = \"Muso\" "]},{"cell_type":"code","execution_count":null,"id":"0d6bef18","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:33.839942Z","iopub.status.busy":"2022-02-25T05:56:33.839228Z","iopub.status.idle":"2022-02-25T05:56:33.841241Z","shell.execute_reply":"2022-02-25T05:56:33.841836Z","shell.execute_reply.started":"2022-02-23T19:50:56.734728Z"},"papermill":{"duration":0.250398,"end_time":"2022-02-25T05:56:33.842012","exception":false,"start_time":"2022-02-25T05:56:33.591614","status":"completed"},"tags":[],"id":"0d6bef18"},"outputs":[],"source":["salary.loc[[456], 'Company Name'] = \"ALIN\" "]},{"cell_type":"markdown","id":"40af2ae3","metadata":{"papermill":{"duration":0.240351,"end_time":"2022-02-25T05:56:35.775477","exception":false,"start_time":"2022-02-25T05:56:35.535126","status":"completed"},"tags":[],"id":"40af2ae3"},"source":["# So we drop company text column"]},{"cell_type":"code","execution_count":null,"id":"46261be8","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:36.256993Z","iopub.status.busy":"2022-02-25T05:56:36.256249Z","iopub.status.idle":"2022-02-25T05:56:36.262345Z","shell.execute_reply":"2022-02-25T05:56:36.262942Z","shell.execute_reply.started":"2022-02-23T19:50:56.768725Z"},"papermill":{"duration":0.250007,"end_time":"2022-02-25T05:56:36.263120","exception":false,"start_time":"2022-02-25T05:56:36.013113","status":"completed"},"tags":[],"id":"46261be8"},"outputs":[],"source":["salary.drop(\"compare\",axis=1,inplace=True)\n","salary.drop(\"company_txt\",axis=1,inplace=True)"]},{"cell_type":"code","execution_count":null,"id":"ecf5bf87","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:36.748266Z","iopub.status.busy":"2022-02-25T05:56:36.747529Z","iopub.status.idle":"2022-02-25T05:56:36.752596Z","shell.execute_reply":"2022-02-25T05:56:36.753284Z","shell.execute_reply.started":"2022-02-23T19:50:56.777674Z"},"papermill":{"duration":0.251589,"end_time":"2022-02-25T05:56:36.753499","exception":false,"start_time":"2022-02-25T05:56:36.501910","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"ecf5bf87","executionInfo":{"status":"ok","timestamp":1647309323902,"user_tz":-330,"elapsed":166,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"696c6ff7-0ecb-407c-e1ca-ae3121a26550"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Job Title', 'Salary Estimate', 'Job Description', 'Rating',\n","       'Company Name', 'Location', 'Headquarters', 'Size', 'Founded',\n","       'Type of ownership', 'Industry', 'Sector', 'Revenue', 'Competitors',\n","       'Hourly', 'Employer provided', 'Lower Salary', 'Upper Salary',\n","       'Avg Salary(K)', 'Job Location', 'Age', 'Python', 'spark', 'aws',\n","       'excel', 'sql', 'sas', 'keras', 'pytorch', 'scikit', 'tensor', 'hadoop',\n","       'tableau', 'bi', 'flink', 'mongo', 'google_an', 'job_title_sim',\n","       'seniority_by_title', 'Degree'],\n","      dtype='object')"]},"metadata":{},"execution_count":50}],"source":["salary.columns"]},{"cell_type":"code","execution_count":null,"id":"63e39f17","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:37.253781Z","iopub.status.busy":"2022-02-25T05:56:37.249015Z","iopub.status.idle":"2022-02-25T05:56:37.257056Z","shell.execute_reply":"2022-02-25T05:56:37.256386Z","shell.execute_reply.started":"2022-02-23T19:50:56.788835Z"},"papermill":{"duration":0.262254,"end_time":"2022-02-25T05:56:37.257227","exception":false,"start_time":"2022-02-25T05:56:36.994973","status":"completed"},"tags":[],"id":"63e39f17"},"outputs":[],"source":["#Here we made new column derived for take out state abrevation\n","salary[\"Location_abb\"]=salary[\"Location\"].str[-2:]"]},{"cell_type":"code","execution_count":null,"id":"59917913","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:37.751067Z","iopub.status.busy":"2022-02-25T05:56:37.750301Z","iopub.status.idle":"2022-02-25T05:56:37.754769Z","shell.execute_reply":"2022-02-25T05:56:37.755491Z","shell.execute_reply.started":"2022-02-23T19:50:56.802246Z"},"papermill":{"duration":0.25321,"end_time":"2022-02-25T05:56:37.755713","exception":false,"start_time":"2022-02-25T05:56:37.502503","status":"completed"},"tags":[],"id":"59917913"},"outputs":[],"source":["#Here we checking derived abbrevation of state and present column named as job location\n","salary[\"Check\"]=salary[\"Job Location\"].equals(salary[\"Location_abb\"])"]},{"cell_type":"code","execution_count":null,"id":"1b4043cf","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:38.254392Z","iopub.status.busy":"2022-02-25T05:56:38.253656Z","iopub.status.idle":"2022-02-25T05:56:38.261087Z","shell.execute_reply":"2022-02-25T05:56:38.261613Z","shell.execute_reply.started":"2022-02-23T19:50:56.811823Z"},"papermill":{"duration":0.256102,"end_time":"2022-02-25T05:56:38.261802","exception":false,"start_time":"2022-02-25T05:56:38.005700","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"1b4043cf","executionInfo":{"status":"ok","timestamp":1647309323915,"user_tz":-330,"elapsed":166,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"9a73aa8b-1787-40d6-f5d5-1eb5560e7bc6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True    742\n","Name: Check, dtype: int64"]},"metadata":{},"execution_count":53}],"source":["salary[\"Check\"].value_counts() #Here we get to know that job location column is not useful so we are drop that column"]},{"cell_type":"code","execution_count":null,"id":"76b36c93","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:39.234306Z","iopub.status.busy":"2022-02-25T05:56:39.233594Z","iopub.status.idle":"2022-02-25T05:56:39.241369Z","shell.execute_reply":"2022-02-25T05:56:39.241904Z","shell.execute_reply.started":"2022-02-23T19:50:56.824467Z"},"papermill":{"duration":0.249055,"end_time":"2022-02-25T05:56:39.242077","exception":false,"start_time":"2022-02-25T05:56:38.993022","status":"completed"},"tags":[],"id":"76b36c93"},"outputs":[],"source":["salary.drop(\"Location\",axis=1,inplace=True) \n","salary.drop(\"Location_abb\",axis=1,inplace=True)\n","salary.drop(\"Check\",axis=1,inplace=True) # Here we drop location as well as location_abb and check column also"]},{"cell_type":"code","execution_count":null,"id":"62026b1c","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:39.720815Z","iopub.status.busy":"2022-02-25T05:56:39.720118Z","iopub.status.idle":"2022-02-25T05:56:39.724499Z","shell.execute_reply":"2022-02-25T05:56:39.725142Z","shell.execute_reply.started":"2022-02-23T19:50:56.83663Z"},"papermill":{"duration":0.245714,"end_time":"2022-02-25T05:56:39.725323","exception":false,"start_time":"2022-02-25T05:56:39.479609","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"62026b1c","executionInfo":{"status":"ok","timestamp":1647309324492,"user_tz":-330,"elapsed":60,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"1ba3016d-0426-4f4a-d691-751865ed9aa6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(742, 39)"]},"metadata":{},"execution_count":55}],"source":["salary.shape#checking column dropped or not"]},{"cell_type":"code","execution_count":null,"id":"c968087c","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:40.208040Z","iopub.status.busy":"2022-02-25T05:56:40.207300Z","iopub.status.idle":"2022-02-25T05:56:40.215482Z","shell.execute_reply":"2022-02-25T05:56:40.214675Z","shell.execute_reply.started":"2022-02-23T19:50:56.845235Z"},"papermill":{"duration":0.249714,"end_time":"2022-02-25T05:56:40.215640","exception":false,"start_time":"2022-02-25T05:56:39.965926","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"c968087c","executionInfo":{"status":"ok","timestamp":1647309324494,"user_tz":-330,"elapsed":57,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"22a1e8cf-d992-4a1b-a960-db8037a4554c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["na    519\n","sr    220\n","jr      3\n","Name: seniority_by_title, dtype: int64"]},"metadata":{},"execution_count":56}],"source":["salary.seniority_by_title.value_counts()"]},{"cell_type":"code","execution_count":null,"id":"00a09d04","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:40.711067Z","iopub.status.busy":"2022-02-25T05:56:40.710224Z","iopub.status.idle":"2022-02-25T05:56:40.713480Z","shell.execute_reply":"2022-02-25T05:56:40.713990Z","shell.execute_reply.started":"2022-02-23T19:50:56.857924Z"},"papermill":{"duration":0.255938,"end_time":"2022-02-25T05:56:40.714157","exception":false,"start_time":"2022-02-25T05:56:40.458219","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"00a09d04","executionInfo":{"status":"ok","timestamp":1647309324496,"user_tz":-330,"elapsed":54,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"2239d1ee-6e1f-46ff-af16-f6aa66af43a4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["na    383\n","M     252\n","P     107\n","Name: Degree, dtype: int64"]},"metadata":{},"execution_count":57}],"source":["salary.Degree.value_counts()"]},{"cell_type":"markdown","id":"59e4cd84","metadata":{"papermill":{"duration":0.243567,"end_time":"2022-02-25T05:56:45.319502","exception":false,"start_time":"2022-02-25T05:56:45.075935","status":"completed"},"tags":[],"id":"59e4cd84"},"source":["# As there are outliers in Age column and above we seen that Age column is right skewed so we have to handle outliers by IQR method"]},{"cell_type":"code","execution_count":null,"id":"89189edf","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:45.819424Z","iopub.status.busy":"2022-02-25T05:56:45.816281Z","iopub.status.idle":"2022-02-25T05:56:45.822166Z","shell.execute_reply":"2022-02-25T05:56:45.822657Z","shell.execute_reply.started":"2022-02-23T19:50:57.631564Z"},"papermill":{"duration":0.257379,"end_time":"2022-02-25T05:56:45.822855","exception":false,"start_time":"2022-02-25T05:56:45.565476","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"89189edf","executionInfo":{"status":"ok","timestamp":1647309325274,"user_tz":-330,"elapsed":136,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"55d2cad1-19a2-40e4-a7cb-51e27a45cf55"},"outputs":[{"output_type":"stream","name":"stdout","text":["46.0\n"]}],"source":["Q1=salary[\"Age\"].quantile(0.25)\n","Q3=salary[\"Age\"].quantile(0.75)\n","IQR=Q3-Q1\n","print(IQR)"]},{"cell_type":"code","execution_count":null,"id":"cec2ae95","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:46.324502Z","iopub.status.busy":"2022-02-25T05:56:46.323638Z","iopub.status.idle":"2022-02-25T05:56:46.326867Z","shell.execute_reply":"2022-02-25T05:56:46.327357Z","shell.execute_reply.started":"2022-02-23T19:50:57.640892Z"},"papermill":{"duration":0.256416,"end_time":"2022-02-25T05:56:46.327522","exception":false,"start_time":"2022-02-25T05:56:46.071106","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"cec2ae95","executionInfo":{"status":"ok","timestamp":1647309325276,"user_tz":-330,"elapsed":129,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"c9689885-444d-4053-846e-e91e2aa5d8a8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["14.0"]},"metadata":{},"execution_count":63}],"source":["Q1"]},{"cell_type":"code","execution_count":null,"id":"399b57e1","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:46.820645Z","iopub.status.busy":"2022-02-25T05:56:46.819452Z","iopub.status.idle":"2022-02-25T05:56:46.825184Z","shell.execute_reply":"2022-02-25T05:56:46.825645Z","shell.execute_reply.started":"2022-02-23T19:50:57.652054Z"},"papermill":{"duration":0.253537,"end_time":"2022-02-25T05:56:46.825840","exception":false,"start_time":"2022-02-25T05:56:46.572303","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"399b57e1","executionInfo":{"status":"ok","timestamp":1647309325284,"user_tz":-330,"elapsed":131,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"e9b22ac2-45e5-49bd-ad37-f48658916485"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["60.0"]},"metadata":{},"execution_count":64}],"source":["Q3"]},{"cell_type":"code","execution_count":null,"id":"d195865c","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:47.323893Z","iopub.status.busy":"2022-02-25T05:56:47.322827Z","iopub.status.idle":"2022-02-25T05:56:47.326577Z","shell.execute_reply":"2022-02-25T05:56:47.327098Z","shell.execute_reply.started":"2022-02-23T19:50:57.663015Z"},"papermill":{"duration":0.252429,"end_time":"2022-02-25T05:56:47.327282","exception":false,"start_time":"2022-02-25T05:56:47.074853","status":"completed"},"tags":[],"id":"d195865c"},"outputs":[],"source":["pd.options.display.max_columns=None"]},{"cell_type":"code","execution_count":null,"id":"93a96876","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:47.823008Z","iopub.status.busy":"2022-02-25T05:56:47.822165Z","iopub.status.idle":"2022-02-25T05:56:47.825158Z","shell.execute_reply":"2022-02-25T05:56:47.824581Z","shell.execute_reply.started":"2022-02-23T19:50:57.671513Z"},"papermill":{"duration":0.253005,"end_time":"2022-02-25T05:56:47.825315","exception":false,"start_time":"2022-02-25T05:56:47.572310","status":"completed"},"tags":[],"id":"93a96876"},"outputs":[],"source":["salary.loc[salary['Age'] < 14 , 'Age'] = random.randint(14,67)"]},{"cell_type":"code","execution_count":null,"id":"2c061345","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:48.320104Z","iopub.status.busy":"2022-02-25T05:56:48.319400Z","iopub.status.idle":"2022-02-25T05:56:48.324511Z","shell.execute_reply":"2022-02-25T05:56:48.325092Z","shell.execute_reply.started":"2022-02-23T19:50:57.683083Z"},"papermill":{"duration":0.253379,"end_time":"2022-02-25T05:56:48.325270","exception":false,"start_time":"2022-02-25T05:56:48.071891","status":"completed"},"tags":[],"id":"2c061345"},"outputs":[],"source":["salary.loc[salary['Age'] > 67 , 'Age'] = random.randint(14,67)"]},{"cell_type":"code","execution_count":null,"id":"dcee3a87","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:48.824822Z","iopub.status.busy":"2022-02-25T05:56:48.824148Z","iopub.status.idle":"2022-02-25T05:56:48.828568Z","shell.execute_reply":"2022-02-25T05:56:48.829093Z","shell.execute_reply.started":"2022-02-23T19:50:57.692562Z"},"papermill":{"duration":0.253225,"end_time":"2022-02-25T05:56:48.829264","exception":false,"start_time":"2022-02-25T05:56:48.576039","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"dcee3a87","executionInfo":{"status":"ok","timestamp":1647309325303,"user_tz":-330,"elapsed":124,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"04dc630d-9648-47a7-a388-200f3be418bc"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(742, 39)"]},"metadata":{},"execution_count":68}],"source":["salary.shape #Here we check that column dropped or not"]},{"cell_type":"code","execution_count":null,"id":"0bbc72c8","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:49.322368Z","iopub.status.busy":"2022-02-25T05:56:49.321561Z","iopub.status.idle":"2022-02-25T05:56:49.327177Z","shell.execute_reply":"2022-02-25T05:56:49.327713Z","shell.execute_reply.started":"2022-02-23T19:50:57.703844Z"},"papermill":{"duration":0.253309,"end_time":"2022-02-25T05:56:49.327923","exception":false,"start_time":"2022-02-25T05:56:49.074614","status":"completed"},"tags":[],"id":"0bbc72c8"},"outputs":[],"source":["correlation=salary.corr()"]},{"cell_type":"code","execution_count":null,"id":"2daf2790","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:49.817853Z","iopub.status.busy":"2022-02-25T05:56:49.817147Z","iopub.status.idle":"2022-02-25T05:56:52.637875Z","shell.execute_reply":"2022-02-25T05:56:52.638382Z","shell.execute_reply.started":"2022-02-23T19:50:57.714746Z"},"papermill":{"duration":3.067516,"end_time":"2022-02-25T05:56:52.638559","exception":false,"start_time":"2022-02-25T05:56:49.571043","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"2daf2790","executionInfo":{"status":"ok","timestamp":1647309329097,"user_tz":-330,"elapsed":3911,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"a8aa52e7-42dd-4bda-b26c-33ba318a69a0"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2520x1800 with 2 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAB6UAAAYTCAYAAAC7U+0LAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdd1gURwMG8HdRKWqsFBUUe0WNYsHeO9g79l4QYzSx5FNjiS1EBY3YG6ioiA17Q8WOGnsBLIgK2BtNZL8/9jg47uDu4I6zvL/n4Unc25mbmd2bnZ3ZmRVEUQQREREREREREREREREREZE+GBk6AURERERERERERERERERE9P3ioDQREREREREREREREREREekNB6WJiIiIiIiIiIiIiIiIiEhvOChNRERERERERERERERERER6w0FpIiIiIiIiIiIiIiIiIiLSGw5KExERERERERERERERERGR3nBQmoiIiIiIiIiIiIiIiIjoOyIIwlpBEKIEQbiZxueCIAgegiCECIJwXRCE6ik+6y8IQrDsr78u0sNBaSIiIiIiIiIiIiIiIiKi78t6AK3T+bwNgDKyv2EAPAFAEIQCAKYDqA2gFoDpgiDkz2xiOChNRERERERERERERERERPQdEUXxFIDX6ezSAcBGUXIeQD5BEAoDaAXgiCiKr0VRfAPgCNIf3NYIB6WJiIiIiIiIiIiIiIiIiH4s1gCepPh3uGxbWtszJXtmIyD66gmCaOgkGFREhKFT8FX4kNPK0EkwuJ8S3hg6CYbH3wOQJ4+hU2B48fGGToHBvchdwtBJMDiLqFuGToLhZeetAAFxxcsZOglfBZOXTw2dBIOLKZDp/oVvntnHF4ZOguGZmho6BYb3Or2JJD8IY2NDp8Dw3r83dAoMr3hxQ6fA8Iw4nwuxsYZOwdeB10d8is9h6CQYXK5cEAydBgLHe1IRgOGQlt1OslIUxZWGSo867IkiIiIiIiIiIiIiIiIiIvqGyAagMzMI/RRA0RT/tpFtewqgcartAZn4HgBcvpuIiIiIiIiIiIiIiIiI6EezB0A/QeIA4J0ois8BHALQUhCE/IIg5AfQUrYtUzhTmoiIiIiIiIiIiIiIiIjoOyIIwhZIM57NBUEIBzAdQA4AEEVxOYD9ANoCCAEQDWCg7LPXgiDMAnBJFtVMURQz/Z4bDkoTEREREREREREREREREX1HRFHspeZzEcDoND5bC2CtLtPD5buJiIiIiIiIiIiIiIiIiEhvOFOaiIiIiIiIiIiIiIiIiL5uRpxr+y3j0SMiIiIiIiIiIiIiIiIiIr3hoDQREREREREREREREREREekNB6WJiIiIiIiIiIiIiIiIiEhvOChNRERERERERERERERERER6k93QCSAiIiIiIiIiIiIiIiIiSpcR59p+y3j0iIiIiIiIiIiIiIiIiIhIbzgoTUREREREREREREREREREesNBaSIiIiIiIiIiIiIiIiIi0hsOShMRERERERERERERERERkd5wUJqIiIiIiIiIiIiIiIiIiPQmu6ETQERERERERERERERERESULiPOtf2W8egREREREREREREREREREZHecFCaiIiIiIiIiIiIiIiIiIj0hoPSpDeCIIiCIKw3dDqIiIiIiIiIiIiIiIiIyHD4TukfgCAIjQGcSLX5E4D7ALwALBFFMSED8eYD8AuAAFEUAzKZzO/LpElA9eqAvT1QsiTw6BFQooShU5WuxMREbPT1hc+ePXgaEYECefOiTZMmcB08GDnNzHQa/nNCAtZs2YLdhw7hyfPnyGVmhlo//4xfhg5FKVtbhX0v/vcfDhw/jqBr1/A0MhLGOXKgeNGi6NO5M9o1awZBEHRaDuo8evQAS5a44cqVS/j8+TPKl6+I4cPHoGbNOjqPIyjoAkaM6Kcyjvr1G2Px4hWZyosqiYmJ2Lh1K3x27cLT589RIF8+tGnWDK7Dhml+HmgRPiEhAZt37MDOffvwMCwM2bJlQzFra/To1Ak9O3WS7+fn74/Js2er/E7nrl0xbcKEjGdaQ4mJidjo7w+fQ4fwNCoKBfLkQZt69eDauzdympqqDb/C1xe3HjzArdBQhEdGwtrCAsdXrUo3zK4TJ+Bz6BDuP34MURRhbWmJNvXqYXSPHrrKllYSExOxcccO+Pj7S7/zfPnQpnFjuA4YoNH5sWLzZty6fx+3goMR/vw5rK2scHzLFpX7ngkKwqHTp3Hr/n3cf/AA8Z8/Y+PChaj988+6zpZWEhMTsXHXLvjs34+nkZFSXdewIVz79dPsPPDxwa2QENwKCUF4RASsLS1xfONGlfu6rV2LoBs38PjZM3yIjkbBvHlRvmRJDOrSBbWrVtV11tQKC3sAT083XL16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kAanR4uiuMyQCSMiIiIiIiIiIiIiIiIizXBQmr5aoih+ATDI0OkgIiIiIiIiIiIiIiIiAzPiW4m/ZTx6RERERERERERERERERESkNxyUJiIiIiIiIiIiIiIiIiIiveGgNBERERERERERERERERER6Q0HpYmIiIiIiIiIiIiIiIiISG+yGzoBRERERERERERERERERETpMuJc228Zjx4REREREREREREREREREekNB6WJiIiIiIiIiIiIiIiIiEhvOChNRERERERERERERERERER6w0FpIiIiIiIiIiIiIiIiIiLSm+yGTgARERERERERERERERERUbqMONf2W8ajR0REREREREREREREREREesNBaSIiIiIiIiIiIiIiIiIi0hsOShMRERERERERERERERERkd5wUJqIiIiIiIiIiIiIiIiIiPSGg9JERERERERERERERERERKQ32Q2dACIiIiIiIiIiIiIiIiKidBlxru23jEePiIiIiIiIiIiIiIiIiIj0hjOl6fsXEWHoFBhWoUKGTsFXIXeiaOgkGN5bQyfA8MTyFQydBIOLjTV0CgyPD1QCE4YZOgWGt2F2HkMngb4G5uaGToHBJSQYOgVfB5P4eEMnweCys3eAhQCwoQQAOXMaOgWGZ2xs6BQYHs8DIDra0CkwuC958hs6CQaXLeGjoZPwVYhJyGHoJBhcrvg3hk6C4eVinUCUWbzbICIiIiIiIiIiIiIiIiIiveGgNBERERERERERERERERER6Q3XpiIiIiIiIiIiIiIiIiKirxtfN/NN49EjIiIiIiIiIiIiIiIiIiK94aA0ERERERERERERERERERHpDQeliYiIiIiIiIiIiIiIiIhIbzgoTUREREREREREREREREREepPd0AkgIiIiIiIiIiIiIiIiIkqXEefafst49IiIiIiIiIiIiIiIiIiISG84KE1ERERERERERERERERERHrDQWkiIiIiIiIiIiIiIiIiItIbDkoTEREREREREREREREREZHecFCaiIiIiIiIiIiIiIiIiIj0JruhE0BERERERERERERERERElC4jzrX9lvHoERERERERERERERERERGR3nBQmoiIiIiIiIiIiIiIiIiI9IaD0kREREREREREREREREREpDcclCYiIiIiIiIiIiIiIiIiIr3JbugEEBERERERERERERER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v2bBggUcOqS2g6VLq+1gnz767WBcXBzr169ny5bNBAcHU7hwYTp27MSECRP0+qkajQZPT082bNjAnTuBREdHU6JECTp16sSgQYPJly9fwrY7duzA09MTP98bPH/1CksLC8oUL07vTp1w/K8FYncAACAASURBVPBDo+vVuLg41u/erZ4PISHq+fDBB0zo39+482HrVvV88PNLPB/WrDG47aT589nx558GP1s4aRIdP/jAqDRntjiNhvXnz7P5yhWCX76kcN68dKpalQktWpA3d+5U9w14+pTfTp7EJySE0DdviH37luIFCtCqQgWGNW6MbZLfTOtycDDLT5/GJySEFxER2ObLR5MyZRjVtCmlChXKqmym6n2vF99V++jldRQ3t83cvn2LZ8+ekitXbkqWtKNLF0ecnftibm6us/2BA3s5ceI4N254ExDgT2xsLPv2/UnJknaZkve03LsXwKpVc7h2Tc1XpUrVGTBgPPXqGXdsfH2v8uefu7l9+zoBATeJjAznq69+on377nrb3r7tzV9/eXLlyhkePboPQIkSpWnfvjudOztjZpYrU/OW3J076m948WLib/jpp+OxtzftmsGYOLy8jrJt22Zu3brF8+eJ5cDBwZFevfTLAaj9pK1bN7J7t24/qWfP3vTsmbn9pOTu3QtgzZrEclCxoloO6tY17tjcvKmWAz+/xHLwxReGy8GNG1fYtm0N/v43ePHiCQC2tiVp0aIj3boNwtIyf6bmDeLrP3d3Nu/eTfCjR2r99+GHTBg2zPh7KUbuHxMby+pNm9h14AD3Hj7E0sIC+7p1+XzECCqUKaOz7dHTp9m8axe3AgJ4+vw5uXPlwq54cRw7dKCvo6PBcvKPMWkS1K8PDRpA+fJw5w6UK5fdqUqXOI2G9devs9nXl+A3byicJw+dypVjQoMG5M1lWr0UERuLw7Zt3H/9mn7Vq/Nds2YGtzsaFMTa69fxfvKE6LdvKWZpSXM7uxS3zyp376r3QS5fTrz+HTnStHspxsZx8eJZPv3U8D215s1bM3/+cp0wjUbDgQOeuLltICgokJiYaIoWLUG7dp3o00e3z5wZ3ud+klZcXBzr3dzYvGuXWtcVKqTWdcOHG19XGrm/RqPB89AhNmzfTuC9e+o1UdGidGrThsHOzuSztMyqbAohjCCD0v9udYHvgaPAnWxNyb/crNmzcdm4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M79s3876+aEDMM386CN+9QoEJ86cyeF//uG2G1yFydlnnEFbr7IR4PtNm/hk6VIAVn/7LZ+tWsX1zZpR5kw3LGnXtm05JYZhjUNEcVMY+PzzTJwyhaYNG6bmd995h+qXXML4V19NPdc2bfjlt99Yv3Jllvafv2ABz7z4Io3q1eOc0qXJmycPa779llkffEDRU09l0qhRlC9bNuTYD/brx3sffkj9OnVoWLcuv/72GxMnT+aUU05h2vjxnFEy/RCV6WQwj2HIOQwdysQZM2harx4NatVyf+9p06herRrjhwxJTYMOHdzfe8GCLO0PcOdDD3HOWWdxfrlyiAhLVq1i/uLFNKxdm5effJJ8eUMHfntw4EDe+/hj6teqRcMrr+TX7duZOH06pxQpwrQRIzijRInM0yCKbQY+/TQT33qLpldfTYN69dj4009MePNNql96KeNffz01Da65hl9+/ZX1a9dmaf9v1q7l5ltuQVV58P77KRamt3eboMrHWnXrUqN6dapUrswZpUrxx549LF22jGXLl1PhwguZNHFiVAXOyf/ENpxxUtIWunRx97QuXVKfbRs2/MBLL4W+/7777nT693+Yu+/uTc+efbJ0jIYNa3HppTWoXLkKpUqdwZ49f7B8+VJWrFjGhRdWYNy4SRQu7O4DEyeO480336Bx4yaULl2GfPnysWXLZmbPnsnevX/Sv/+TtG2bvoK2QAHYsmULN93kYrrlFvceM2XKFH744Qdee20E9eqlxjR9+nQeeeRh7rmnN336pJ5XLMc4dOgQnTp1ZP369XTp0pXzzz+fRYsW8tFHH9GzZ0/uvTe0MeLAgQN5882JNG3alPr1G7Bx40YmTpzAZZdVZ/z48WGHYG3Rojm//PILixZ9lmGP+759+/Lhh/O48srw72QVK4a+kwWfa4cON5IvX+p735QpLo8zfPgI6tZNPdcZM6bzf//3ML169aZ37z5ZOgbAa6+5eXOTkw8watQIKleuQlPvmVGz5uXUrOmGPP/kk4/p27c3RYoU4cEH/52uQrpQocI0CdMoJtY8wvF8LQB8//06brvtZvLly0enTl057bTTmDdvLl99tZq77rqHXr36pjungn+Fr/iO1sAhQ5g4bRpN69enwZVXuufe1KlUv+gixg8blnq/vOEGV860eHGW9j9y5Agde/RI6VXdtIGbC/ijhQv5/Ouv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\n"},"metadata":{"needs_background":"light"}}],"source":["# set the plot size\n","plt.figure(figsize = (35,25))\n","# plot the heat map\n","# correlation: give the correlation matrix\n","# cmap: color code used for plotting\n","# annot_kws: sets the font size of the annotation\n","# annot: prints the correlation values in the chart\n","# vmax: gives a maximum range of values for the chart\n","# vmin: gives a minimum range of values for the chart\n","sns.heatmap(correlation,annot = True, vmax = 1.0, vmin = -1.0, cmap = 'bwr', annot_kws = {\"size\": 18})\n","# set the size of x and y axes labels using 'fontsize'\n","plt.xticks(fontsize = 18)\n","plt.yticks(fontsize = 18)\n","plt.show()"]},{"cell_type":"markdown","id":"70d9c8f9","metadata":{"papermill":{"duration":0.262935,"end_time":"2022-02-25T05:56:53.163962","exception":false,"start_time":"2022-02-25T05:56:52.901027","status":"completed"},"tags":[],"id":"70d9c8f9"},"source":["In above correlation heat map we get know that only some columns are morely correlated like upper salary,lower salary and avg salary but at time of model building we will not consider lower salary and upper salary"]},{"cell_type":"code","execution_count":null,"id":"7aedc577","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:53.687708Z","iopub.status.busy":"2022-02-25T05:56:53.687083Z","iopub.status.idle":"2022-02-25T05:56:53.692091Z","shell.execute_reply":"2022-02-25T05:56:53.692609Z","shell.execute_reply.started":"2022-02-23T19:51:00.520499Z"},"papermill":{"duration":0.270015,"end_time":"2022-02-25T05:56:53.692796","exception":false,"start_time":"2022-02-25T05:56:53.422781","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"7aedc577","executionInfo":{"status":"ok","timestamp":1647309329107,"user_tz":-330,"elapsed":86,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"9055819a-0e6e-40b7-c8fa-04c260ec0a60"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["254.0"]},"metadata":{},"execution_count":71}],"source":["salary[\"Avg Salary(K)\"].max()"]},{"cell_type":"code","execution_count":null,"id":"a4402c65","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:54.222705Z","iopub.status.busy":"2022-02-25T05:56:54.222024Z","iopub.status.idle":"2022-02-25T05:56:54.225903Z","shell.execute_reply":"2022-02-25T05:56:54.225343Z","shell.execute_reply.started":"2022-02-23T19:51:00.527621Z"},"papermill":{"duration":0.272126,"end_time":"2022-02-25T05:56:54.226054","exception":false,"start_time":"2022-02-25T05:56:53.953928","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"a4402c65","executionInfo":{"status":"ok","timestamp":1647309329111,"user_tz":-330,"elapsed":84,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"8f36b13d-3fa6-4985-a022-7b3881ca1341"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["354    IL\n","528    IL\n","708    IL\n","Name: Job Location, dtype: object"]},"metadata":{},"execution_count":72}],"source":["salary[salary[\"Avg Salary(K)\"]==254][\"Job Location\"]"]},{"cell_type":"markdown","id":"e9213832","metadata":{"papermill":{"duration":0.260658,"end_time":"2022-02-25T05:56:54.751909","exception":false,"start_time":"2022-02-25T05:56:54.491251","status":"completed"},"tags":[],"id":"e9213832"},"source":["# As above we get to know that highest salary available in Illinois state"]},{"cell_type":"code","execution_count":null,"id":"04c9f396","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:55.282210Z","iopub.status.busy":"2022-02-25T05:56:55.281450Z","iopub.status.idle":"2022-02-25T05:56:55.303788Z","shell.execute_reply":"2022-02-25T05:56:55.304290Z","shell.execute_reply.started":"2022-02-23T19:51:00.542077Z"},"papermill":{"duration":0.288205,"end_time":"2022-02-25T05:56:55.304455","exception":false,"start_time":"2022-02-25T05:56:55.016250","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"04c9f396","executionInfo":{"status":"ok","timestamp":1647309329115,"user_tz":-330,"elapsed":84,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"f7f61523-0f1e-4866-bdd7-7d7e3ce750e6"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n","  This is separate from the ipykernel package so we can avoid doing imports until\n"]},{"output_type":"execute_result","data":{"text/plain":["   Job Location  Lower Salary  Upper Salary\n","0            AL     40.875000     75.000000\n","1            AZ     65.777778    105.555556\n","2            CA     92.427632    154.598684\n","3            CO     64.272727    108.090909\n","4            CT     57.600000     84.600000\n","5            DC     88.636364    131.727273\n","6            DE     43.000000     70.000000\n","7            FL     60.375000     94.875000\n","8            GA     55.666667    105.666667\n","9            IA     56.400000    101.400000\n","10           ID     39.500000     73.000000\n","11           IL     88.350000    144.975000\n","12           IN     64.000000    116.600000\n","13           KS     61.000000    113.000000\n","14           KY     66.333333    127.666667\n","15           LA     40.250000     75.000000\n","16           MA     78.689320    136.300971\n","17           MD     68.314286    126.400000\n","18           MI     77.000000    123.500000\n","19           MN     60.000000    111.000000\n","20           MO     59.666667    109.777778\n","21           NC     69.047619    127.857143\n","22           NE     39.250000     69.250000\n","23           NJ     76.823529    132.294118\n","24           NM     55.000000     93.666667\n","25           NY     72.125000    125.180556\n","26           OH     62.857143    112.285714\n","27           OR     68.250000    116.000000\n","28           PA     67.090909    120.636364\n","29           RI     74.000000    126.000000\n","30           SC     39.000000     82.000000\n","31           TN     63.153846    115.384615\n","32           TX     68.357143    117.000000\n","33           UT     68.700000    119.600000\n","34           VA     70.024390    121.219512\n","35           WA     71.047619    115.333333\n","36           WI     54.400000     92.200000"],"text/html":["\n","  <div id=\"df-db8ebdfa-26e2-4b45-8a88-1140e0d27882\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Job Location</th>\n","      <th>Lower Salary</th>\n","      <th>Upper Salary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>AL</td>\n","      <td>40.875000</td>\n","      <td>75.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>AZ</td>\n","      <td>65.777778</td>\n","      <td>105.555556</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CA</td>\n","      <td>92.427632</td>\n","      <td>154.598684</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CO</td>\n","      <td>64.272727</td>\n","      <td>108.090909</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CT</td>\n","      <td>57.600000</td>\n","      <td>84.600000</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>DC</td>\n","      <td>88.636364</td>\n","      <td>131.727273</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>DE</td>\n","      <td>43.000000</td>\n","      <td>70.000000</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>FL</td>\n","      <td>60.375000</td>\n","      <td>94.875000</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>GA</td>\n","      <td>55.666667</td>\n","      <td>105.666667</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>IA</td>\n","      <td>56.400000</td>\n","      <td>101.400000</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>ID</td>\n","      <td>39.500000</td>\n","      <td>73.000000</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>IL</td>\n","      <td>88.350000</td>\n","      <td>144.975000</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>IN</td>\n","      <td>64.000000</td>\n","      <td>116.600000</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>KS</td>\n","      <td>61.000000</td>\n","      <td>113.000000</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>KY</td>\n","      <td>66.333333</td>\n","      <td>127.666667</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>LA</td>\n","      <td>40.250000</td>\n","      <td>75.000000</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>MA</td>\n","      <td>78.689320</td>\n","      <td>136.300971</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>MD</td>\n","      <td>68.314286</td>\n","      <td>126.400000</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>MI</td>\n","      <td>77.000000</td>\n","      <td>123.500000</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>MN</td>\n","      <td>60.000000</td>\n","      <td>111.000000</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>MO</td>\n","      <td>59.666667</td>\n","      <td>109.777778</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>NC</td>\n","      <td>69.047619</td>\n","      <td>127.857143</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>NE</td>\n","      <td>39.250000</td>\n","      <td>69.250000</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>NJ</td>\n","      <td>76.823529</td>\n","      <td>132.294118</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>NM</td>\n","      <td>55.000000</td>\n","      <td>93.666667</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>NY</td>\n","      <td>72.125000</td>\n","      <td>125.180556</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>OH</td>\n","      <td>62.857143</td>\n","      <td>112.285714</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>OR</td>\n","      <td>68.250000</td>\n","      <td>116.000000</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>PA</td>\n","      <td>67.090909</td>\n","      <td>120.636364</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>RI</td>\n","      <td>74.000000</td>\n","      <td>126.000000</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>SC</td>\n","      <td>39.000000</td>\n","      <td>82.000000</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>TN</td>\n","      <td>63.153846</td>\n","      <td>115.384615</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>TX</td>\n","      <td>68.357143</td>\n","      <td>117.000000</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>UT</td>\n","      <td>68.700000</td>\n","      <td>119.600000</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>VA</td>\n","      <td>70.024390</td>\n","      <td>121.219512</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>WA</td>\n","      <td>71.047619</td>\n","      <td>115.333333</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>WI</td>\n","      <td>54.400000</td>\n","      <td>92.200000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-db8ebdfa-26e2-4b45-8a88-1140e0d27882')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-db8ebdfa-26e2-4b45-8a88-1140e0d27882 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-db8ebdfa-26e2-4b45-8a88-1140e0d27882');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":73}],"source":["# Making a dataframe with only 3 columns: Job Location, Lower Salary and Upper Salary.\n","\n","A=salary.groupby(\"Job Location\")[\"Lower Salary\",\"Upper Salary\"].mean().reset_index()\n","A"]},{"cell_type":"code","execution_count":null,"id":"bdc15400","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:55.860903Z","iopub.status.busy":"2022-02-25T05:56:55.860023Z","iopub.status.idle":"2022-02-25T05:56:55.866831Z","shell.execute_reply":"2022-02-25T05:56:55.867339Z","shell.execute_reply.started":"2022-02-23T19:51:00.567692Z"},"papermill":{"duration":0.272475,"end_time":"2022-02-25T05:56:55.867514","exception":false,"start_time":"2022-02-25T05:56:55.595039","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"bdc15400","executionInfo":{"status":"ok","timestamp":1647309329118,"user_tz":-330,"elapsed":83,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"d9896fc6-fbce-45a1-df0b-9d2aed22891d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["CA    152\n","MA    103\n","NY     72\n","VA     41\n","IL     40\n","MD     35\n","PA     33\n","TX     28\n","NC     21\n","WA     21\n","NJ     17\n","FL     16\n","OH     14\n","TN     13\n","DC     11\n","CO     11\n","WI     10\n","UT     10\n","IN     10\n","AZ      9\n","MO      9\n","AL      8\n","GA      6\n","DE      6\n","KY      6\n","MI      6\n","CT      5\n","IA      5\n","LA      4\n","OR      4\n","NE      4\n","NM      3\n","KS      3\n","ID      2\n","MN      2\n","RI      1\n","SC      1\n","Name: Job Location, dtype: int64"]},"metadata":{},"execution_count":74}],"source":["salary[\"Job Location\"].value_counts()"]},{"cell_type":"code","execution_count":null,"id":"8f086c3e","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:56.403001Z","iopub.status.busy":"2022-02-25T05:56:56.402324Z","iopub.status.idle":"2022-02-25T05:56:56.972952Z","shell.execute_reply":"2022-02-25T05:56:56.973445Z","shell.execute_reply.started":"2022-02-23T19:51:00.575813Z"},"papermill":{"duration":0.837761,"end_time":"2022-02-25T05:56:56.973613","exception":false,"start_time":"2022-02-25T05:56:56.135852","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"8f086c3e","executionInfo":{"status":"ok","timestamp":1647309330631,"user_tz":-330,"elapsed":1593,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"fefae485-b566-4a18-92b0-67c476334397"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 3600x1440 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["plt.figure(figsize=(50,20))\n","sns.barplot(x=salary[\"Job Location\"].value_counts().index[0:10], y = salary[\"Job Location\"].value_counts()[0:10],)\n","plt.title('\\n States with Most Number of Jobs \\n', size=50, color='black')\n","plt.xticks(fontsize=30)\n","plt.yticks(fontsize=30)\n","plt.xlabel('\\n States \\n', fontsize=40, color='black')\n","plt.ylabel('\\n Count \\n', fontsize=40, color='black')\n","plt.show()"]},{"cell_type":"markdown","id":"5fb3fca3","metadata":{"papermill":{"duration":0.266716,"end_time":"2022-02-25T05:56:57.559170","exception":false,"start_time":"2022-02-25T05:56:57.292454","status":"completed"},"tags":[],"id":"5fb3fca3"},"source":["# As per above plot we get to know that maximum jobs available in California state."]},{"cell_type":"markdown","id":"61c4aad6","metadata":{"papermill":{"duration":0.267783,"end_time":"2022-02-25T05:56:58.093503","exception":false,"start_time":"2022-02-25T05:56:57.825720","status":"completed"},"tags":[],"id":"61c4aad6"},"source":[""]},{"cell_type":"code","execution_count":null,"id":"e01bcbea","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:58.634322Z","iopub.status.busy":"2022-02-25T05:56:58.633611Z","iopub.status.idle":"2022-02-25T05:56:58.638254Z","shell.execute_reply":"2022-02-25T05:56:58.638847Z","shell.execute_reply.started":"2022-02-23T19:51:01.14308Z"},"papermill":{"duration":0.277404,"end_time":"2022-02-25T05:56:58.639031","exception":false,"start_time":"2022-02-25T05:56:58.361627","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"e01bcbea","executionInfo":{"status":"ok","timestamp":1647309330638,"user_tz":-330,"elapsed":163,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"c102cc52-43e0-4c62-b107-9fe1d75e3ab9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(742, 39)"]},"metadata":{},"execution_count":76}],"source":["salary.shape"]},{"cell_type":"code","execution_count":null,"id":"af476fed","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:56:59.179120Z","iopub.status.busy":"2022-02-25T05:56:59.178440Z","iopub.status.idle":"2022-02-25T05:56:59.183903Z","shell.execute_reply":"2022-02-25T05:56:59.184447Z","shell.execute_reply.started":"2022-02-23T19:51:01.149147Z"},"papermill":{"duration":0.28021,"end_time":"2022-02-25T05:56:59.184626","exception":false,"start_time":"2022-02-25T05:56:58.904416","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"af476fed","executionInfo":{"status":"ok","timestamp":1647309330646,"user_tz":-330,"elapsed":164,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"f96d7ebb-4626-42d1-d0bc-e7de17d91a9d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Job Title', 'Salary Estimate', 'Job Description', 'Rating',\n","       'Company Name', 'Headquarters', 'Size', 'Founded', 'Type of ownership',\n","       'Industry', 'Sector', 'Revenue', 'Competitors', 'Hourly',\n","       'Employer provided', 'Lower Salary', 'Upper Salary', 'Avg Salary(K)',\n","       'Job Location', 'Age', 'Python', 'spark', 'aws', 'excel', 'sql', 'sas',\n","       'keras', 'pytorch', 'scikit', 'tensor', 'hadoop', 'tableau', 'bi',\n","       'flink', 'mongo', 'google_an', 'job_title_sim', 'seniority_by_title',\n","       'Degree'],\n","      dtype='object')"]},"metadata":{},"execution_count":77}],"source":["salary.columns"]},{"cell_type":"markdown","id":"47ee639e","metadata":{"papermill":{"duration":0.312119,"end_time":"2022-02-25T05:56:59.768778","exception":false,"start_time":"2022-02-25T05:56:59.456659","status":"completed"},"tags":[],"id":"47ee639e"},"source":["# Average Salary in Different States."]},{"cell_type":"code","execution_count":null,"id":"9397f080","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:00.318803Z","iopub.status.busy":"2022-02-25T05:57:00.315713Z","iopub.status.idle":"2022-02-25T05:57:00.321560Z","shell.execute_reply":"2022-02-25T05:57:00.322104Z","shell.execute_reply.started":"2022-02-23T19:51:01.163091Z"},"papermill":{"duration":0.281511,"end_time":"2022-02-25T05:57:00.322272","exception":false,"start_time":"2022-02-25T05:57:00.040761","status":"completed"},"tags":[],"id":"9397f080"},"outputs":[],"source":["#Making a DF of Average Salary of top 10 states in which job postings was maximum.\n","\n","B = salary.groupby(\"Job Location\")[\"Avg Salary(K)\"].mean().sort_values(ascending=False)[0:10]\n","B = B.reset_index().rename(columns={\"Job Location\":\"Location\",\"Avg Salary(K)\":\"Average Salary\"})"]},{"cell_type":"code","execution_count":null,"id":"ecbdccee","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:00.859946Z","iopub.status.busy":"2022-02-25T05:57:00.859248Z","iopub.status.idle":"2022-02-25T05:57:00.868030Z","shell.execute_reply":"2022-02-25T05:57:00.868579Z","shell.execute_reply.started":"2022-02-23T19:51:01.177667Z"},"papermill":{"duration":0.279853,"end_time":"2022-02-25T05:57:00.868763","exception":false,"start_time":"2022-02-25T05:57:00.588910","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"ecbdccee","executionInfo":{"status":"ok","timestamp":1647309330653,"user_tz":-330,"elapsed":166,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"12664f1d-d48b-492d-b80c-e03c1a9d9194"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Location  Average Salary\n","0       CA      123.513158\n","1       IL      116.662500\n","2       DC      110.181818\n","3       MA      107.495146\n","4       NJ      104.558824\n","5       MI      100.250000\n","6       RI      100.000000\n","7       NY       98.652778\n","8       NC       98.452381\n","9       MD       97.357143"],"text/html":["\n","  <div id=\"df-fc75040f-41f3-4af1-b1b6-4385fbe65cd5\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Location</th>\n","      <th>Average Salary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CA</td>\n","      <td>123.513158</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>IL</td>\n","      <td>116.662500</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>DC</td>\n","      <td>110.181818</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>MA</td>\n","      <td>107.495146</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>NJ</td>\n","      <td>104.558824</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>MI</td>\n","      <td>100.250000</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>RI</td>\n","      <td>100.000000</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>NY</td>\n","      <td>98.652778</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>NC</td>\n","      <td>98.452381</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>MD</td>\n","      <td>97.357143</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fc75040f-41f3-4af1-b1b6-4385fbe65cd5')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-fc75040f-41f3-4af1-b1b6-4385fbe65cd5 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-fc75040f-41f3-4af1-b1b6-4385fbe65cd5');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":79}],"source":["B"]},{"cell_type":"code","execution_count":null,"id":"25ee8e35","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:01.411295Z","iopub.status.busy":"2022-02-25T05:57:01.410545Z","iopub.status.idle":"2022-02-25T05:57:01.415493Z","shell.execute_reply":"2022-02-25T05:57:01.416115Z","shell.execute_reply.started":"2022-02-23T19:51:01.190962Z"},"papermill":{"duration":0.275692,"end_time":"2022-02-25T05:57:01.416286","exception":false,"start_time":"2022-02-25T05:57:01.140594","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"25ee8e35","executionInfo":{"status":"ok","timestamp":1647309330656,"user_tz":-330,"elapsed":165,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"ab484835-3b58-444c-b195-becb4f9aecf1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["37"]},"metadata":{},"execution_count":80}],"source":["salary[\"Job Location\"].nunique()"]},{"cell_type":"code","execution_count":null,"id":"3c9fc060","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:01.959389Z","iopub.status.busy":"2022-02-25T05:57:01.958575Z","iopub.status.idle":"2022-02-25T05:57:02.206220Z","shell.execute_reply":"2022-02-25T05:57:02.205567Z","shell.execute_reply.started":"2022-02-23T19:51:01.199441Z"},"papermill":{"duration":0.518944,"end_time":"2022-02-25T05:57:02.206365","exception":false,"start_time":"2022-02-25T05:57:01.687421","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"3c9fc060","executionInfo":{"status":"ok","timestamp":1647309330660,"user_tz":-330,"elapsed":167,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"7b17088c-a6ee-46bb-edee-63256db05e91"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f508bd75110>"]},"metadata":{},"execution_count":81},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["# Plotting the average salary per annum for different states.\n","sns.barplot(y=\"Location\", x = \"Average Salary\",data=B)"]},{"cell_type":"markdown","id":"f464e5a5","metadata":{"papermill":{"duration":0.270151,"end_time":"2022-02-25T05:57:02.744639","exception":false,"start_time":"2022-02-25T05:57:02.474488","status":"completed"},"tags":[],"id":"f464e5a5"},"source":["# As per above graph we get to know that avg salary is more in California state"]},{"cell_type":"markdown","id":"e450fe95","metadata":{"papermill":{"duration":0.268032,"end_time":"2022-02-25T05:57:03.283182","exception":false,"start_time":"2022-02-25T05:57:03.015150","status":"completed"},"tags":[],"id":"e450fe95"},"source":["# Dropping job description "]},{"cell_type":"code","execution_count":null,"id":"5cb29e60","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:05.499434Z","iopub.status.busy":"2022-02-25T05:57:05.498815Z","iopub.status.idle":"2022-02-25T05:57:05.504673Z","shell.execute_reply":"2022-02-25T05:57:05.504049Z","shell.execute_reply.started":"2022-02-23T19:51:01.498834Z"},"papermill":{"duration":0.278584,"end_time":"2022-02-25T05:57:05.504841","exception":false,"start_time":"2022-02-25T05:57:05.226257","status":"completed"},"tags":[],"id":"5cb29e60"},"outputs":[],"source":["salary.drop(\"Job Description\",axis=1,inplace=True)"]},{"cell_type":"markdown","id":"c3dd6055","metadata":{"papermill":{"duration":0.269808,"end_time":"2022-02-25T05:57:06.043791","exception":false,"start_time":"2022-02-25T05:57:05.773983","status":"completed"},"tags":[],"id":"c3dd6055"},"source":["# What are the top skills for each job title?"]},{"cell_type":"code","execution_count":null,"id":"ca279c97","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:06.613653Z","iopub.status.busy":"2022-02-25T05:57:06.612999Z","iopub.status.idle":"2022-02-25T05:57:06.649472Z","shell.execute_reply":"2022-02-25T05:57:06.650035Z","shell.execute_reply.started":"2022-02-23T19:51:01.511525Z"},"papermill":{"duration":0.335127,"end_time":"2022-02-25T05:57:06.650200","exception":false,"start_time":"2022-02-25T05:57:06.315073","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"ca279c97","executionInfo":{"status":"ok","timestamp":1647309330670,"user_tz":-330,"elapsed":165,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"33038684-ffdd-4df8-abb4-4bd028859c6a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                Python  spark   aws  excel    sql   sas  \\\n","job_title_sim                                                             \n","Data scientist project manager     4.0    0.0   2.0   11.0   11.0   0.0   \n","analyst                           31.0    6.0  10.0   77.0   75.0  11.0   \n","data analitics                     5.0    0.0   0.0    4.0    4.0   2.0   \n","data engineer                     77.0   67.0  59.0   54.0   87.0   1.0   \n","data modeler                       2.0    1.0   2.0    4.0    4.0   0.0   \n","data scientist                   240.0   84.0  79.0  155.0  176.0  50.0   \n","director                           0.0    0.0   1.0    2.0    0.0   0.0   \n","machine learning engineer         18.0    4.0   6.0    7.0   13.0   0.0   \n","na                                 4.0    5.0   3.0    9.0    7.0   0.0   \n","other scientist                   11.0    0.0  14.0   65.0    3.0   2.0   \n","\n","                                keras  pytorch  scikit  tensor  hadoop  \\\n","job_title_sim                                                            \n","Data scientist project manager    0.0      0.0     0.0     0.0     0.0   \n","analyst                           0.0      0.0     0.0     0.0     3.0   \n","data analitics                    0.0      0.0     0.0     0.0     0.0   \n","data engineer                     0.0      0.0     0.0     2.0    50.0   \n","data modeler                      0.0      0.0     0.0     0.0     1.0   \n","data scientist                   29.0     33.0    47.0    60.0    60.0   \n","director                          0.0      0.0     0.0     0.0     0.0   \n","machine learning engineer         0.0      5.0     7.0     9.0     4.0   \n","na                                0.0      0.0     0.0     0.0     6.0   \n","other scientist                   0.0      1.0     0.0     1.0     0.0   \n","\n","                                tableau    bi  flink  mongo  google_an  \n","job_title_sim                                                           \n","Data scientist project manager     12.0   2.0    0.0    0.0        0.0  \n","analyst                            40.0  17.0    0.0    3.0       11.0  \n","data analitics                      4.0   2.0    0.0    0.0        0.0  \n","data engineer                      11.0   3.0    6.0   13.0        0.0  \n","data modeler                        0.0   2.0    0.0    0.0        0.0  \n","data scientist                     76.0  28.0    4.0   19.0        3.0  \n","director                            0.0   0.0    0.0    0.0        0.0  \n","machine learning engineer           0.0   0.0    0.0    0.0        0.0  \n","na                                  5.0   2.0    0.0    2.0        0.0  \n","other scientist                     0.0   0.0    0.0    0.0        0.0  "],"text/html":["\n","  <div id=\"df-8a410ce8-89df-48a6-94f7-fed2636f4172\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Python</th>\n","      <th>spark</th>\n","      <th>aws</th>\n","      <th>excel</th>\n","      <th>sql</th>\n","      <th>sas</th>\n","      <th>keras</th>\n","      <th>pytorch</th>\n","      <th>scikit</th>\n","      <th>tensor</th>\n","      <th>hadoop</th>\n","      <th>tableau</th>\n","      <th>bi</th>\n","      <th>flink</th>\n","      <th>mongo</th>\n","      <th>google_an</th>\n","    </tr>\n","    <tr>\n","      <th>job_title_sim</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Data scientist project manager</th>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>11.0</td>\n","      <td>11.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>12.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>analyst</th>\n","      <td>31.0</td>\n","      <td>6.0</td>\n","      <td>10.0</td>\n","      <td>77.0</td>\n","      <td>75.0</td>\n","      <td>11.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>40.0</td>\n","      <td>17.0</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>11.0</td>\n","    </tr>\n","    <tr>\n","      <th>data analitics</th>\n","      <td>5.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>data engineer</th>\n","      <td>77.0</td>\n","      <td>67.0</td>\n","      <td>59.0</td>\n","      <td>54.0</td>\n","      <td>87.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>50.0</td>\n","      <td>11.0</td>\n","      <td>3.0</td>\n","      <td>6.0</td>\n","      <td>13.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>data modeler</th>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>data scientist</th>\n","      <td>240.0</td>\n","      <td>84.0</td>\n","      <td>79.0</td>\n","      <td>155.0</td>\n","      <td>176.0</td>\n","      <td>50.0</td>\n","      <td>29.0</td>\n","      <td>33.0</td>\n","      <td>47.0</td>\n","      <td>60.0</td>\n","      <td>60.0</td>\n","      <td>76.0</td>\n","      <td>28.0</td>\n","      <td>4.0</td>\n","      <td>19.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>director</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>machine learning engineer</th>\n","      <td>18.0</td>\n","      <td>4.0</td>\n","      <td>6.0</td>\n","      <td>7.0</td>\n","      <td>13.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","      <td>7.0</td>\n","      <td>9.0</td>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>na</th>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","      <td>3.0</td>\n","      <td>9.0</td>\n","      <td>7.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>6.0</td>\n","      <td>5.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>other scientist</th>\n","      <td>11.0</td>\n","      <td>0.0</td>\n","      <td>14.0</td>\n","      <td>65.0</td>\n","      <td>3.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a410ce8-89df-48a6-94f7-fed2636f4172')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8a410ce8-89df-48a6-94f7-fed2636f4172 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8a410ce8-89df-48a6-94f7-fed2636f4172');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":85}],"source":["skill_labels = ['Python', 'spark', 'aws', 'excel', 'sql', 'sas', 'keras', 'pytorch',\n","                'scikit', 'tensor', 'hadoop', 'tableau', 'bi', 'flink', 'mongo', 'google_an']\n","skills_by_title = salary.groupby('job_title_sim')[skill_labels].sum()\n","skills_by_title "]},{"cell_type":"markdown","id":"dab64402","metadata":{"papermill":{"duration":0.278785,"end_time":"2022-02-25T05:57:07.199354","exception":false,"start_time":"2022-02-25T05:57:06.920569","status":"completed"},"tags":[],"id":"dab64402"},"source":["It looks like **Python** and **SQL** are the top skills in demand for Data Scientists, Data Engineers,analyst and Machine Learning Engineers. **Excel** is also a good skill to have for many of the jobs listed."]},{"cell_type":"markdown","id":"36e16629","metadata":{"papermill":{"duration":0.272782,"end_time":"2022-02-25T05:57:07.743007","exception":false,"start_time":"2022-02-25T05:57:07.470225","status":"completed"},"tags":[],"id":"36e16629"},"source":["### How does salary break down by company size?"]},{"cell_type":"code","execution_count":null,"id":"2a993e86","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:08.292603Z","iopub.status.busy":"2022-02-25T05:57:08.291903Z","iopub.status.idle":"2022-02-25T05:57:08.304919Z","shell.execute_reply":"2022-02-25T05:57:08.305554Z","shell.execute_reply.started":"2022-02-23T19:51:01.556458Z"},"papermill":{"duration":0.290026,"end_time":"2022-02-25T05:57:08.305727","exception":false,"start_time":"2022-02-25T05:57:08.015701","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"2a993e86","executionInfo":{"status":"ok","timestamp":1647309330673,"user_tz":-330,"elapsed":164,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"7f889054-a872-431a-82b3-0a0bd6c1c740"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["               Lower Salary  Upper Salary  Avg Salary(K)\n","Size                                                    \n","1 - 50            78.580645    131.548387     105.064516\n","10000+            83.661538    141.946154     112.803846\n","1001 - 5000       68.953333    120.426667      94.690000\n","201 - 500         72.136752    128.358974     100.247863\n","5001 - 10000      70.421053    124.552632      97.486842\n","501 - 1000        66.865672    116.141791      91.503731\n","51 - 200          84.468085    139.074468     111.771277\n","unknown          112.100000    142.000000     127.050000"],"text/html":["\n","  <div id=\"df-eddc7c8c-609b-4f6c-9ac0-8e85a410bd6a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Lower Salary</th>\n","      <th>Upper Salary</th>\n","      <th>Avg Salary(K)</th>\n","    </tr>\n","    <tr>\n","      <th>Size</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1 - 50</th>\n","      <td>78.580645</td>\n","      <td>131.548387</td>\n","      <td>105.064516</td>\n","    </tr>\n","    <tr>\n","      <th>10000+</th>\n","      <td>83.661538</td>\n","      <td>141.946154</td>\n","      <td>112.803846</td>\n","    </tr>\n","    <tr>\n","      <th>1001 - 5000</th>\n","      <td>68.953333</td>\n","      <td>120.426667</td>\n","      <td>94.690000</td>\n","    </tr>\n","    <tr>\n","      <th>201 - 500</th>\n","      <td>72.136752</td>\n","      <td>128.358974</td>\n","      <td>100.247863</td>\n","    </tr>\n","    <tr>\n","      <th>5001 - 10000</th>\n","      <td>70.421053</td>\n","      <td>124.552632</td>\n","      <td>97.486842</td>\n","    </tr>\n","    <tr>\n","      <th>501 - 1000</th>\n","      <td>66.865672</td>\n","      <td>116.141791</td>\n","      <td>91.503731</td>\n","    </tr>\n","    <tr>\n","      <th>51 - 200</th>\n","      <td>84.468085</td>\n","      <td>139.074468</td>\n","      <td>111.771277</td>\n","    </tr>\n","    <tr>\n","      <th>unknown</th>\n","      <td>112.100000</td>\n","      <td>142.000000</td>\n","      <td>127.050000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eddc7c8c-609b-4f6c-9ac0-8e85a410bd6a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-eddc7c8c-609b-4f6c-9ac0-8e85a410bd6a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-eddc7c8c-609b-4f6c-9ac0-8e85a410bd6a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":86}],"source":["salary_labels = ['Lower Salary', 'Upper Salary', 'Avg Salary(K)']\n","salary_by_co_size = salary.groupby('Size')[salary_labels].mean()\n","salary_by_co_size"]},{"cell_type":"markdown","id":"ac12b58b","metadata":{"papermill":{"duration":0.272998,"end_time":"2022-02-25T05:57:08.863230","exception":false,"start_time":"2022-02-25T05:57:08.590232","status":"completed"},"tags":[],"id":"ac12b58b"},"source":["As observed above largest companies can afford to pay the best."]},{"cell_type":"code","execution_count":null,"id":"b23491b1","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:09.414962Z","iopub.status.busy":"2022-02-25T05:57:09.414312Z","iopub.status.idle":"2022-02-25T05:57:09.806979Z","shell.execute_reply":"2022-02-25T05:57:09.807522Z","shell.execute_reply.started":"2022-02-23T19:51:01.572405Z"},"papermill":{"duration":0.666204,"end_time":"2022-02-25T05:57:09.807690","exception":false,"start_time":"2022-02-25T05:57:09.141486","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"b23491b1","executionInfo":{"status":"ok","timestamp":1647309330675,"user_tz":-330,"elapsed":164,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"930d63f8-d0ab-4d74-f183-975fde104926"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f508a48e2d0>"]},"metadata":{},"execution_count":87},{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x576 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["df1=salary.groupby('Sector')['Avg Salary(K)'].mean().sort_values(ascending=False)\n","plt.figure(figsize = (15,8))\n","df1.plot.bar()"]},{"cell_type":"markdown","id":"a29e6271","metadata":{"papermill":{"duration":0.274058,"end_time":"2022-02-25T05:57:10.359614","exception":false,"start_time":"2022-02-25T05:57:10.085556","status":"completed"},"tags":[],"id":"a29e6271"},"source":["## As observed above we get to know that highest avg salary available in media sector"]},{"cell_type":"code","execution_count":null,"id":"eb0af1bd","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:10.914804Z","iopub.status.busy":"2022-02-25T05:57:10.914140Z","iopub.status.idle":"2022-02-25T05:57:11.348699Z","shell.execute_reply":"2022-02-25T05:57:11.349272Z","shell.execute_reply.started":"2022-02-23T19:51:02.127752Z"},"papermill":{"duration":0.714796,"end_time":"2022-02-25T05:57:11.349458","exception":false,"start_time":"2022-02-25T05:57:10.634662","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"eb0af1bd","executionInfo":{"status":"ok","timestamp":1647309330681,"user_tz":-330,"elapsed":163,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"474ddeac-d11c-4953-fb84-d75ebb5a2d18"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f508a327790>"]},"metadata":{},"execution_count":88},{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x576 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["df2=salary.groupby('job_title_sim')['Avg Salary(K)'].mean().sort_values(ascending=False)\n","plt.figure(figsize = (15,8))\n","df2.plot.bar()"]},{"cell_type":"markdown","id":"0b797c96","metadata":{"papermill":{"duration":0.276211,"end_time":"2022-02-25T05:57:11.902838","exception":false,"start_time":"2022-02-25T05:57:11.626627","status":"completed"},"tags":[],"id":"0b797c96"},"source":["## As above we get to know that after director highest salary get to MLE and Data scientist and data engineer"]},{"cell_type":"code","execution_count":null,"id":"89556535","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:12.459425Z","iopub.status.busy":"2022-02-25T05:57:12.458672Z","iopub.status.idle":"2022-02-25T05:57:12.462089Z","shell.execute_reply":"2022-02-25T05:57:12.461573Z","shell.execute_reply.started":"2022-02-23T19:51:02.403494Z"},"papermill":{"duration":0.282768,"end_time":"2022-02-25T05:57:12.462231","exception":false,"start_time":"2022-02-25T05:57:12.179463","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"89556535","executionInfo":{"status":"ok","timestamp":1647309330685,"user_tz":-330,"elapsed":160,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"ff765e98-0596-44a6-b485-4906500c8d3b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(742, 38)"]},"metadata":{},"execution_count":89}],"source":["salary.shape"]},{"cell_type":"code","execution_count":null,"id":"e22fa3e0","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:13.018805Z","iopub.status.busy":"2022-02-25T05:57:13.018151Z","iopub.status.idle":"2022-02-25T05:57:13.020711Z","shell.execute_reply":"2022-02-25T05:57:13.020242Z","shell.execute_reply.started":"2022-02-23T19:51:02.410509Z"},"papermill":{"duration":0.284003,"end_time":"2022-02-25T05:57:13.020865","exception":false,"start_time":"2022-02-25T05:57:12.736862","status":"completed"},"tags":[],"id":"e22fa3e0"},"outputs":[],"source":["salary.drop(\"Headquarters\",axis=1,inplace=True)# I dropped Headquarter column as I think it not reauired for salary prediction"]},{"cell_type":"code","execution_count":null,"id":"2876aff7","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:13.579099Z","iopub.status.busy":"2022-02-25T05:57:13.578422Z","iopub.status.idle":"2022-02-25T05:57:13.581256Z","shell.execute_reply":"2022-02-25T05:57:13.581714Z","shell.execute_reply.started":"2022-02-23T19:51:02.422058Z"},"papermill":{"duration":0.288083,"end_time":"2022-02-25T05:57:13.581914","exception":false,"start_time":"2022-02-25T05:57:13.293831","status":"completed"},"tags":[],"id":"2876aff7"},"outputs":[],"source":["salary.drop(\"Competitors\",axis=1,inplace=True)# I dropped Competitors column as I think it not reauired for salary prediction"]},{"cell_type":"code","execution_count":null,"id":"d998db2b","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:14.137041Z","iopub.status.busy":"2022-02-25T05:57:14.136363Z","iopub.status.idle":"2022-02-25T05:57:14.138293Z","shell.execute_reply":"2022-02-25T05:57:14.138891Z","shell.execute_reply.started":"2022-02-23T19:51:02.438741Z"},"papermill":{"duration":0.28387,"end_time":"2022-02-25T05:57:14.139058","exception":false,"start_time":"2022-02-25T05:57:13.855188","status":"completed"},"tags":[],"id":"d998db2b"},"outputs":[],"source":["salary.drop(\"Job Title\",axis=1,inplace=True)# I dropped Job Title column as we have another column in which they have segregate\n","#  Job title in main columns"]},{"cell_type":"code","execution_count":null,"id":"6e787230","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:14.693976Z","iopub.status.busy":"2022-02-25T05:57:14.693336Z","iopub.status.idle":"2022-02-25T05:57:14.698327Z","shell.execute_reply":"2022-02-25T05:57:14.698880Z","shell.execute_reply.started":"2022-02-23T19:51:02.451415Z"},"papermill":{"duration":0.283944,"end_time":"2022-02-25T05:57:14.699054","exception":false,"start_time":"2022-02-25T05:57:14.415110","status":"completed"},"tags":[],"id":"6e787230"},"outputs":[],"source":["salary.drop(\"Salary Estimate\",axis=1,inplace=True)# I dropped Salary Estimate column as we have another column \"Avg Salary(k)\""]},{"cell_type":"code","execution_count":null,"id":"11ea6b3a","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:15.254062Z","iopub.status.busy":"2022-02-25T05:57:15.253448Z","iopub.status.idle":"2022-02-25T05:57:15.258352Z","shell.execute_reply":"2022-02-25T05:57:15.258929Z","shell.execute_reply.started":"2022-02-23T19:51:02.464445Z"},"papermill":{"duration":0.285189,"end_time":"2022-02-25T05:57:15.259098","exception":false,"start_time":"2022-02-25T05:57:14.973909","status":"completed"},"tags":[],"id":"11ea6b3a"},"outputs":[],"source":["salary.drop(\"Industry\",axis=1,inplace=True) # As Industry gets divide into sector so I am dropping Industry column"]},{"cell_type":"code","execution_count":null,"id":"d124c551","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:15.807167Z","iopub.status.busy":"2022-02-25T05:57:15.806503Z","iopub.status.idle":"2022-02-25T05:57:15.813021Z","shell.execute_reply":"2022-02-25T05:57:15.813567Z","shell.execute_reply.started":"2022-02-23T19:51:02.475646Z"},"papermill":{"duration":0.282497,"end_time":"2022-02-25T05:57:15.813755","exception":false,"start_time":"2022-02-25T05:57:15.531258","status":"completed"},"tags":[],"id":"d124c551"},"outputs":[],"source":["salary.drop(\"Hourly\",axis=1,inplace=True)\n","salary.drop(\"Employer provided\",axis=1,inplace=True)# as both column not required for salary prediction so we will drop them"]},{"cell_type":"code","execution_count":null,"id":"f0083234","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:16.365882Z","iopub.status.busy":"2022-02-25T05:57:16.365236Z","iopub.status.idle":"2022-02-25T05:57:16.371669Z","shell.execute_reply":"2022-02-25T05:57:16.372222Z","shell.execute_reply.started":"2022-02-23T19:51:02.488291Z"},"papermill":{"duration":0.28516,"end_time":"2022-02-25T05:57:16.372398","exception":false,"start_time":"2022-02-25T05:57:16.087238","status":"completed"},"tags":[],"id":"f0083234"},"outputs":[],"source":["salary.drop(\"Lower Salary\",axis=1,inplace=True)\n","salary.drop(\"Upper Salary\",axis=1,inplace=True)#As Lower salary and upper salary are correlated and it doesn't take into consideration while predict wo we will drop"]},{"cell_type":"code","execution_count":null,"id":"c41c4c01","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:16.928944Z","iopub.status.busy":"2022-02-25T05:57:16.928264Z","iopub.status.idle":"2022-02-25T05:57:16.933019Z","shell.execute_reply":"2022-02-25T05:57:16.933532Z","shell.execute_reply.started":"2022-02-23T19:51:02.500529Z"},"papermill":{"duration":0.284391,"end_time":"2022-02-25T05:57:16.933699","exception":false,"start_time":"2022-02-25T05:57:16.649308","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"c41c4c01","executionInfo":{"status":"ok","timestamp":1647309331843,"user_tz":-330,"elapsed":192,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"58389ab2-37fe-4788-9a59-d932347e7ed3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Rating', 'Company Name', 'Size', 'Founded', 'Type of ownership',\n","       'Sector', 'Revenue', 'Avg Salary(K)', 'Job Location', 'Age', 'Python',\n","       'spark', 'aws', 'excel', 'sql', 'sas', 'keras', 'pytorch', 'scikit',\n","       'tensor', 'hadoop', 'tableau', 'bi', 'flink', 'mongo', 'google_an',\n","       'job_title_sim', 'seniority_by_title', 'Degree'],\n","      dtype='object')"]},"metadata":{},"execution_count":97}],"source":["salary.columns"]},{"cell_type":"code","execution_count":null,"id":"a7533c66","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:17.504583Z","iopub.status.busy":"2022-02-25T05:57:17.502954Z","iopub.status.idle":"2022-02-25T05:57:17.510353Z","shell.execute_reply":"2022-02-25T05:57:17.511464Z","shell.execute_reply.started":"2022-02-23T19:51:02.511014Z"},"papermill":{"duration":0.300896,"end_time":"2022-02-25T05:57:17.511734","exception":false,"start_time":"2022-02-25T05:57:17.210838","status":"completed"},"tags":[],"id":"a7533c66"},"outputs":[],"source":["salary.drop(\"Company Name\",axis=1,inplace=True)"]},{"cell_type":"code","execution_count":null,"id":"812a847b","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:18.082084Z","iopub.status.busy":"2022-02-25T05:57:18.081077Z","iopub.status.idle":"2022-02-25T05:57:18.086364Z","shell.execute_reply":"2022-02-25T05:57:18.086974Z","shell.execute_reply.started":"2022-02-23T19:51:02.520398Z"},"papermill":{"duration":0.287267,"end_time":"2022-02-25T05:57:18.087143","exception":false,"start_time":"2022-02-25T05:57:17.799876","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"812a847b","executionInfo":{"status":"ok","timestamp":1647309331852,"user_tz":-330,"elapsed":196,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"524ec861-557d-437f-c456-4e333004b44c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(742, 28)"]},"metadata":{},"execution_count":99}],"source":["salary.shape"]},{"cell_type":"code","execution_count":null,"id":"ea9cf973","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:18.653997Z","iopub.status.busy":"2022-02-25T05:57:18.649936Z","iopub.status.idle":"2022-02-25T05:57:18.657897Z","shell.execute_reply":"2022-02-25T05:57:18.657403Z","shell.execute_reply.started":"2022-02-23T19:51:02.532038Z"},"papermill":{"duration":0.292703,"end_time":"2022-02-25T05:57:18.658056","exception":false,"start_time":"2022-02-25T05:57:18.365353","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"ea9cf973","executionInfo":{"status":"ok","timestamp":1647309331856,"user_tz":-330,"elapsed":196,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"7f4ed164-6123-43b3-9545-2e57c7eeab9c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["24"]},"metadata":{},"execution_count":100}],"source":["len(salary.Sector.value_counts())"]},{"cell_type":"code","execution_count":null,"id":"08788233","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:19.217149Z","iopub.status.busy":"2022-02-25T05:57:19.216437Z","iopub.status.idle":"2022-02-25T05:57:19.221675Z","shell.execute_reply":"2022-02-25T05:57:19.222241Z","shell.execute_reply.started":"2022-02-23T19:51:02.544472Z"},"papermill":{"duration":0.287305,"end_time":"2022-02-25T05:57:19.222407","exception":false,"start_time":"2022-02-25T05:57:18.935102","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"08788233","executionInfo":{"status":"ok","timestamp":1647309331869,"user_tz":-330,"elapsed":206,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"e830acd4-020b-49f6-d540-74705602d1b8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Company - Private                 410\n","Company - Public                  193\n","Nonprofit Organization             55\n","Subsidiary or Business Segment     34\n","Government                         15\n","Hospital                           15\n","College / University               13\n","Other Organization                  5\n","School / School District            2\n","Name: Type of ownership, dtype: int64"]},"metadata":{},"execution_count":101}],"source":["salary[\"Type of ownership\"].value_counts()"]},{"cell_type":"code","execution_count":null,"id":"7879a4a3","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:19.783551Z","iopub.status.busy":"2022-02-25T05:57:19.782910Z","iopub.status.idle":"2022-02-25T05:57:19.786863Z","shell.execute_reply":"2022-02-25T05:57:19.786241Z","shell.execute_reply.started":"2022-02-23T19:51:02.555977Z"},"papermill":{"duration":0.287608,"end_time":"2022-02-25T05:57:19.787004","exception":false,"start_time":"2022-02-25T05:57:19.499396","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"7879a4a3","executionInfo":{"status":"ok","timestamp":1647309331885,"user_tz":-330,"elapsed":219,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"cff909bb-4c94-4427-84b5-c6205abbe500"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Unknown / Non-Applicable            204\n","$10+ billion (USD)                  124\n","$100 to $500 million (USD)           91\n","$1 to $2 billion (USD)               60\n","$500 million to $1 billion (USD)     57\n","$50 to $100 million (USD)            46\n","$25 to $50 million (USD)             40\n","$2 to $5 billion (USD)               39\n","$10 to $25 million (USD)             32\n","$5 to $10 billion (USD)              19\n","$5 to $10 million (USD)              18\n","$1 to $5 million (USD)                8\n","Less than $1 million (USD)            4\n","Name: Revenue, dtype: int64"]},"metadata":{},"execution_count":102}],"source":["salary.Revenue.value_counts()"]},{"cell_type":"code","execution_count":null,"id":"b051db2b","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:20.403104Z","iopub.status.busy":"2022-02-25T05:57:20.402441Z","iopub.status.idle":"2022-02-25T05:57:21.437439Z","shell.execute_reply":"2022-02-25T05:57:21.437978Z","shell.execute_reply.started":"2022-02-23T19:51:02.566395Z"},"papermill":{"duration":1.373179,"end_time":"2022-02-25T05:57:21.438155","exception":false,"start_time":"2022-02-25T05:57:20.064976","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"b051db2b","executionInfo":{"status":"ok","timestamp":1647309331891,"user_tz":-330,"elapsed":222,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"fe4bf7cb-8492-4114-c94f-efb43af23a5d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f508a46d250>"]},"metadata":{},"execution_count":103},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["sns.barplot(y=\"Revenue\",x=\"Avg Salary(K)\",data=salary)"]},{"cell_type":"code","execution_count":null,"id":"7747a1fa","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:21.999068Z","iopub.status.busy":"2022-02-25T05:57:21.998388Z","iopub.status.idle":"2022-02-25T05:57:22.001293Z","shell.execute_reply":"2022-02-25T05:57:22.001887Z","shell.execute_reply.started":"2022-02-23T19:51:03.593407Z"},"papermill":{"duration":0.28395,"end_time":"2022-02-25T05:57:22.002053","exception":false,"start_time":"2022-02-25T05:57:21.718103","status":"completed"},"tags":[],"id":"7747a1fa"},"outputs":[],"source":["salary1=salary"]},{"cell_type":"markdown","id":"9644b0f1","metadata":{"papermill":{"duration":0.280997,"end_time":"2022-02-25T05:57:22.562695","exception":false,"start_time":"2022-02-25T05:57:22.281698","status":"completed"},"tags":[],"id":"9644b0f1"},"source":["## we creating another data frame we will build a model on both in \"salary1\" we will drop remaining columns only include skills and on\"salary we will do OHE encoding and  build a model"]},{"cell_type":"markdown","id":"3fb05d6c","metadata":{"papermill":{"duration":0.281806,"end_time":"2022-02-25T05:57:23.124639","exception":false,"start_time":"2022-02-25T05:57:22.842833","status":"completed"},"tags":[],"id":"3fb05d6c"},"source":["**Filter numerical and categorical variables**"]},{"cell_type":"code","execution_count":null,"id":"5a719b26","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:23.691693Z","iopub.status.busy":"2022-02-25T05:57:23.691016Z","iopub.status.idle":"2022-02-25T05:57:23.693995Z","shell.execute_reply":"2022-02-25T05:57:23.693423Z","shell.execute_reply.started":"2022-02-23T19:51:03.598409Z"},"papermill":{"duration":0.291325,"end_time":"2022-02-25T05:57:23.694146","exception":false,"start_time":"2022-02-25T05:57:23.402821","status":"completed"},"tags":[],"id":"5a719b26"},"outputs":[],"source":["df_numeric = salary.select_dtypes(include=np.number)"]},{"cell_type":"code","execution_count":null,"id":"84c7133e","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:24.265299Z","iopub.status.busy":"2022-02-25T05:57:24.264593Z","iopub.status.idle":"2022-02-25T05:57:24.286191Z","shell.execute_reply":"2022-02-25T05:57:24.286648Z","shell.execute_reply.started":"2022-02-23T19:51:03.613423Z"},"papermill":{"duration":0.314554,"end_time":"2022-02-25T05:57:24.286840","exception":false,"start_time":"2022-02-25T05:57:23.972286","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"84c7133e","executionInfo":{"status":"ok","timestamp":1647309331898,"user_tz":-330,"elapsed":206,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"813f34c8-e5af-46b8-a60b-660a6feaa536"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Rating  Founded  Avg Salary(K)   Age  Python  spark  aws  excel  sql  sas  \\\n","0     3.8   1973.0           72.0  48.0     1.0    0.0  0.0    1.0  0.0  1.0   \n","1     3.4   1984.0           87.5  37.0     1.0    0.0  0.0    0.0  0.0  0.0   \n","2     4.8   2010.0           85.0  35.0     1.0    1.0  0.0    1.0  1.0  1.0   \n","3     3.8   1965.0           76.5  56.0     1.0    0.0  0.0    0.0  0.0  0.0   \n","4     2.9   1998.0          114.5  23.0     1.0    0.0  0.0    1.0  1.0  1.0   \n","\n","   keras  pytorch  scikit  tensor  hadoop  tableau   bi  flink  mongo  \\\n","0    0.0      0.0     0.0     0.0     0.0      1.0  1.0    0.0    0.0   \n","1    0.0      0.0     0.0     0.0     0.0      0.0  0.0    0.0    0.0   \n","2    0.0      0.0     0.0     0.0     0.0      0.0  0.0    0.0    0.0   \n","3    0.0      0.0     0.0     0.0     0.0      0.0  0.0    0.0    0.0   \n","4    0.0      0.0     0.0     0.0     0.0      0.0  0.0    0.0    0.0   \n","\n","   google_an  \n","0        0.0  \n","1        0.0  \n","2        0.0  \n","3        0.0  \n","4        0.0  "],"text/html":["\n","  <div id=\"df-7e1a9751-b363-4091-8a6a-a182ce6ae071\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Rating</th>\n","      <th>Founded</th>\n","      <th>Avg Salary(K)</th>\n","      <th>Age</th>\n","      <th>Python</th>\n","      <th>spark</th>\n","      <th>aws</th>\n","      <th>excel</th>\n","      <th>sql</th>\n","      <th>sas</th>\n","      <th>keras</th>\n","      <th>pytorch</th>\n","      <th>scikit</th>\n","      <th>tensor</th>\n","      <th>hadoop</th>\n","      <th>tableau</th>\n","      <th>bi</th>\n","      <th>flink</th>\n","      <th>mongo</th>\n","      <th>google_an</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3.8</td>\n","      <td>1973.0</td>\n","      <td>72.0</td>\n","      <td>48.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3.4</td>\n","      <td>1984.0</td>\n","      <td>87.5</td>\n","      <td>37.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.8</td>\n","      <td>2010.0</td>\n","      <td>85.0</td>\n","      <td>35.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3.8</td>\n","      <td>1965.0</td>\n","      <td>76.5</td>\n","      <td>56.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.9</td>\n","      <td>1998.0</td>\n","      <td>114.5</td>\n","      <td>23.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e1a9751-b363-4091-8a6a-a182ce6ae071')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7e1a9751-b363-4091-8a6a-a182ce6ae071 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7e1a9751-b363-4091-8a6a-a182ce6ae071');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":106}],"source":["df_numeric.head()"]},{"cell_type":"code","execution_count":null,"id":"709a1fd7","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:24.847788Z","iopub.status.busy":"2022-02-25T05:57:24.847118Z","iopub.status.idle":"2022-02-25T05:57:24.850164Z","shell.execute_reply":"2022-02-25T05:57:24.850762Z","shell.execute_reply.started":"2022-02-23T19:51:03.648618Z"},"papermill":{"duration":0.28633,"end_time":"2022-02-25T05:57:24.850966","exception":false,"start_time":"2022-02-25T05:57:24.564636","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"709a1fd7","executionInfo":{"status":"ok","timestamp":1647309331901,"user_tz":-330,"elapsed":203,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"2dc326fd-ff7b-4b4e-d4ef-6d658493e0f2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(742, 20)"]},"metadata":{},"execution_count":107}],"source":["df_numeric.shape"]},{"cell_type":"code","execution_count":null,"id":"f14b08bd","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:25.413357Z","iopub.status.busy":"2022-02-25T05:57:25.412577Z","iopub.status.idle":"2022-02-25T05:57:25.418252Z","shell.execute_reply":"2022-02-25T05:57:25.418717Z","shell.execute_reply.started":"2022-02-23T19:51:03.655516Z"},"papermill":{"duration":0.288795,"end_time":"2022-02-25T05:57:25.418975","exception":false,"start_time":"2022-02-25T05:57:25.130180","status":"completed"},"tags":[],"id":"f14b08bd"},"outputs":[],"source":["df_categoric = salary.select_dtypes(include = object)"]},{"cell_type":"code","execution_count":null,"id":"c4f908d0","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:25.976689Z","iopub.status.busy":"2022-02-25T05:57:25.976084Z","iopub.status.idle":"2022-02-25T05:57:25.987995Z","shell.execute_reply":"2022-02-25T05:57:25.988480Z","shell.execute_reply.started":"2022-02-23T19:51:03.666084Z"},"papermill":{"duration":0.292462,"end_time":"2022-02-25T05:57:25.988663","exception":false,"start_time":"2022-02-25T05:57:25.696201","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"c4f908d0","executionInfo":{"status":"ok","timestamp":1647309331907,"user_tz":-330,"elapsed":203,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"b55b3c62-bf8c-4205-af18-f681654578df"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["           Size   Type of ownership                        Sector  \\\n","0   501 - 1000    Company - Private           Aerospace & Defense   \n","1       10000+   Other Organization                   Health Care   \n","2   501 - 1000    Company - Private             Business Services   \n","3  1001 - 5000           Government  Oil, Gas, Energy & Utilities   \n","4     51 - 200    Company - Private             Business Services   \n","\n","                            Revenue Job Location   job_title_sim  \\\n","0         $50 to $100 million (USD)           NM  data scientist   \n","1            $2 to $5 billion (USD)           MD  data scientist   \n","2        $100 to $500 million (USD)           FL  data scientist   \n","3  $500 million to $1 billion (USD)           WA  data scientist   \n","4          Unknown / Non-Applicable           NY  data scientist   \n","\n","  seniority_by_title Degree  \n","0                 na      M  \n","1                 na      M  \n","2                 na      M  \n","3                 na     na  \n","4                 na     na  "],"text/html":["\n","  <div id=\"df-23614267-c1c7-4cd5-bcd6-0be67df5f256\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Size</th>\n","      <th>Type of ownership</th>\n","      <th>Sector</th>\n","      <th>Revenue</th>\n","      <th>Job Location</th>\n","      <th>job_title_sim</th>\n","      <th>seniority_by_title</th>\n","      <th>Degree</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>501 - 1000</td>\n","      <td>Company - Private</td>\n","      <td>Aerospace &amp; Defense</td>\n","      <td>$50 to $100 million (USD)</td>\n","      <td>NM</td>\n","      <td>data scientist</td>\n","      <td>na</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10000+</td>\n","      <td>Other Organization</td>\n","      <td>Health Care</td>\n","      <td>$2 to $5 billion (USD)</td>\n","      <td>MD</td>\n","      <td>data scientist</td>\n","      <td>na</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>501 - 1000</td>\n","      <td>Company - Private</td>\n","      <td>Business Services</td>\n","      <td>$100 to $500 million (USD)</td>\n","      <td>FL</td>\n","      <td>data scientist</td>\n","      <td>na</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1001 - 5000</td>\n","      <td>Government</td>\n","      <td>Oil, Gas, Energy &amp; Utilities</td>\n","      <td>$500 million to $1 billion (USD)</td>\n","      <td>WA</td>\n","      <td>data scientist</td>\n","      <td>na</td>\n","      <td>na</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>51 - 200</td>\n","      <td>Company - Private</td>\n","      <td>Business Services</td>\n","      <td>Unknown / Non-Applicable</td>\n","      <td>NY</td>\n","      <td>data scientist</td>\n","      <td>na</td>\n","      <td>na</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-23614267-c1c7-4cd5-bcd6-0be67df5f256')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-23614267-c1c7-4cd5-bcd6-0be67df5f256 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-23614267-c1c7-4cd5-bcd6-0be67df5f256');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":109}],"source":["df_categoric.head()"]},{"cell_type":"code","execution_count":null,"id":"33d7657b","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:26.553384Z","iopub.status.busy":"2022-02-25T05:57:26.552680Z","iopub.status.idle":"2022-02-25T05:57:26.557377Z","shell.execute_reply":"2022-02-25T05:57:26.557943Z","shell.execute_reply.started":"2022-02-23T19:51:03.684796Z"},"papermill":{"duration":0.28783,"end_time":"2022-02-25T05:57:26.558107","exception":false,"start_time":"2022-02-25T05:57:26.270277","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"33d7657b","executionInfo":{"status":"ok","timestamp":1647309331910,"user_tz":-330,"elapsed":201,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"a040ba87-a59d-47ee-aaf1-3dae94766da9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(742, 8)"]},"metadata":{},"execution_count":110}],"source":["df_categoric.shape"]},{"cell_type":"markdown","id":"0168375c","metadata":{"papermill":{"duration":0.283056,"end_time":"2022-02-25T05:57:27.119591","exception":false,"start_time":"2022-02-25T05:57:26.836535","status":"completed"},"tags":[],"id":"0168375c"},"source":["**Dummy encode the catergorical variables**"]},{"cell_type":"code","execution_count":null,"id":"c0703179","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:27.686218Z","iopub.status.busy":"2022-02-25T05:57:27.685566Z","iopub.status.idle":"2022-02-25T05:57:27.697806Z","shell.execute_reply":"2022-02-25T05:57:27.697272Z","shell.execute_reply.started":"2022-02-23T19:51:03.693019Z"},"papermill":{"duration":0.297861,"end_time":"2022-02-25T05:57:27.697961","exception":false,"start_time":"2022-02-25T05:57:27.400100","status":"completed"},"tags":[],"id":"c0703179"},"outputs":[],"source":["dummy_encoded_variables = pd.get_dummies(df_categoric, drop_first = True)"]},{"cell_type":"code","execution_count":null,"id":"1bf22f75","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:28.266610Z","iopub.status.busy":"2022-02-25T05:57:28.265566Z","iopub.status.idle":"2022-02-25T05:57:28.309455Z","shell.execute_reply":"2022-02-25T05:57:28.310010Z","shell.execute_reply.started":"2022-02-23T19:51:03.710652Z"},"papermill":{"duration":0.332008,"end_time":"2022-02-25T05:57:28.310185","exception":false,"start_time":"2022-02-25T05:57:27.978177","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"1bf22f75","executionInfo":{"status":"ok","timestamp":1647309331918,"user_tz":-330,"elapsed":203,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"bed03265-e63b-478a-e085-88586a5fb62e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Size_10000+   Size_1001 - 5000   Size_201 - 500   Size_5001 - 10000   \\\n","0             0                  0                0                   0   \n","1             1                  0                0                   0   \n","2             0                  0                0                   0   \n","3             0                  1                0                   0   \n","4             0                  0                0                   0   \n","\n","   Size_501 - 1000   Size_51 - 200   Size_unknown  \\\n","0                 1               0             0   \n","1                 0               0             0   \n","2                 1               0             0   \n","3                 0               0             0   \n","4                 0               1             0   \n","\n","   Type of ownership_Company - Private  Type of ownership_Company - Public  \\\n","0                                    1                                   0   \n","1                                    0                                   0   \n","2                                    1                                   0   \n","3                                    0                                   0   \n","4                                    1                                   0   \n","\n","   Type of ownership_Government  Type of ownership_Hospital  \\\n","0                             0                           0   \n","1                             0                           0   \n","2                             0                           0   \n","3                             1                           0   \n","4                             0                           0   \n","\n","   Type of ownership_Nonprofit Organization  \\\n","0                                         0   \n","1                                         0   \n","2                                         0   \n","3                                         0   \n","4                                         0   \n","\n","   Type of ownership_Other Organization  \\\n","0                                     0   \n","1                                     1   \n","2                                     0   \n","3                                     0   \n","4                                     0   \n","\n","   Type of ownership_School / School District  \\\n","0                                           0   \n","1                                           0   \n","2                                           0   \n","3                                           0   \n","4                                           0   \n","\n","   Type of ownership_Subsidiary or Business Segment  \\\n","0                                                 0   \n","1                                                 0   \n","2                                                 0   \n","3                                                 0   \n","4                                                 0   \n","\n","   Sector_Aerospace & Defense  Sector_Agriculture & Forestry  \\\n","0                           1                              0   \n","1                           0                              0   \n","2                           0                              0   \n","3                           0                              0   \n","4                           0                              0   \n","\n","   Sector_Arts, Entertainment & Recreation  Sector_Biotech & Pharmaceuticals  \\\n","0                                        0                                 0   \n","1                                        0                                 0   \n","2                                        0                                 0   \n","3                                        0                                 0   \n","4                                        0                                 0   \n","\n","   Sector_Business Services  Sector_Construction, Repair & Maintenance  \\\n","0                         0                                          0   \n","1                         0                                          0   \n","2                         1                                          0   \n","3                         0                                          0   \n","4                         1                                          0   \n","\n","   Sector_Consumer Services  Sector_Education  Sector_Finance  \\\n","0                         0                 0               0   \n","1                         0                 0               0   \n","2                         0                 0               0   \n","3                         0                 0               0   \n","4                         0                 0               0   \n","\n","   Sector_Government  Sector_Health Care  Sector_Information Technology  \\\n","0                  0                   0                              0   \n","1                  0                   1                              0   \n","2                  0                   0                              0   \n","3                  0                   0                              0   \n","4                  0                   0                              0   \n","\n","   Sector_Insurance  Sector_Manufacturing  Sector_Media  \\\n","0                 0                     0             0   \n","1                 0                     0             0   \n","2                 0                     0             0   \n","3                 0                     0             0   \n","4                 0                     0             0   \n","\n","   Sector_Mining & Metals  Sector_Non-Profit  \\\n","0                       0                  0   \n","1                       0                  0   \n","2                       0                  0   \n","3                       0                  0   \n","4                       0                  0   \n","\n","   Sector_Oil, Gas, Energy & Utilities  Sector_Real Estate  Sector_Retail  \\\n","0                                    0                   0              0   \n","1                                    0                   0              0   \n","2                                    0                   0              0   \n","3                                    1                   0              0   \n","4                                    0                   0              0   \n","\n","   Sector_Telecommunications  Sector_Transportation & Logistics  \\\n","0                          0                                  0   \n","1                          0                                  0   \n","2                          0                                  0   \n","3                          0                                  0   \n","4                          0                                  0   \n","\n","   Sector_Travel & Tourism  Revenue_$1 to $5 million (USD)  \\\n","0                        0                               0   \n","1                        0                               0   \n","2                        0                               0   \n","3                        0                               0   \n","4                        0                               0   \n","\n","   Revenue_$10 to $25 million (USD)  Revenue_$10+ billion (USD)  \\\n","0                                 0                           0   \n","1                                 0                           0   \n","2                                 0                           0   \n","3                                 0                           0   \n","4                                 0                           0   \n","\n","   Revenue_$100 to $500 million (USD)  Revenue_$2 to $5 billion (USD)  \\\n","0                                   0                               0   \n","1                                   0                               1   \n","2                                   1                               0   \n","3                                   0                               0   \n","4                                   0                               0   \n","\n","   Revenue_$25 to $50 million (USD)  Revenue_$5 to $10 billion (USD)  \\\n","0                                 0                                0   \n","1                                 0                                0   \n","2                                 0                                0   \n","3                                 0                                0   \n","4                                 0                                0   \n","\n","   Revenue_$5 to $10 million (USD)  Revenue_$50 to $100 million (USD)  \\\n","0                                0                                  1   \n","1                                0                                  0   \n","2                                0                                  0   \n","3                                0                                  0   \n","4                                0                                  0   \n","\n","   Revenue_$500 million to $1 billion (USD)  \\\n","0                                         0   \n","1                                         0   \n","2                                         0   \n","3                                         1   \n","4                                         0   \n","\n","   Revenue_Less than $1 million (USD)  Revenue_Unknown / Non-Applicable  \\\n","0                                   0                                 0   \n","1                                   0                                 0   \n","2                                   0                                 0   \n","3                                   0                                 0   \n","4                                   0                                 1   \n","\n","   Job Location_AZ  Job Location_CA  Job Location_CO  Job Location_CT  \\\n","0                0                0                0                0   \n","1                0                0                0                0   \n","2                0                0                0                0   \n","3                0                0                0                0   \n","4                0                0                0                0   \n","\n","   Job Location_DC  Job Location_DE  Job Location_FL  Job Location_GA  \\\n","0                0                0                0                0   \n","1                0                0                0                0   \n","2                0                0                1                0   \n","3                0                0                0                0   \n","4                0                0                0                0   \n","\n","   Job Location_IA  Job Location_ID  Job Location_IL  Job Location_IN  \\\n","0                0                0                0                0   \n","1                0                0                0                0   \n","2                0                0                0                0   \n","3                0                0                0                0   \n","4                0                0                0                0   \n","\n","   Job Location_KS  Job Location_KY  Job Location_LA  Job Location_MA  \\\n","0                0                0                0                0   \n","1                0                0                0                0   \n","2                0                0                0                0   \n","3                0                0                0                0   \n","4                0                0                0                0   \n","\n","   Job Location_MD  Job Location_MI  Job Location_MN  Job Location_MO  \\\n","0                0                0                0                0   \n","1                1                0                0                0   \n","2                0                0                0                0   \n","3                0                0                0                0   \n","4                0                0                0                0   \n","\n","   Job Location_NC  Job Location_NE  Job Location_NJ  Job Location_NM  \\\n","0                0                0                0                1   \n","1                0                0                0                0   \n","2                0                0                0                0   \n","3                0                0                0                0   \n","4                0                0                0                0   \n","\n","   Job Location_NY  Job Location_OH  Job Location_OR  Job Location_PA  \\\n","0                0                0                0                0   \n","1                0                0                0                0   \n","2                0                0                0                0   \n","3                0                0                0                0   \n","4                1                0                0                0   \n","\n","   Job Location_RI  Job Location_SC  Job Location_TN  Job Location_TX  \\\n","0                0                0                0                0   \n","1                0                0                0                0   \n","2                0                0                0                0   \n","3                0                0                0                0   \n","4                0                0                0                0   \n","\n","   Job Location_UT  Job Location_VA  Job Location_WA  Job Location_WI  \\\n","0                0                0                0                0   \n","1                0                0                0                0   \n","2                0                0                0                0   \n","3                0                0                1                0   \n","4                0                0                0                0   \n","\n","   job_title_sim_analyst  job_title_sim_data analitics  \\\n","0                      0                             0   \n","1                      0                             0   \n","2                      0                             0   \n","3                      0                             0   \n","4                      0                             0   \n","\n","   job_title_sim_data engineer  job_title_sim_data modeler  \\\n","0                            0                           0   \n","1                            0                           0   \n","2                            0                           0   \n","3                            0                           0   \n","4                            0                           0   \n","\n","   job_title_sim_data scientist  job_title_sim_director  \\\n","0                             1                       0   \n","1                             1                       0   \n","2                             1                       0   \n","3                             1                       0   \n","4                             1                       0   \n","\n","   job_title_sim_machine learning engineer  job_title_sim_na  \\\n","0                                        0                 0   \n","1                                        0                 0   \n","2                                        0                 0   \n","3                                        0                 0   \n","4                                        0                 0   \n","\n","   job_title_sim_other scientist  seniority_by_title_na  \\\n","0                              0                      1   \n","1                              0                      1   \n","2                              0                      1   \n","3                              0                      1   \n","4                              0                      1   \n","\n","   seniority_by_title_sr  Degree_P  Degree_na  \n","0                      0         0          0  \n","1                      0         0          0  \n","2                      0         0          0  \n","3                      0         0          1  \n","4                      0         0          1  "],"text/html":["\n","  <div id=\"df-c4b8ace3-8a3d-4fb8-89ec-99a898e980e0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Size_10000+</th>\n","      <th>Size_1001 - 5000</th>\n","      <th>Size_201 - 500</th>\n","      <th>Size_5001 - 10000</th>\n","      <th>Size_501 - 1000</th>\n","      <th>Size_51 - 200</th>\n","      <th>Size_unknown</th>\n","      <th>Type of ownership_Company - Private</th>\n","      <th>Type of ownership_Company - Public</th>\n","      <th>Type of ownership_Government</th>\n","      <th>Type of ownership_Hospital</th>\n","      <th>Type of ownership_Nonprofit Organization</th>\n","      <th>Type of ownership_Other Organization</th>\n","      <th>Type of ownership_School / School District</th>\n","      <th>Type of ownership_Subsidiary or Business Segment</th>\n","      <th>Sector_Aerospace &amp; Defense</th>\n","      <th>Sector_Agriculture &amp; Forestry</th>\n","      <th>Sector_Arts, Entertainment &amp; Recreation</th>\n","      <th>Sector_Biotech &amp; Pharmaceuticals</th>\n","      <th>Sector_Business Services</th>\n","      <th>Sector_Construction, Repair &amp; Maintenance</th>\n","      <th>Sector_Consumer Services</th>\n","      <th>Sector_Education</th>\n","      <th>Sector_Finance</th>\n","      <th>Sector_Government</th>\n","      <th>Sector_Health Care</th>\n","      <th>Sector_Information Technology</th>\n","      <th>Sector_Insurance</th>\n","      <th>Sector_Manufacturing</th>\n","      <th>Sector_Media</th>\n","      <th>Sector_Mining &amp; Metals</th>\n","      <th>Sector_Non-Profit</th>\n","      <th>Sector_Oil, Gas, Energy &amp; Utilities</th>\n","      <th>Sector_Real Estate</th>\n","      <th>Sector_Retail</th>\n","      <th>Sector_Telecommunications</th>\n","      <th>Sector_Transportation &amp; Logistics</th>\n","      <th>Sector_Travel &amp; Tourism</th>\n","      <th>Revenue_$1 to $5 million (USD)</th>\n","      <th>Revenue_$10 to $25 million (USD)</th>\n","      <th>Revenue_$10+ billion (USD)</th>\n","      <th>Revenue_$100 to $500 million (USD)</th>\n","      <th>Revenue_$2 to $5 billion (USD)</th>\n","      <th>Revenue_$25 to $50 million (USD)</th>\n","      <th>Revenue_$5 to $10 billion (USD)</th>\n","      <th>Revenue_$5 to $10 million (USD)</th>\n","      <th>Revenue_$50 to $100 million (USD)</th>\n","      <th>Revenue_$500 million to $1 billion (USD)</th>\n","      <th>Revenue_Less than $1 million (USD)</th>\n","      <th>Revenue_Unknown / Non-Applicable</th>\n","      <th>Job Location_AZ</th>\n","      <th>Job Location_CA</th>\n","      <th>Job Location_CO</th>\n","      <th>Job Location_CT</th>\n","      <th>Job Location_DC</th>\n","      <th>Job Location_DE</th>\n","      <th>Job Location_FL</th>\n","      <th>Job Location_GA</th>\n","      <th>Job Location_IA</th>\n","      <th>Job Location_ID</th>\n","      <th>Job Location_IL</th>\n","      <th>Job Location_IN</th>\n","      <th>Job Location_KS</th>\n","      <th>Job Location_KY</th>\n","      <th>Job Location_LA</th>\n","      <th>Job Location_MA</th>\n","      <th>Job Location_MD</th>\n","      <th>Job Location_MI</th>\n","      <th>Job Location_MN</th>\n","      <th>Job Location_MO</th>\n","      <th>Job Location_NC</th>\n","      <th>Job Location_NE</th>\n","      <th>Job Location_NJ</th>\n","      <th>Job Location_NM</th>\n","      <th>Job Location_NY</th>\n","      <th>Job Location_OH</th>\n","      <th>Job Location_OR</th>\n","      <th>Job Location_PA</th>\n","      <th>Job Location_RI</th>\n","      <th>Job Location_SC</th>\n","      <th>Job Location_TN</th>\n","      <th>Job Location_TX</th>\n","      <th>Job Location_UT</th>\n","      <th>Job Location_VA</th>\n","      <th>Job Location_WA</th>\n","      <th>Job Location_WI</th>\n","      <th>job_title_sim_analyst</th>\n","      <th>job_title_sim_data analitics</th>\n","      <th>job_title_sim_data engineer</th>\n","      <th>job_title_sim_data modeler</th>\n","      <th>job_title_sim_data scientist</th>\n","      <th>job_title_sim_director</th>\n","      <th>job_title_sim_machine learning engineer</th>\n","      <th>job_title_sim_na</th>\n","      <th>job_title_sim_other scientist</th>\n","      <th>seniority_by_title_na</th>\n","      <th>seniority_by_title_sr</th>\n","      <th>Degree_P</th>\n","      <th>Degree_na</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4b8ace3-8a3d-4fb8-89ec-99a898e980e0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c4b8ace3-8a3d-4fb8-89ec-99a898e980e0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c4b8ace3-8a3d-4fb8-89ec-99a898e980e0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":112}],"source":["dummy_encoded_variables.head()"]},{"cell_type":"code","execution_count":null,"id":"6e8e1503","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:28.908611Z","iopub.status.busy":"2022-02-25T05:57:28.907627Z","iopub.status.idle":"2022-02-25T05:57:28.912924Z","shell.execute_reply":"2022-02-25T05:57:28.913501Z","shell.execute_reply.started":"2022-02-23T19:51:03.761954Z"},"papermill":{"duration":0.291904,"end_time":"2022-02-25T05:57:28.913664","exception":false,"start_time":"2022-02-25T05:57:28.621760","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"6e8e1503","executionInfo":{"status":"ok","timestamp":1647309331924,"user_tz":-330,"elapsed":202,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"1015e24a-a6a8-40bf-c61f-02e3fcf323b9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(742, 99)"]},"metadata":{},"execution_count":113}],"source":["dummy_encoded_variables.shape"]},{"cell_type":"markdown","id":"f89ce1ea","metadata":{"papermill":{"duration":0.283594,"end_time":"2022-02-25T05:57:29.483420","exception":false,"start_time":"2022-02-25T05:57:29.199826","status":"completed"},"tags":[],"id":"f89ce1ea"},"source":["**Concatenate numerical and dummy encoded categorical variables**"]},{"cell_type":"code","execution_count":null,"id":"0d97a79e","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:30.055338Z","iopub.status.busy":"2022-02-25T05:57:30.054304Z","iopub.status.idle":"2022-02-25T05:57:30.122127Z","shell.execute_reply":"2022-02-25T05:57:30.122620Z","shell.execute_reply.started":"2022-02-23T19:51:03.771034Z"},"papermill":{"duration":0.356691,"end_time":"2022-02-25T05:57:30.122802","exception":false,"start_time":"2022-02-25T05:57:29.766111","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"0d97a79e","executionInfo":{"status":"ok","timestamp":1647309331927,"user_tz":-330,"elapsed":199,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"630f2a7f-853b-460a-acd3-e4d65f2dab3c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Rating  Founded  Avg Salary(K)   Age  Python  spark  aws  excel  sql  sas  \\\n","0     3.8   1973.0           72.0  48.0     1.0    0.0  0.0    1.0  0.0  1.0   \n","1     3.4   1984.0           87.5  37.0     1.0    0.0  0.0    0.0  0.0  0.0   \n","2     4.8   2010.0           85.0  35.0     1.0    1.0  0.0    1.0  1.0  1.0   \n","3     3.8   1965.0           76.5  56.0     1.0    0.0  0.0    0.0  0.0  0.0   \n","4     2.9   1998.0          114.5  23.0     1.0    0.0  0.0    1.0  1.0  1.0   \n","\n","   keras  pytorch  scikit  tensor  hadoop  tableau   bi  flink  mongo  \\\n","0    0.0      0.0     0.0     0.0     0.0      1.0  1.0    0.0    0.0   \n","1    0.0      0.0     0.0     0.0     0.0      0.0  0.0    0.0    0.0   \n","2    0.0      0.0     0.0     0.0     0.0      0.0  0.0    0.0    0.0   \n","3    0.0      0.0     0.0     0.0     0.0      0.0  0.0    0.0    0.0   \n","4    0.0      0.0     0.0     0.0     0.0      0.0  0.0    0.0    0.0   \n","\n","   google_an  Size_10000+   Size_1001 - 5000   Size_201 - 500   \\\n","0        0.0             0                  0                0   \n","1        0.0             1                  0                0   \n","2        0.0             0                  0                0   \n","3        0.0             0                  1                0   \n","4        0.0             0                  0                0   \n","\n","   Size_5001 - 10000   Size_501 - 1000   Size_51 - 200   Size_unknown  \\\n","0                   0                 1               0             0   \n","1                   0                 0               0             0   \n","2                   0                 1               0             0   \n","3                   0                 0               0             0   \n","4                   0                 0               1             0   \n","\n","   Type of ownership_Company - Private  Type of ownership_Company - Public  \\\n","0                                    1                                   0   \n","1                                    0                                   0   \n","2                                    1                                   0   \n","3                                    0                                   0   \n","4                                    1                                   0   \n","\n","   Type of ownership_Government  Type of ownership_Hospital  \\\n","0                             0                           0   \n","1                             0                           0   \n","2                             0                           0   \n","3                             1                           0   \n","4                             0                           0   \n","\n","   Type of ownership_Nonprofit Organization  \\\n","0                                         0   \n","1                                         0   \n","2                                         0   \n","3                                         0   \n","4                                         0   \n","\n","   Type of ownership_Other Organization  \\\n","0                                     0   \n","1                                     1   \n","2                                     0   \n","3                                     0   \n","4                                     0   \n","\n","   Type of ownership_School / School District  \\\n","0                                           0   \n","1                                           0   \n","2                                           0   \n","3                                           0   \n","4                                           0   \n","\n","   Type of ownership_Subsidiary or Business Segment  \\\n","0                                                 0   \n","1                                                 0   \n","2                                                 0   \n","3                                                 0   \n","4                                                 0   \n","\n","   Sector_Aerospace & Defense  Sector_Agriculture & Forestry  \\\n","0                           1                              0   \n","1                           0                              0   \n","2                           0                              0   \n","3                           0                              0   \n","4                           0                              0   \n","\n","   Sector_Arts, Entertainment & Recreation  Sector_Biotech & Pharmaceuticals  \\\n","0                                        0                                 0   \n","1                                        0                                 0   \n","2                                        0                                 0   \n","3                                        0                                 0   \n","4                                        0                                 0   \n","\n","   Sector_Business Services  Sector_Construction, Repair & Maintenance  \\\n","0                         0                                          0   \n","1                         0                                          0   \n","2                         1                                          0   \n","3                         0                                          0   \n","4                         1                                          0   \n","\n","   Sector_Consumer Services  Sector_Education  Sector_Finance  \\\n","0                         0                 0               0   \n","1                         0                 0               0   \n","2                         0                 0               0   \n","3                         0                 0               0   \n","4                         0                 0               0   \n","\n","   Sector_Government  Sector_Health Care  Sector_Information Technology  \\\n","0                  0                   0                              0   \n","1                  0                   1                              0   \n","2                  0                   0                              0   \n","3                  0                   0                              0   \n","4                  0                   0                              0   \n","\n","   Sector_Insurance  Sector_Manufacturing  Sector_Media  \\\n","0                 0                     0             0   \n","1                 0                     0             0   \n","2                 0                     0             0   \n","3                 0                     0             0   \n","4                 0                     0             0   \n","\n","   Sector_Mining & Metals  Sector_Non-Profit  \\\n","0                       0                  0   \n","1                       0                  0   \n","2                       0                  0   \n","3                       0                  0   \n","4                       0                  0   \n","\n","   Sector_Oil, Gas, Energy & Utilities  Sector_Real Estate  Sector_Retail  \\\n","0                                    0                   0              0   \n","1                                    0                   0              0   \n","2                                    0                   0              0   \n","3                                    1                   0              0   \n","4                                    0                   0              0   \n","\n","   Sector_Telecommunications  Sector_Transportation & Logistics  \\\n","0                          0                                  0   \n","1                          0                                  0   \n","2                          0                                  0   \n","3                          0                                  0   \n","4                          0                                  0   \n","\n","   Sector_Travel & Tourism  Revenue_$1 to $5 million (USD)  \\\n","0                        0                               0   \n","1                        0                               0   \n","2                        0                               0   \n","3                        0                               0   \n","4                        0                               0   \n","\n","   Revenue_$10 to $25 million (USD)  Revenue_$10+ billion (USD)  \\\n","0                                 0                           0   \n","1                                 0                           0   \n","2                                 0                           0   \n","3                                 0                           0   \n","4                                 0                           0   \n","\n","   Revenue_$100 to $500 million (USD)  Revenue_$2 to $5 billion (USD)  \\\n","0                                   0                               0   \n","1                                   0                               1   \n","2                                   1                               0   \n","3                                   0                               0   \n","4                                   0                               0   \n","\n","   Revenue_$25 to $50 million (USD)  Revenue_$5 to $10 billion (USD)  \\\n","0                                 0                                0   \n","1                                 0                                0   \n","2                                 0                                0   \n","3                                 0                                0   \n","4                                 0                                0   \n","\n","   Revenue_$5 to $10 million (USD)  Revenue_$50 to $100 million (USD)  \\\n","0                                0                                  1   \n","1                                0                                  0   \n","2                                0                                  0   \n","3                                0                                  0   \n","4                                0                                  0   \n","\n","   Revenue_$500 million to $1 billion (USD)  \\\n","0                                         0   \n","1                                         0   \n","2                                         0   \n","3                                         1   \n","4                                         0   \n","\n","   Revenue_Less than $1 million (USD)  Revenue_Unknown / Non-Applicable  \\\n","0                                   0                                 0   \n","1                                   0                                 0   \n","2                                   0                                 0   \n","3                                   0                                 0   \n","4                                   0                                 1   \n","\n","   Job Location_AZ  Job Location_CA  Job Location_CO  Job Location_CT  \\\n","0                0                0                0                0   \n","1                0                0                0                0   \n","2                0                0                0                0   \n","3                0                0                0                0   \n","4                0                0                0                0   \n","\n","   Job Location_DC  Job Location_DE  Job Location_FL  Job Location_GA  \\\n","0                0                0                0                0   \n","1                0                0                0                0   \n","2                0                0                1                0   \n","3                0                0                0                0   \n","4                0                0                0                0   \n","\n","   Job Location_IA  Job Location_ID  Job Location_IL  Job Location_IN  \\\n","0                0                0                0                0   \n","1                0                0                0                0   \n","2                0                0                0                0   \n","3                0                0                0                0   \n","4                0                0                0                0   \n","\n","   Job Location_KS  Job Location_KY  Job Location_LA  Job Location_MA  \\\n","0                0                0                0                0   \n","1                0                0                0                0   \n","2                0                0                0                0   \n","3                0                0                0                0   \n","4                0                0                0                0   \n","\n","   Job Location_MD  Job Location_MI  Job Location_MN  Job Location_MO  \\\n","0                0                0                0                0   \n","1                1                0                0                0   \n","2                0                0                0                0   \n","3                0                0                0                0   \n","4                0                0                0                0   \n","\n","   Job Location_NC  Job Location_NE  Job Location_NJ  Job Location_NM  \\\n","0                0                0                0                1   \n","1                0                0                0                0   \n","2                0                0                0                0   \n","3                0                0                0                0   \n","4                0                0                0                0   \n","\n","   Job Location_NY  Job Location_OH  Job Location_OR  Job Location_PA  \\\n","0                0                0                0                0   \n","1                0                0                0                0   \n","2                0                0                0                0   \n","3                0                0                0                0   \n","4                1                0                0                0   \n","\n","   Job Location_RI  Job Location_SC  Job Location_TN  Job Location_TX  \\\n","0                0                0                0                0   \n","1                0                0                0                0   \n","2                0                0                0                0   \n","3                0                0                0                0   \n","4                0                0                0                0   \n","\n","   Job Location_UT  Job Location_VA  Job Location_WA  Job Location_WI  \\\n","0                0                0                0                0   \n","1                0                0                0                0   \n","2                0                0                0                0   \n","3                0                0                1                0   \n","4                0                0                0                0   \n","\n","   job_title_sim_analyst  job_title_sim_data analitics  \\\n","0                      0                             0   \n","1                      0                             0   \n","2                      0                             0   \n","3                      0                             0   \n","4                      0                             0   \n","\n","   job_title_sim_data engineer  job_title_sim_data modeler  \\\n","0                            0                           0   \n","1                            0                           0   \n","2                            0                           0   \n","3                            0                           0   \n","4                            0                           0   \n","\n","   job_title_sim_data scientist  job_title_sim_director  \\\n","0                             1                       0   \n","1                             1                       0   \n","2                             1                       0   \n","3                             1                       0   \n","4                             1                       0   \n","\n","   job_title_sim_machine learning engineer  job_title_sim_na  \\\n","0                                        0                 0   \n","1                                        0                 0   \n","2                                        0                 0   \n","3                                        0                 0   \n","4                                        0                 0   \n","\n","   job_title_sim_other scientist  seniority_by_title_na  \\\n","0                              0                      1   \n","1                              0                      1   \n","2                              0                      1   \n","3                              0                      1   \n","4                              0                      1   \n","\n","   seniority_by_title_sr  Degree_P  Degree_na  \n","0                      0         0          0  \n","1                      0         0          0  \n","2                      0         0          0  \n","3                      0         0          1  \n","4                      0         0          1  "],"text/html":["\n","  <div id=\"df-ae8c79a1-ea52-4e7e-a919-b75ed12cdb1f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Rating</th>\n","      <th>Founded</th>\n","      <th>Avg Salary(K)</th>\n","      <th>Age</th>\n","      <th>Python</th>\n","      <th>spark</th>\n","      <th>aws</th>\n","      <th>excel</th>\n","      <th>sql</th>\n","      <th>sas</th>\n","      <th>keras</th>\n","      <th>pytorch</th>\n","      <th>scikit</th>\n","      <th>tensor</th>\n","      <th>hadoop</th>\n","      <th>tableau</th>\n","      <th>bi</th>\n","      <th>flink</th>\n","      <th>mongo</th>\n","      <th>google_an</th>\n","      <th>Size_10000+</th>\n","      <th>Size_1001 - 5000</th>\n","      <th>Size_201 - 500</th>\n","      <th>Size_5001 - 10000</th>\n","      <th>Size_501 - 1000</th>\n","      <th>Size_51 - 200</th>\n","      <th>Size_unknown</th>\n","      <th>Type of ownership_Company - Private</th>\n","      <th>Type of ownership_Company - Public</th>\n","      <th>Type of ownership_Government</th>\n","      <th>Type of ownership_Hospital</th>\n","      <th>Type of ownership_Nonprofit Organization</th>\n","      <th>Type of ownership_Other Organization</th>\n","      <th>Type of ownership_School / School District</th>\n","      <th>Type of ownership_Subsidiary or Business Segment</th>\n","      <th>Sector_Aerospace &amp; Defense</th>\n","      <th>Sector_Agriculture &amp; Forestry</th>\n","      <th>Sector_Arts, Entertainment &amp; Recreation</th>\n","      <th>Sector_Biotech &amp; Pharmaceuticals</th>\n","      <th>Sector_Business Services</th>\n","      <th>Sector_Construction, Repair &amp; Maintenance</th>\n","      <th>Sector_Consumer Services</th>\n","      <th>Sector_Education</th>\n","      <th>Sector_Finance</th>\n","      <th>Sector_Government</th>\n","      <th>Sector_Health Care</th>\n","      <th>Sector_Information Technology</th>\n","      <th>Sector_Insurance</th>\n","      <th>Sector_Manufacturing</th>\n","      <th>Sector_Media</th>\n","      <th>Sector_Mining &amp; Metals</th>\n","      <th>Sector_Non-Profit</th>\n","      <th>Sector_Oil, Gas, Energy &amp; Utilities</th>\n","      <th>Sector_Real Estate</th>\n","      <th>Sector_Retail</th>\n","      <th>Sector_Telecommunications</th>\n","      <th>Sector_Transportation &amp; Logistics</th>\n","      <th>Sector_Travel &amp; Tourism</th>\n","      <th>Revenue_$1 to $5 million (USD)</th>\n","      <th>Revenue_$10 to $25 million (USD)</th>\n","      <th>Revenue_$10+ billion (USD)</th>\n","      <th>Revenue_$100 to $500 million (USD)</th>\n","      <th>Revenue_$2 to $5 billion (USD)</th>\n","      <th>Revenue_$25 to $50 million (USD)</th>\n","      <th>Revenue_$5 to $10 billion (USD)</th>\n","      <th>Revenue_$5 to $10 million (USD)</th>\n","      <th>Revenue_$50 to $100 million (USD)</th>\n","      <th>Revenue_$500 million to $1 billion (USD)</th>\n","      <th>Revenue_Less than $1 million (USD)</th>\n","      <th>Revenue_Unknown / Non-Applicable</th>\n","      <th>Job Location_AZ</th>\n","      <th>Job Location_CA</th>\n","      <th>Job Location_CO</th>\n","      <th>Job Location_CT</th>\n","      <th>Job Location_DC</th>\n","      <th>Job Location_DE</th>\n","      <th>Job Location_FL</th>\n","      <th>Job Location_GA</th>\n","      <th>Job Location_IA</th>\n","      <th>Job Location_ID</th>\n","      <th>Job Location_IL</th>\n","      <th>Job Location_IN</th>\n","      <th>Job Location_KS</th>\n","      <th>Job Location_KY</th>\n","      <th>Job Location_LA</th>\n","      <th>Job Location_MA</th>\n","      <th>Job Location_MD</th>\n","      <th>Job Location_MI</th>\n","      <th>Job Location_MN</th>\n","      <th>Job Location_MO</th>\n","      <th>Job Location_NC</th>\n","      <th>Job Location_NE</th>\n","      <th>Job Location_NJ</th>\n","      <th>Job Location_NM</th>\n","      <th>Job Location_NY</th>\n","      <th>Job Location_OH</th>\n","      <th>Job Location_OR</th>\n","      <th>Job Location_PA</th>\n","      <th>Job Location_RI</th>\n","      <th>Job Location_SC</th>\n","      <th>Job Location_TN</th>\n","      <th>Job Location_TX</th>\n","      <th>Job Location_UT</th>\n","      <th>Job Location_VA</th>\n","      <th>Job Location_WA</th>\n","      <th>Job Location_WI</th>\n","      <th>job_title_sim_analyst</th>\n","      <th>job_title_sim_data analitics</th>\n","      <th>job_title_sim_data engineer</th>\n","      <th>job_title_sim_data modeler</th>\n","      <th>job_title_sim_data scientist</th>\n","      <th>job_title_sim_director</th>\n","      <th>job_title_sim_machine learning engineer</th>\n","      <th>job_title_sim_na</th>\n","      <th>job_title_sim_other scientist</th>\n","      <th>seniority_by_title_na</th>\n","      <th>seniority_by_title_sr</th>\n","      <th>Degree_P</th>\n","      <th>Degree_na</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3.8</td>\n","      <td>1973.0</td>\n","      <td>72.0</td>\n","      <td>48.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3.4</td>\n","      <td>1984.0</td>\n","      <td>87.5</td>\n","      <td>37.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.8</td>\n","      <td>2010.0</td>\n","      <td>85.0</td>\n","      <td>35.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3.8</td>\n","      <td>1965.0</td>\n","      <td>76.5</td>\n","      <td>56.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.9</td>\n","      <td>1998.0</td>\n","      <td>114.5</td>\n","      <td>23.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae8c79a1-ea52-4e7e-a919-b75ed12cdb1f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ae8c79a1-ea52-4e7e-a919-b75ed12cdb1f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ae8c79a1-ea52-4e7e-a919-b75ed12cdb1f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":114}],"source":["# concatenate the numerical and dummy encoded categorical variables column-wise\n","df_dummy = pd.concat([df_numeric, dummy_encoded_variables], axis=1)\n","\n","# display data with dummy variables\n","df_dummy.head()"]},{"cell_type":"code","execution_count":null,"id":"14238cf7","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:30.694325Z","iopub.status.busy":"2022-02-25T05:57:30.693339Z","iopub.status.idle":"2022-02-25T05:57:30.717237Z","shell.execute_reply":"2022-02-25T05:57:30.717707Z","shell.execute_reply.started":"2022-02-23T19:51:03.848428Z"},"papermill":{"duration":0.311204,"end_time":"2022-02-25T05:57:30.717913","exception":false,"start_time":"2022-02-25T05:57:30.406709","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"14238cf7","executionInfo":{"status":"ok","timestamp":1647309331930,"user_tz":-330,"elapsed":195,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"84a4aead-d5da-4615-8452-eaa3bcabec03"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/tsatools.py:117: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n","  x = pd.concat(x[::order], 1)\n"]}],"source":["# add the intercept column using 'add_constant()'\n","df_dummy = sm.add_constant(df_dummy)\n","\n","# separate the independent and dependent variables\n","# drop(): drops the specified columns\n","X = df_dummy.drop([\"Avg Salary(K)\"], axis = 1)\n","\n","# extract the target variable from the data set\n","y = df_dummy[[\"Avg Salary(K)\"]]\n"]},{"cell_type":"code","execution_count":null,"id":"7e902f11","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:31.292125Z","iopub.status.busy":"2022-02-25T05:57:31.291109Z","iopub.status.idle":"2022-02-25T05:57:31.298486Z","shell.execute_reply":"2022-02-25T05:57:31.299001Z","shell.execute_reply.started":"2022-02-23T19:51:03.873526Z"},"papermill":{"duration":0.298793,"end_time":"2022-02-25T05:57:31.299170","exception":false,"start_time":"2022-02-25T05:57:31.000377","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"7e902f11","executionInfo":{"status":"ok","timestamp":1647309331932,"user_tz":-330,"elapsed":188,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"21913ea1-e359-446c-a191-a81e55989dda"},"outputs":[{"output_type":"stream","name":"stdout","text":["The shape of X_train is: (593, 119)\n","The shape of X_test is: (149, 119)\n","The shape of y_train is: (593, 1)\n","The shape of y_test is: (149, 1)\n"]}],"source":["# split data into train data and test data \n","# what proportion of data should be included in test data is passed using 'test_size'\n","# set 'random_state' to get the same data each time the code is executed \n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)\n","\n","# check the dimensions of the train & test subset for\n","print(\"The shape of X_train is:\",X_train.shape)\n","print(\"The shape of X_test is:\",X_test.shape)\n","print(\"The shape of y_train is:\",y_train.shape)\n","print(\"The shape of y_test is:\",y_test.shape)"]},{"cell_type":"markdown","id":"dc0edee4","metadata":{"papermill":{"duration":0.304879,"end_time":"2022-02-25T05:57:31.907578","exception":false,"start_time":"2022-02-25T05:57:31.602699","status":"completed"},"tags":[],"id":"dc0edee4"},"source":["# 1.OLS"]},{"cell_type":"code","execution_count":null,"id":"bd565ebe","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:32.525019Z","iopub.status.busy":"2022-02-25T05:57:32.522356Z","iopub.status.idle":"2022-02-25T05:57:32.665831Z","shell.execute_reply":"2022-02-25T05:57:32.666794Z","shell.execute_reply.started":"2022-02-23T19:51:03.884787Z"},"papermill":{"duration":0.445548,"end_time":"2022-02-25T05:57:32.667082","exception":false,"start_time":"2022-02-25T05:57:32.221534","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"bd565ebe","executionInfo":{"status":"ok","timestamp":1647309332714,"user_tz":-330,"elapsed":964,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"ede6f1d2-d274-405d-fb82-328229d58824"},"outputs":[{"output_type":"stream","name":"stdout","text":["                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:          Avg Salary(K)   R-squared:                       0.664\n","Model:                            OLS   Adj. R-squared:                  0.581\n","Method:                 Least Squares   F-statistic:                     8.030\n","Date:                Tue, 15 Mar 2022   Prob (F-statistic):           1.77e-61\n","Time:                        07:25:31   Log-Likelihood:                -2667.2\n","No. Observations:                 593   AIC:                             5570.\n","Df Residuals:                     475   BIC:                             6088.\n","Df Model:                         117                                         \n","Covariance Type:            nonrobust                                         \n","====================================================================================================================\n","                                                       coef    std err          t      P>|t|      [0.025      0.975]\n","--------------------------------------------------------------------------------------------------------------------\n","const                                              148.7395     93.825      1.585      0.114     -35.625     333.104\n","Rating                                               4.0903      2.446      1.672      0.095      -0.716       8.897\n","Founded                                             -0.0387      0.039     -0.982      0.327      -0.116       0.039\n","Age                                                 -0.0387      0.137     -0.282      0.778      -0.308       0.231\n","Python                                               9.4747      2.933      3.231      0.001       3.712      15.238\n","spark                                               -0.5882      3.877     -0.152      0.879      -8.206       7.030\n","aws                                                  0.1194      3.090      0.039      0.969      -5.953       6.191\n","excel                                                1.2484      2.555      0.489      0.625      -3.772       6.269\n","sql                                                 -4.0134      3.194     -1.256      0.210     -10.290       2.263\n","sas                                                 11.3892      4.545      2.506      0.013       2.458      20.320\n","keras                                               22.3132      8.146      2.739      0.006       6.307      38.320\n","pytorch                                            -16.0946      7.287     -2.209      0.028     -30.413      -1.776\n","scikit                                              -0.1750      5.911     -0.030      0.976     -11.789      11.439\n","tensor                                               5.8682      6.833      0.859      0.391      -7.559      19.295\n","hadoop                                               2.4558      4.114      0.597      0.551      -5.629      10.540\n","tableau                                             -6.8491      3.813     -1.796      0.073     -14.342       0.643\n","bi                                                  10.7243      5.371      1.997      0.046       0.170      21.279\n","flink                                               -8.7288     11.317     -0.771      0.441     -30.967      13.509\n","mongo                                               12.8862      5.669      2.273      0.023       1.747      24.025\n","google_an                                          -19.6254     11.877     -1.652      0.099     -42.963       3.713\n","Size_10000+                                         -2.5048      9.893     -0.253      0.800     -21.944      16.934\n","Size_1001 - 5000                                     1.3668      8.395      0.163      0.871     -15.129      17.863\n","Size_201 - 500                                      -5.3725      8.037     -0.668      0.504     -21.165      10.420\n","Size_5001 - 10000                                  -12.1539      9.718     -1.251      0.212     -31.249       6.941\n","Size_501 - 1000                                     -6.5012      8.083     -0.804      0.422     -22.384       9.381\n","Size_51 - 200                                        3.6367      7.709      0.472      0.637     -11.512      18.785\n","Size_unknown                                        15.7521     13.586      1.159      0.247     -10.943      42.447\n","Type of ownership_Company - Private                -10.1586     16.324     -0.622      0.534     -42.235      21.918\n","Type of ownership_Company - Public                  -5.2453     16.750     -0.313      0.754     -38.160      27.669\n","Type of ownership_Government                       -18.1834     25.037     -0.726      0.468     -67.380      31.013\n","Type of ownership_Hospital                         -51.8603     20.160     -2.572      0.010     -91.475     -12.246\n","Type of ownership_Nonprofit Organization           -28.2275     16.665     -1.694      0.091     -60.974       4.519\n","Type of ownership_Other Organization               -16.7668     22.112     -0.758      0.449     -60.217      26.683\n","Type of ownership_School / School District          -5.1166     28.498     -0.180      0.858     -61.114      50.881\n","Type of ownership_Subsidiary or Business Segment    -6.9172     16.919     -0.409      0.683     -40.163      26.328\n","Sector_Aerospace & Defense                           3.1915     35.657      0.090      0.929     -66.873      73.256\n","Sector_Agriculture & Forestry                       -4.7076     44.546     -0.106      0.916     -92.239      82.824\n","Sector_Arts, Entertainment & Recreation            -15.9957     40.111     -0.399      0.690     -94.812      62.821\n","Sector_Biotech & Pharmaceuticals                    -1.6812     35.166     -0.048      0.962     -70.781      67.419\n","Sector_Business Services                            -6.9353     35.044     -0.198      0.843     -75.795      61.925\n","Sector_Construction, Repair & Maintenance          -28.9387     40.061     -0.722      0.470    -107.657      49.780\n","Sector_Consumer Services                            -9.1752     38.094     -0.241      0.810     -84.029      65.678\n","Sector_Education                                   -15.8105     36.703     -0.431      0.667     -87.931      56.310\n","Sector_Finance                                      -6.7836     35.208     -0.193      0.847     -75.967      62.399\n","Sector_Government                                   -7.2696     36.980     -0.197      0.844     -79.935      65.396\n","Sector_Health Care                                   8.2406     35.442      0.233      0.816     -61.402      77.883\n","Sector_Information Technology                        1.7609     34.747      0.051      0.960     -66.516      70.037\n","Sector_Insurance                                    -2.0082     35.202     -0.057      0.955     -71.178      67.162\n","Sector_Manufacturing                               -12.2936     35.619     -0.345      0.730     -82.283      57.696\n","Sector_Media                                        -2.1822     37.262     -0.059      0.953     -75.401      71.037\n","Sector_Mining & Metals                           -5.139e-15   2.78e-14     -0.185      0.853   -5.97e-14    4.94e-14\n","Sector_Non-Profit                                   -3.8245     38.497     -0.099      0.921     -79.470      71.821\n","Sector_Oil, Gas, Energy & Utilities                -19.2129     40.178     -0.478      0.633     -98.162      59.736\n","Sector_Real Estate                                 -18.6568     36.495     -0.511      0.609     -90.368      53.055\n","Sector_Retail                                       12.4608     36.005      0.346      0.729     -58.289      83.210\n","Sector_Telecommunications                          -17.6027     37.058     -0.475      0.635     -90.421      55.215\n","Sector_Transportation & Logistics                  -12.5302     37.881     -0.331      0.741     -86.965      61.905\n","Sector_Travel & Tourism                            -17.5469     36.815     -0.477      0.634     -89.888      54.794\n","Revenue_$1 to $5 million (USD)                     -42.3280     14.890     -2.843      0.005     -71.587     -13.069\n","Revenue_$10 to $25 million (USD)                   -16.9695      8.220     -2.064      0.040     -33.121      -0.818\n","Revenue_$10+ billion (USD)                           5.5530      7.591      0.732      0.465      -9.362      20.468\n","Revenue_$100 to $500 million (USD)                  -6.2638      6.170     -1.015      0.311     -18.387       5.860\n","Revenue_$2 to $5 billion (USD)                      -8.5917      7.328     -1.172      0.242     -22.991       5.808\n","Revenue_$25 to $50 million (USD)                    -4.0665      8.648     -0.470      0.638     -21.060      12.927\n","Revenue_$5 to $10 billion (USD)                     -8.9595      9.447     -0.948      0.343     -27.523       9.604\n","Revenue_$5 to $10 million (USD)                     24.9243     10.782      2.312      0.021       3.738      46.111\n","Revenue_$50 to $100 million (USD)                    7.7486      7.229      1.072      0.284      -6.456      21.953\n","Revenue_$500 million to $1 billion (USD)            -4.5869      7.317     -0.627      0.531     -18.965       9.791\n","Revenue_Less than $1 million (USD)                 -16.9158     26.532     -0.638      0.524     -69.050      35.219\n","Revenue_Unknown / Non-Applicable                    -0.8185      5.965     -0.137      0.891     -12.540      10.903\n","Job Location_AZ                                     -0.5714     15.560     -0.037      0.971     -31.146      30.004\n","Job Location_CA                                     52.0821     12.612      4.129      0.000      27.299      76.865\n","Job Location_CO                                     51.8717     17.950      2.890      0.004      16.601      87.143\n","Job Location_CT                                     13.5067     18.475      0.731      0.465     -22.797      49.810\n","Job Location_DC                                     47.3334     15.150      3.124      0.002      17.564      77.102\n","Job Location_DE                                     13.8465     21.195      0.653      0.514     -27.802      55.495\n","Job Location_FL                                     17.2190     14.150      1.217      0.224     -10.585      45.023\n","Job Location_GA                                     -3.0143     19.631     -0.154      0.878     -41.589      35.560\n","Job Location_IA                                     28.8542     18.519      1.558      0.120      -7.536      65.244\n","Job Location_ID                                     17.2390     22.124      0.779      0.436     -26.234      60.712\n","Job Location_IL                                     38.4260     13.487      2.849      0.005      11.924      64.929\n","Job Location_IN                                      6.7661     15.509      0.436      0.663     -23.709      37.241\n","Job Location_KS                                     -6.5171     22.847     -0.285      0.776     -51.410      38.376\n","Job Location_KY                                     62.9859     18.502      3.404      0.001      26.630      99.341\n","Job Location_LA                                      7.3989     23.912      0.309      0.757     -39.588      54.386\n","Job Location_MA                                     28.7133     13.085      2.194      0.029       3.001      54.426\n","Job Location_MD                                     29.1927     12.800      2.281      0.023       4.041      54.344\n","Job Location_MI                                     38.9148     17.080      2.278      0.023       5.353      72.476\n","Job Location_MN                                     40.8447     28.054      1.456      0.146     -14.281      95.970\n","Job Location_MO                                     26.1294     16.483      1.585      0.114      -6.260      58.519\n","Job Location_NC                                     28.6658     14.924      1.921      0.055      -0.660      57.991\n","Job Location_NE                                      3.8944     29.121      0.134      0.894     -53.328      61.117\n","Job Location_NJ                                     49.9844     14.641      3.414      0.001      21.215      78.754\n","Job Location_NM                                      2.3654     23.054      0.103      0.918     -42.935      47.666\n","Job Location_NY                                     31.3837     13.067      2.402      0.017       5.707      57.060\n","Job Location_OH                                     30.9401     14.776      2.094      0.037       1.905      59.975\n","Job Location_OR                                     14.3001     18.462      0.775      0.439     -21.976      50.576\n","Job Location_PA                                     22.4647     14.502      1.549      0.122      -6.032      50.962\n","Job Location_RI                                     53.4834     29.992      1.783      0.075      -5.450     112.417\n","Job Location_SC                                     15.9909     27.851      0.574      0.566     -38.736      70.718\n","Job Location_TN                                     -2.2332     15.274     -0.146      0.884     -32.247      27.780\n","Job Location_TX                                     20.3211     13.843      1.468      0.143      -6.880      47.522\n","Job Location_UT                                     50.8401     19.371      2.625      0.009      12.777      88.904\n","Job Location_VA                                     24.2336     12.902      1.878      0.061      -1.118      49.585\n","Job Location_WA                                     32.8728     16.300      2.017      0.044       0.844      64.901\n","Job Location_WI                                     18.9852     15.833      1.199      0.231     -12.127      50.097\n","job_title_sim_analyst                               -3.3998      8.093     -0.420      0.675     -19.302      12.502\n","job_title_sim_data analitics                        -9.6061     13.851     -0.694      0.488     -36.823      17.611\n","job_title_sim_data engineer                         23.3582      8.481      2.754      0.006       6.694      40.023\n","job_title_sim_data modeler                          10.6299     14.695      0.723      0.470     -18.246      39.506\n","job_title_sim_data scientist                        29.3069      7.873      3.722      0.000      13.837      44.777\n","job_title_sim_director                              52.7064     14.626      3.604      0.000      23.967      81.446\n","job_title_sim_machine learning engineer             54.3826     11.748      4.629      0.000      31.298      77.467\n","job_title_sim_na                                     3.5248     13.136      0.268      0.789     -22.287      29.337\n","job_title_sim_other scientist                       13.5043      8.390      1.610      0.108      -2.981      29.990\n","seniority_by_title_na                              -36.4516     26.633     -1.369      0.172     -88.784      15.881\n","seniority_by_title_sr                               -9.5351     26.691     -0.357      0.721     -61.983      42.912\n","Degree_P                                             9.9377      4.295      2.314      0.021       1.498      18.377\n","Degree_na                                            3.9571      2.855      1.386      0.166      -1.653       9.567\n","==============================================================================\n","Omnibus:                       74.580   Durbin-Watson:                   1.968\n","Prob(Omnibus):                  0.000   Jarque-Bera (JB):              202.068\n","Skew:                           0.631   Prob(JB):                     1.32e-44\n","Kurtosis:                       5.566   Cond. No.                     1.15e+16\n","==============================================================================\n","\n","Warnings:\n","[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n","[2] The smallest eigenvalue is 1.75e-23. This might indicate that there are\n","strong multicollinearity problems or that the design matrix is singular.\n"]}],"source":["# build a full model using OLS()\n","# consider the log of sales price as the target variable\n","# use fit() to fit the model on train data\n","linreg_full = sm.OLS(y_train, X_train).fit()\n","\n","# print the summary output\n","print(linreg_full.summary())"]},{"cell_type":"code","execution_count":null,"id":"a0a8ccfa","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:33.298260Z","iopub.status.busy":"2022-02-25T05:57:33.297109Z","iopub.status.idle":"2022-02-25T05:57:33.308550Z","shell.execute_reply":"2022-02-25T05:57:33.309603Z","shell.execute_reply.started":"2022-02-23T19:51:04.018469Z"},"papermill":{"duration":0.322775,"end_time":"2022-02-25T05:57:33.309906","exception":false,"start_time":"2022-02-25T05:57:32.987131","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"a0a8ccfa","executionInfo":{"status":"ok","timestamp":1647309332717,"user_tz":-330,"elapsed":214,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"c005d037-f82b-4f46-e8b3-66e2e7ac81da"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["273    148.847103\n","414     53.788741\n","529    121.603410\n","502     95.058485\n","729     83.534683\n","          ...    \n","247    105.052204\n","341    102.990642\n","298    138.561082\n","132     91.606199\n","656    128.582070\n","Length: 149, dtype: float64"]},"metadata":{},"execution_count":118}],"source":["linreg_full_predictions = linreg_full.predict(X_test)\n","linreg_full_predictions"]},{"cell_type":"code","execution_count":null,"id":"b7750f6c","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:33.941014Z","iopub.status.busy":"2022-02-25T05:57:33.940112Z","iopub.status.idle":"2022-02-25T05:57:33.943427Z","shell.execute_reply":"2022-02-25T05:57:33.943964Z","shell.execute_reply.started":"2022-02-23T19:51:04.034907Z"},"papermill":{"duration":0.296938,"end_time":"2022-02-25T05:57:33.944136","exception":false,"start_time":"2022-02-25T05:57:33.647198","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"b7750f6c","executionInfo":{"status":"ok","timestamp":1647309332720,"user_tz":-330,"elapsed":212,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"0ac5bc1c-1860-4ca0-9889-8e525ff85c65"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["273     90.0\n","414     62.5\n","529    125.0\n","502     97.5\n","729     70.0\n","       ...  \n","247     50.0\n","341    111.5\n","298    162.5\n","132     81.5\n","656    114.0\n","Name: Avg Salary(K), Length: 149, dtype: float64"]},"metadata":{},"execution_count":119}],"source":["actual_salary = y_test[\"Avg Salary(K)\"]\n","actual_salary"]},{"cell_type":"code","execution_count":null,"id":"2579edac","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:34.523558Z","iopub.status.busy":"2022-02-25T05:57:34.522480Z","iopub.status.idle":"2022-02-25T05:57:34.526784Z","shell.execute_reply":"2022-02-25T05:57:34.527371Z","shell.execute_reply.started":"2022-02-23T19:51:04.047682Z"},"papermill":{"duration":0.297583,"end_time":"2022-02-25T05:57:34.527556","exception":false,"start_time":"2022-02-25T05:57:34.229973","status":"completed"},"tags":[],"id":"2579edac"},"outputs":[],"source":["# calculate rmse using rmse()\n","linreg_full_rmse = rmse(actual_salary,linreg_full_predictions )\n","\n","# calculate R-squared using rsquared\n","linreg_full_rsquared = linreg_full.rsquared\n","\n","# calculate Adjusted R-Squared using rsquared_adj\n","linreg_full_rsquared_adj = linreg_full.rsquared_adj "]},{"cell_type":"code","execution_count":null,"id":"9884cb9d","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:35.104499Z","iopub.status.busy":"2022-02-25T05:57:35.103426Z","iopub.status.idle":"2022-02-25T05:57:35.120166Z","shell.execute_reply":"2022-02-25T05:57:35.120620Z","shell.execute_reply.started":"2022-02-23T19:51:04.055687Z"},"papermill":{"duration":0.306232,"end_time":"2022-02-25T05:57:35.120810","exception":false,"start_time":"2022-02-25T05:57:34.814578","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"9884cb9d","executionInfo":{"status":"ok","timestamp":1647309332724,"user_tz":-330,"elapsed":191,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"a37fdfc5-c505-40f7-ef51-0c0515c87304"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                Model       RMSE  R-Squared  Adj. R-Squared\n","0  Linreg full model   28.337711   0.664193        0.581478"],"text/html":["\n","  <div id=\"df-66912ef6-2c12-4cd0-8a22-7698fa40beb0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>RMSE</th>\n","      <th>R-Squared</th>\n","      <th>Adj. R-Squared</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Linreg full model</td>\n","      <td>28.337711</td>\n","      <td>0.664193</td>\n","      <td>0.581478</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-66912ef6-2c12-4cd0-8a22-7698fa40beb0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-66912ef6-2c12-4cd0-8a22-7698fa40beb0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-66912ef6-2c12-4cd0-8a22-7698fa40beb0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":121}],"source":["# create the result table for all accuracy scores\n","# accuracy measures considered for model comparision are RMSE, R-squared value and Adjusted R-squared value\n","# create a list of column names\n","cols = ['Model', 'RMSE', 'R-Squared', 'Adj. R-Squared']\n","\n","# create a empty dataframe of the colums\n","# columns: specifies the columns to be selected\n","result_tabulation = pd.DataFrame(columns = cols)\n","\n","# compile the required information\n","linreg_full_metrics = pd.Series({'Model': \"Linreg full model \",\n","                     'RMSE':linreg_full_rmse,\n","                     'R-Squared': linreg_full_rsquared,\n","                     'Adj. R-Squared': linreg_full_rsquared_adj     \n","                   })\n","\n","# append our result table using append()\n","# ignore_index=True: does not use the index labels\n","# python can only append a Series if ignore_index=True or if the Series has a name\n","result_tabulation = result_tabulation.append(linreg_full_metrics, ignore_index = True)\n","\n","# print the result table\n","result_tabulation"]},{"cell_type":"markdown","id":"080716a0","metadata":{"papermill":{"duration":0.287835,"end_time":"2022-02-25T05:57:35.695936","exception":false,"start_time":"2022-02-25T05:57:35.408101","status":"completed"},"tags":[],"id":"080716a0"},"source":["# 2.Linear Regression with SGD"]},{"cell_type":"code","execution_count":null,"id":"82589817","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:36.275489Z","iopub.status.busy":"2022-02-25T05:57:36.274814Z","iopub.status.idle":"2022-02-25T05:57:36.359280Z","shell.execute_reply":"2022-02-25T05:57:36.358636Z","shell.execute_reply.started":"2022-02-23T19:51:04.086884Z"},"papermill":{"duration":0.376052,"end_time":"2022-02-25T05:57:36.359439","exception":false,"start_time":"2022-02-25T05:57:35.983387","status":"completed"},"tags":[],"id":"82589817"},"outputs":[],"source":["# importing library min max scaler to scale data\n","from sklearn.preprocessing import MinMaxScaler\n","#import library for implement Linear Regression\n","from sklearn.linear_model import SGDRegressor \n","from sklearn.metrics import mean_squared_error\n","from math import sqrt\n","from sklearn.preprocessing import StandardScaler\n"]},{"cell_type":"code","execution_count":null,"id":"7fd6bded","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:36.936766Z","iopub.status.busy":"2022-02-25T05:57:36.935732Z","iopub.status.idle":"2022-02-25T05:57:36.938617Z","shell.execute_reply":"2022-02-25T05:57:36.938124Z","shell.execute_reply.started":"2022-02-23T19:51:04.180738Z"},"papermill":{"duration":0.293313,"end_time":"2022-02-25T05:57:36.938780","exception":false,"start_time":"2022-02-25T05:57:36.645467","status":"completed"},"tags":[],"id":"7fd6bded"},"outputs":[],"source":["scaler= StandardScaler()"]},{"cell_type":"code","execution_count":null,"id":"831acce9","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:37.519424Z","iopub.status.busy":"2022-02-25T05:57:37.518378Z","iopub.status.idle":"2022-02-25T05:57:37.529567Z","shell.execute_reply":"2022-02-25T05:57:37.530104Z","shell.execute_reply.started":"2022-02-23T19:51:04.188312Z"},"papermill":{"duration":0.303253,"end_time":"2022-02-25T05:57:37.530289","exception":false,"start_time":"2022-02-25T05:57:37.227036","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"831acce9","executionInfo":{"status":"ok","timestamp":1647309332736,"user_tz":-330,"elapsed":185,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"3938a36d-58c4-4479-e849-f94b3237c65d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["StandardScaler()"]},"metadata":{},"execution_count":124}],"source":["scaler.fit(X)"]},{"cell_type":"code","execution_count":null,"id":"9d1fe241","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:38.113140Z","iopub.status.busy":"2022-02-25T05:57:38.112459Z","iopub.status.idle":"2022-02-25T05:57:38.120549Z","shell.execute_reply":"2022-02-25T05:57:38.119951Z","shell.execute_reply.started":"2022-02-23T19:51:04.205755Z"},"papermill":{"duration":0.301731,"end_time":"2022-02-25T05:57:38.120700","exception":false,"start_time":"2022-02-25T05:57:37.818969","status":"completed"},"tags":[],"id":"9d1fe241"},"outputs":[],"source":["X1= scaler.fit_transform(X)"]},{"cell_type":"code","execution_count":null,"id":"747b4f7e","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:38.723458Z","iopub.status.busy":"2022-02-25T05:57:38.722470Z","iopub.status.idle":"2022-02-25T05:57:38.729216Z","shell.execute_reply":"2022-02-25T05:57:38.729810Z","shell.execute_reply.started":"2022-02-23T19:51:04.220734Z"},"papermill":{"duration":0.318815,"end_time":"2022-02-25T05:57:38.729984","exception":false,"start_time":"2022-02-25T05:57:38.411169","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"747b4f7e","executionInfo":{"status":"ok","timestamp":1647309332786,"user_tz":-330,"elapsed":227,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"04988831-024d-4f54-b20f-195a1b826452"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0.        ,  0.19731918,  0.02945032, ..., -0.64919638,\n","        -0.41049231, -1.03288546],\n","       [ 0.        , -0.50974121,  0.23901746, ..., -0.64919638,\n","        -0.41049231, -1.03288546],\n","       [ 0.        ,  1.96497014,  0.73435796, ..., -0.64919638,\n","        -0.41049231, -1.03288546],\n","       ...,\n","       [ 0.        , -1.92386197,  0.23901746, ..., -0.64919638,\n","         2.43609923, -1.03288546],\n","       [ 0.        , -0.8632714 ,  0.39142992, ..., -0.64919638,\n","        -0.41049231,  0.96816156],\n","       [ 0.        , -0.15621101, -0.08485903, ..., -0.64919638,\n","        -0.41049231, -1.03288546]])"]},"metadata":{},"execution_count":126}],"source":["X1"]},{"cell_type":"code","execution_count":null,"id":"95ae3fd7","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:39.318227Z","iopub.status.busy":"2022-02-25T05:57:39.317501Z","iopub.status.idle":"2022-02-25T05:57:39.321891Z","shell.execute_reply":"2022-02-25T05:57:39.321282Z","shell.execute_reply.started":"2022-02-23T19:51:04.233792Z"},"papermill":{"duration":0.295788,"end_time":"2022-02-25T05:57:39.322075","exception":false,"start_time":"2022-02-25T05:57:39.026287","status":"completed"},"tags":[],"id":"95ae3fd7"},"outputs":[],"source":["y1=y"]},{"cell_type":"code","execution_count":null,"id":"4e91d803","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:39.965693Z","iopub.status.busy":"2022-02-25T05:57:39.964679Z","iopub.status.idle":"2022-02-25T05:57:39.975562Z","shell.execute_reply":"2022-02-25T05:57:39.976228Z","shell.execute_reply.started":"2022-02-23T19:51:04.247387Z"},"papermill":{"duration":0.327233,"end_time":"2022-02-25T05:57:39.976408","exception":false,"start_time":"2022-02-25T05:57:39.649175","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"4e91d803","executionInfo":{"status":"ok","timestamp":1647309332790,"user_tz":-330,"elapsed":224,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"36f68b95-839b-424c-aedb-33819181ea90"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Avg Salary(K)\n","0             72.0\n","1             87.5\n","2             85.0\n","3             76.5\n","4            114.5\n","..             ...\n","737           84.5\n","738          102.5\n","739           73.5\n","740          127.5\n","741           93.5\n","\n","[742 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-bd14818a-a486-43f1-93c6-6631c6d49ffa\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Avg Salary(K)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>72.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>87.5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>85.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>76.5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>114.5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>737</th>\n","      <td>84.5</td>\n","    </tr>\n","    <tr>\n","      <th>738</th>\n","      <td>102.5</td>\n","    </tr>\n","    <tr>\n","      <th>739</th>\n","      <td>73.5</td>\n","    </tr>\n","    <tr>\n","      <th>740</th>\n","      <td>127.5</td>\n","    </tr>\n","    <tr>\n","      <th>741</th>\n","      <td>93.5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>742 rows × 1 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd14818a-a486-43f1-93c6-6631c6d49ffa')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-bd14818a-a486-43f1-93c6-6631c6d49ffa button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-bd14818a-a486-43f1-93c6-6631c6d49ffa');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":128}],"source":["y1"]},{"cell_type":"code","execution_count":null,"id":"ffaebc16","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:40.574182Z","iopub.status.busy":"2022-02-25T05:57:40.573279Z","iopub.status.idle":"2022-02-25T05:57:40.581674Z","shell.execute_reply":"2022-02-25T05:57:40.582290Z","shell.execute_reply.started":"2022-02-23T19:51:04.265713Z"},"papermill":{"duration":0.31119,"end_time":"2022-02-25T05:57:40.582484","exception":false,"start_time":"2022-02-25T05:57:40.271294","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"ffaebc16","executionInfo":{"status":"ok","timestamp":1647309332795,"user_tz":-330,"elapsed":224,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"e6a2b3a4-3951-41e8-8e9f-55663f86a23e"},"outputs":[{"output_type":"stream","name":"stdout","text":["The shape of X1_train is: (593, 119)\n","The shape of X1_test is: (149, 119)\n","The shape of y1_train is: (593, 1)\n","The shape of y1_test is: (149, 1)\n"]}],"source":["# split data into train data and test data \n","# what proportion of data should be included in test data is passed using 'test_size'\n","# set 'random_state' to get the same data each time the code is executed \n","X1_train, X1_test, y1_train, y1_test = train_test_split(X1, y1, test_size = 0.2, random_state = 1)\n","\n","# check the dimensions of the train & test subset for \n","# print dimension of predictors train set\n","print(\"The shape of X1_train is:\",X1_train.shape)\n","\n","# print dimension of predictors test set\n","print(\"The shape of X1_test is:\",X1_test.shape)\n","\n","# print dimension of target train set\n","print(\"The shape of y1_train is:\",y1_train.shape)\n","\n","# print dimension of target test set\n","print(\"The shape of y1_test is:\",y1_test.shape)"]},{"cell_type":"code","execution_count":null,"id":"436502b4","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:41.189983Z","iopub.status.busy":"2022-02-25T05:57:41.189314Z","iopub.status.idle":"2022-02-25T05:57:41.217492Z","shell.execute_reply":"2022-02-25T05:57:41.218049Z","shell.execute_reply.started":"2022-02-23T19:51:04.277086Z"},"papermill":{"duration":0.331541,"end_time":"2022-02-25T05:57:41.218221","exception":false,"start_time":"2022-02-25T05:57:40.886680","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"436502b4","executionInfo":{"status":"ok","timestamp":1647309332798,"user_tz":-330,"elapsed":224,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"5df392ae-0d33-4f78-c353-2376a4ac55f4"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_stochastic_gradient.py:169: FutureWarning: The loss 'squared_loss' was deprecated in v1.0 and will be removed in version 1.2. Use `loss='squared_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["SGDRegressor(alpha=0.1, loss='squared_loss', max_iter=3000)"]},"metadata":{},"execution_count":130}],"source":["# build the model\n","SGD_model = SGDRegressor(loss=\"squared_loss\",alpha = 0.1, max_iter = 3000) #Instantiation\n","\n","# fit the model\n","SGD_model.fit(X1_train, y1_train) #Training"]},{"cell_type":"code","execution_count":null,"id":"748d9942","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:41.834354Z","iopub.status.busy":"2022-02-25T05:57:41.830934Z","iopub.status.idle":"2022-02-25T05:57:41.835561Z","shell.execute_reply":"2022-02-25T05:57:41.836414Z","shell.execute_reply.started":"2022-02-23T19:51:04.30711Z"},"papermill":{"duration":0.304132,"end_time":"2022-02-25T05:57:41.836691","exception":false,"start_time":"2022-02-25T05:57:41.532559","status":"completed"},"tags":[],"id":"748d9942"},"outputs":[],"source":["# predict the values\n","y1_pred_SGD  = SGD_model.predict(X1_test)"]},{"cell_type":"code","execution_count":null,"id":"ceeefbb5","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:42.475918Z","iopub.status.busy":"2022-02-25T05:57:42.475252Z","iopub.status.idle":"2022-02-25T05:57:42.477770Z","shell.execute_reply":"2022-02-25T05:57:42.478330Z","shell.execute_reply.started":"2022-02-23T19:51:04.322981Z"},"papermill":{"duration":0.298897,"end_time":"2022-02-25T05:57:42.478493","exception":false,"start_time":"2022-02-25T05:57:42.179596","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"ceeefbb5","executionInfo":{"status":"ok","timestamp":1647309332809,"user_tz":-330,"elapsed":221,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"de116175-cd0a-4239-9e95-d5dbd22727b2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([146.61153187,  75.18325323, 122.79676605,  87.15974398,\n","        82.31693681,  80.80807507,  90.2431155 ,  67.23722468,\n","        57.66699477,  67.08023587,  88.17588187,  87.80887769,\n","        63.40666747,  86.117828  , 107.44723939,  56.38266901,\n","        88.71424602,  55.85951092,  82.21817122, 103.40678797,\n","       114.36583267,  65.22237485, 136.85693032, 108.04480159,\n","        70.17402501, 105.24506451,  91.75040624, 114.31489284,\n","        81.84064879, 145.20229333, 105.34803705,  50.76984897,\n","       151.68722435,  90.18436861, 128.74635393,  95.44373357,\n","        47.16566725,  44.91985469, 105.92300415, 132.57011609,\n","       102.69379377,  49.31620709, 125.26503433,  97.15424476,\n","        87.7643752 ,  96.36610183,  55.85951092, 147.84371585,\n","        94.00347129,  64.38789982,  54.15267993, 132.57011609,\n","        92.59205297, 120.59805408,  94.88852004, 122.79676605,\n","        55.7013157 , 141.57123805, 115.95833944,  84.66938218,\n","       137.99002679, 103.13637215,  38.95131055,  48.79306381,\n","       153.27169337,  80.80807507,  45.23929717,  82.21991378,\n","        67.23722468, 130.6352575 , 138.31340675,  96.53602164,\n","       121.26091195,  49.35239775, 102.80840635,  88.51749919,\n","        97.21184287,  85.49649084,  89.80131765, 105.86026943,\n","        88.24575459,  55.85951092,  80.42390967, 106.83570149,\n","        43.7622268 , 119.74673482,  83.31581607,  86.45427923,\n","       128.74635393, 127.37869959,  91.3846146 ,  74.97249684,\n","       133.86122938,  57.17808658, 144.80971916, 152.56253631,\n","        79.85602071,  77.52052179,  54.8482058 ,  82.21817122,\n","        96.08542213,  81.81983607, 138.02050333, 113.81738163,\n","        68.14875099,  81.09379354, 108.41149238, 126.09931606,\n","        69.91456593, 113.5630053 ,  48.40219788, 126.09931606,\n","        70.17402501, 107.57716394, 138.2640306 ,  92.46539315,\n","       100.77183646, 108.86049414, 109.36423067,  97.73251447,\n","       152.03510711,  71.12965109,  88.50182258,  62.38469017,\n","        85.40121845, 158.77148337, 158.77148337, 139.70616179,\n","       134.24052284, 123.43733499, 105.92300415, 112.85108295,\n","       111.01754815, 133.35565916,  61.09398474,  70.26299671,\n","        82.49459049, 137.99002679,  98.67557231,  83.61109003,\n","       105.80765872, 132.88194878, 106.14529716, 107.4446782 ,\n","        76.21245349,  94.88852004, 135.35668932,  90.55527366,\n","       121.63361067])"]},"metadata":{},"execution_count":132}],"source":["y1_pred_SGD"]},{"cell_type":"code","execution_count":null,"id":"134e412e","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:43.063102Z","iopub.status.busy":"2022-02-25T05:57:43.062438Z","iopub.status.idle":"2022-02-25T05:57:43.253197Z","shell.execute_reply":"2022-02-25T05:57:43.252649Z","shell.execute_reply.started":"2022-02-23T19:51:04.344027Z"},"papermill":{"duration":0.484932,"end_time":"2022-02-25T05:57:43.253343","exception":false,"start_time":"2022-02-25T05:57:42.768411","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"134e412e","executionInfo":{"status":"ok","timestamp":1647309332820,"user_tz":-330,"elapsed":227,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"d43fbb0f-cbc0-4ec0-a0ba-2dc63d7e4b5e"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["plt.scatter(y1_test,y1_pred_SGD)\n","plt.xlabel('Targets' ,size = 18)\n","plt.ylabel('Predictions',size = 18)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"id":"2f9f6061","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:43.849542Z","iopub.status.busy":"2022-02-25T05:57:43.848454Z","iopub.status.idle":"2022-02-25T05:57:43.852369Z","shell.execute_reply":"2022-02-25T05:57:43.853265Z","shell.execute_reply.started":"2022-02-23T19:51:04.555193Z"},"papermill":{"duration":0.308084,"end_time":"2022-02-25T05:57:43.853541","exception":false,"start_time":"2022-02-25T05:57:43.545457","status":"completed"},"tags":[],"id":"2f9f6061"},"outputs":[],"source":["r_squared_SGD = SGD_model.score(X1_train,y1_train)\n","# Number of observation or sample size\n","n = 593 \n","\n","# No of independent variables\n","p = 119\n","\n","#Compute Adj-R-Squared\n","Adj_r_squared_SGD = 1 - (1-r_squared_SGD)*(n-1)/(n-p-1)\n","\n","# Compute RMSE\n","rmse_SGD = sqrt(mean_squared_error(y1_test, y1_pred_SGD))\n"]},{"cell_type":"code","execution_count":null,"id":"5dd88fb9","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:44.550010Z","iopub.status.busy":"2022-02-25T05:57:44.548916Z","iopub.status.idle":"2022-02-25T05:57:44.560863Z","shell.execute_reply":"2022-02-25T05:57:44.560229Z","shell.execute_reply.started":"2022-02-23T19:51:04.568825Z"},"papermill":{"duration":0.362838,"end_time":"2022-02-25T05:57:44.561002","exception":false,"start_time":"2022-02-25T05:57:44.198164","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"5dd88fb9","executionInfo":{"status":"ok","timestamp":1647309332824,"user_tz":-330,"elapsed":214,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"3b404f43-b6cc-4b4d-be10-35f93af2eebc"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                         Model       RMSE  R-Squared  Adj. R-Squared\n","0           Linreg full model   28.337711   0.664193        0.581478\n","1  Linear regression with SGD   27.183469   0.650307        0.562329"],"text/html":["\n","  <div id=\"df-c3efffd8-9391-4a84-8b83-c52cdcb790cb\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>RMSE</th>\n","      <th>R-Squared</th>\n","      <th>Adj. R-Squared</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Linreg full model</td>\n","      <td>28.337711</td>\n","      <td>0.664193</td>\n","      <td>0.581478</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Linear regression with SGD</td>\n","      <td>27.183469</td>\n","      <td>0.650307</td>\n","      <td>0.562329</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c3efffd8-9391-4a84-8b83-c52cdcb790cb')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c3efffd8-9391-4a84-8b83-c52cdcb790cb button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c3efffd8-9391-4a84-8b83-c52cdcb790cb');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":135}],"source":["# compile the required information\n","linreg_full_metrics = pd.Series({'Model': \"Linear regression with SGD \",\n","                     'RMSE':rmse_SGD,\n","                     'R-Squared': r_squared_SGD,\n","                     'Adj. R-Squared': Adj_r_squared_SGD     \n","                   })\n","\n","# append our result table using append()\n","# ignore_index=True: does not use the index labels\n","# python can only append a Series if ignore_index=True or if the Series has a name\n","result_tabulation = result_tabulation.append(linreg_full_metrics, ignore_index = True)\n","\n","# print the result table\n","result_tabulation"]},{"cell_type":"markdown","id":"f4cf8089","metadata":{"papermill":{"duration":0.290714,"end_time":"2022-02-25T05:57:45.143666","exception":false,"start_time":"2022-02-25T05:57:44.852952","status":"completed"},"tags":[],"id":"f4cf8089"},"source":["# 3. Decision Tree"]},{"cell_type":"code","execution_count":null,"id":"9ed1972e","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:45.735459Z","iopub.status.busy":"2022-02-25T05:57:45.734551Z","iopub.status.idle":"2022-02-25T05:57:45.820123Z","shell.execute_reply":"2022-02-25T05:57:45.819497Z","shell.execute_reply.started":"2022-02-23T19:51:04.596162Z"},"papermill":{"duration":0.382299,"end_time":"2022-02-25T05:57:45.820270","exception":false,"start_time":"2022-02-25T05:57:45.437971","status":"completed"},"tags":[],"id":"9ed1972e"},"outputs":[],"source":["from sklearn import tree\n","from sklearn.tree import export_graphviz\n","from sklearn import metrics\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.model_selection import GridSearchCV"]},{"cell_type":"code","execution_count":null,"id":"9f4e3bc6","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:46.414152Z","iopub.status.busy":"2022-02-25T05:57:46.413115Z","iopub.status.idle":"2022-02-25T05:57:46.425821Z","shell.execute_reply":"2022-02-25T05:57:46.426326Z","shell.execute_reply.started":"2022-02-23T19:51:04.695488Z"},"papermill":{"duration":0.314057,"end_time":"2022-02-25T05:57:46.426518","exception":false,"start_time":"2022-02-25T05:57:46.112461","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"9f4e3bc6","executionInfo":{"status":"ok","timestamp":1647309332830,"user_tz":-330,"elapsed":215,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"7e886fb8-778d-40c5-83c7-8d678da51f0a"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:363: FutureWarning: Criterion 'mse' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='squared_error'` which is equivalent.\n","  FutureWarning,\n"]}],"source":["# instantiate the 'DecisionTreeRegressor' object using 'mse' criterion\n","# pass the 'random_state' to obtain the same samples for each time you run the code\n","decision_tree = DecisionTreeRegressor(criterion = 'mse', random_state = 10) #Max depth D.Tree gets formed\n","\n","# fit the model using fit() on train data\n","decision_tree_model = decision_tree.fit(X_train, y_train) #fit() method is defined inside the class 'DecisionTreeClassifier'"]},{"cell_type":"code","execution_count":null,"id":"2a2dd22d","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:47.013314Z","iopub.status.busy":"2022-02-25T05:57:47.012654Z","iopub.status.idle":"2022-02-25T05:57:47.019285Z","shell.execute_reply":"2022-02-25T05:57:47.019839Z","shell.execute_reply.started":"2022-02-23T19:51:04.714087Z"},"papermill":{"duration":0.300931,"end_time":"2022-02-25T05:57:47.020030","exception":false,"start_time":"2022-02-25T05:57:46.719099","status":"completed"},"tags":[],"id":"2a2dd22d"},"outputs":[],"source":["y_pred_DT=decision_tree_model.predict(X_test)"]},{"cell_type":"code","execution_count":null,"id":"53dde85b","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:47.610666Z","iopub.status.busy":"2022-02-25T05:57:47.610006Z","iopub.status.idle":"2022-02-25T05:57:47.617344Z","shell.execute_reply":"2022-02-25T05:57:47.616571Z","shell.execute_reply.started":"2022-02-23T19:51:04.724067Z"},"papermill":{"duration":0.303037,"end_time":"2022-02-25T05:57:47.617532","exception":false,"start_time":"2022-02-25T05:57:47.314495","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"53dde85b","executionInfo":{"status":"ok","timestamp":1647309332833,"user_tz":-330,"elapsed":208,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"36e31335-0642-4ffe-9ecd-52537c907c0f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([119.5       ,  62.5       , 120.        ,  97.5       ,\n","        70.        , 109.        ,  65.5       ,  85.5       ,\n","        72.5       ,  81.        ,  71.75      ,  75.5       ,\n","        41.5       , 123.5       , 164.5       ,  85.5       ,\n","        93.33333333,  56.5       ,  84.5       ,  93.5       ,\n","        94.        ,  72.5       , 122.        ,  85.        ,\n","        73.5       ,  85.5       ,  78.        , 120.        ,\n","        80.        , 194.        ,  94.        ,  54.        ,\n","       142.5       ,  87.        , 139.        , 120.        ,\n","        43.        ,  69.5       , 107.5       , 127.        ,\n","        75.5       ,  49.        ,  68.5       , 109.        ,\n","        60.        ,  84.        ,  56.5       , 111.        ,\n","        64.5       ,  50.        ,  61.        , 127.        ,\n","        90.66666667, 113.5       , 111.5       , 120.        ,\n","        50.        , 164.        , 113.5       , 177.        ,\n","       128.        ,  95.        ,  61.        ,  48.5       ,\n","       133.        , 109.        ,  53.5       ,  91.        ,\n","        85.5       , 140.        , 113.        , 110.5       ,\n","        94.5       ,  55.        ,  82.        ,  91.5       ,\n","        87.        , 115.        ,  47.        ,  84.5       ,\n","        99.        ,  56.5       ,  76.5       , 107.        ,\n","       107.        , 114.5       ,  71.5       , 172.        ,\n","       139.        , 146.5       , 120.        ,  68.5       ,\n","       143.5       ,  55.        , 139.        , 116.5       ,\n","        47.        ,  85.5       ,  51.5       ,  84.5       ,\n","        88.        , 129.5       , 140.5       , 115.        ,\n","        99.5       ,  90.        , 120.        , 254.        ,\n","        91.5       , 162.        ,  76.        , 254.        ,\n","        73.5       ,  86.        , 155.        ,  87.5       ,\n","        88.        , 138.5       ,  56.5       ,  62.5       ,\n","       137.        ,  59.        ,  79.5       ,  74.        ,\n","        90.        , 151.5       , 151.5       , 151.5       ,\n","       124.5       , 142.5       , 107.5       , 181.        ,\n","        85.        , 126.25      ,  45.5       ,  83.        ,\n","       149.5       , 128.        ,  92.        ,  69.5       ,\n","        48.5       ,  92.        ,  77.5       ,  98.        ,\n","        49.        , 111.5       , 150.5       ,  76.        ,\n","       161.5       ])"]},"metadata":{},"execution_count":139}],"source":["y_pred_DT"]},{"cell_type":"code","execution_count":null,"id":"f1976446","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:48.213041Z","iopub.status.busy":"2022-02-25T05:57:48.212360Z","iopub.status.idle":"2022-02-25T05:57:48.223028Z","shell.execute_reply":"2022-02-25T05:57:48.223545Z","shell.execute_reply.started":"2022-02-23T19:51:04.736567Z"},"papermill":{"duration":0.309669,"end_time":"2022-02-25T05:57:48.223711","exception":false,"start_time":"2022-02-25T05:57:47.914042","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"f1976446","executionInfo":{"status":"ok","timestamp":1647309332835,"user_tz":-330,"elapsed":206,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"102e9823-2925-4652-81c5-4b738c990ef7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Avg Salary(K)\n","273           90.0\n","414           62.5\n","529          125.0\n","502           97.5\n","729           70.0\n","..             ...\n","247           50.0\n","341          111.5\n","298          162.5\n","132           81.5\n","656          114.0\n","\n","[149 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-72c4334d-c332-4315-88a6-47dd7a837eb3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Avg Salary(K)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>273</th>\n","      <td>90.0</td>\n","    </tr>\n","    <tr>\n","      <th>414</th>\n","      <td>62.5</td>\n","    </tr>\n","    <tr>\n","      <th>529</th>\n","      <td>125.0</td>\n","    </tr>\n","    <tr>\n","      <th>502</th>\n","      <td>97.5</td>\n","    </tr>\n","    <tr>\n","      <th>729</th>\n","      <td>70.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>247</th>\n","      <td>50.0</td>\n","    </tr>\n","    <tr>\n","      <th>341</th>\n","      <td>111.5</td>\n","    </tr>\n","    <tr>\n","      <th>298</th>\n","      <td>162.5</td>\n","    </tr>\n","    <tr>\n","      <th>132</th>\n","      <td>81.5</td>\n","    </tr>\n","    <tr>\n","      <th>656</th>\n","      <td>114.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>149 rows × 1 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-72c4334d-c332-4315-88a6-47dd7a837eb3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-72c4334d-c332-4315-88a6-47dd7a837eb3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-72c4334d-c332-4315-88a6-47dd7a837eb3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":140}],"source":["y_test"]},{"cell_type":"code","execution_count":null,"id":"1d1b86ad","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:48.817672Z","iopub.status.busy":"2022-02-25T05:57:48.816909Z","iopub.status.idle":"2022-02-25T05:57:48.827902Z","shell.execute_reply":"2022-02-25T05:57:48.827235Z","shell.execute_reply.started":"2022-02-23T19:51:04.752406Z"},"papermill":{"duration":0.305121,"end_time":"2022-02-25T05:57:48.828045","exception":false,"start_time":"2022-02-25T05:57:48.522924","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"1d1b86ad","executionInfo":{"status":"ok","timestamp":1647309332840,"user_tz":-330,"elapsed":204,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"11aba16a-1dca-4170-b2f3-56b451540ea4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6132561087447184"]},"metadata":{},"execution_count":141}],"source":["r_squared_DT=decision_tree_model.score(X_test,y_test)\n","# Number of observation or sample size\n","n = 593 \n","\n","# No of independent variables\n","p = 119\n","\n","#Compute Adj-R-Squared\n","Adj_r_squared_DT = 1 - (1-r_squared_DT)*(n-1)/(n-p-1)\n","Adj_r_squared_DT"]},{"cell_type":"code","execution_count":null,"id":"3e908dd6","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:49.418928Z","iopub.status.busy":"2022-02-25T05:57:49.418255Z","iopub.status.idle":"2022-02-25T05:57:49.423363Z","shell.execute_reply":"2022-02-25T05:57:49.423866Z","shell.execute_reply.started":"2022-02-23T19:51:04.76548Z"},"papermill":{"duration":0.301352,"end_time":"2022-02-25T05:57:49.424044","exception":false,"start_time":"2022-02-25T05:57:49.122692","status":"completed"},"tags":[],"id":"3e908dd6"},"outputs":[],"source":["# Compute RMSE\n","rmse_DT = sqrt(mean_squared_error(y_test, y_pred_DT))"]},{"cell_type":"code","execution_count":null,"id":"21ae2184","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:50.040570Z","iopub.status.busy":"2022-02-25T05:57:50.039792Z","iopub.status.idle":"2022-02-25T05:57:50.043144Z","shell.execute_reply":"2022-02-25T05:57:50.043627Z","shell.execute_reply.started":"2022-02-23T19:51:04.7729Z"},"papermill":{"duration":0.313287,"end_time":"2022-02-25T05:57:50.043834","exception":false,"start_time":"2022-02-25T05:57:49.730547","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"21ae2184","executionInfo":{"status":"ok","timestamp":1647309333392,"user_tz":-330,"elapsed":750,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"b84ab1ba-eb19-4f62-bca2-0c48af99d32b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                         Model       RMSE  R-Squared  Adj. R-Squared\n","0           Linreg full model   28.337711   0.664193        0.581478\n","1  Linear regression with SGD   27.183469   0.650307        0.562329\n","2         Decision Tree Model   20.713884   0.690997        0.613256"],"text/html":["\n","  <div id=\"df-c5db95fd-884d-4860-8baf-29fbf3cdef6b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>RMSE</th>\n","      <th>R-Squared</th>\n","      <th>Adj. R-Squared</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Linreg full model</td>\n","      <td>28.337711</td>\n","      <td>0.664193</td>\n","      <td>0.581478</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Linear regression with SGD</td>\n","      <td>27.183469</td>\n","      <td>0.650307</td>\n","      <td>0.562329</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Decision Tree Model</td>\n","      <td>20.713884</td>\n","      <td>0.690997</td>\n","      <td>0.613256</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c5db95fd-884d-4860-8baf-29fbf3cdef6b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c5db95fd-884d-4860-8baf-29fbf3cdef6b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c5db95fd-884d-4860-8baf-29fbf3cdef6b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":143}],"source":["# compile the required information\n","linreg_full_metrics = pd.Series({'Model': \"Decision Tree Model \",\n","                     'RMSE':rmse_DT,\n","                     'R-Squared': r_squared_DT,\n","                     'Adj. R-Squared': Adj_r_squared_DT     \n","                   })\n","\n","# append our result table using append()\n","# ignore_index=True: does not use the index labels\n","# python can only append a Series if ignore_index=True or if the Series has a name\n","result_tabulation = result_tabulation.append(linreg_full_metrics, ignore_index = True)\n","\n","# print the result table\n","result_tabulation"]},{"cell_type":"markdown","id":"e2d6eb76","metadata":{"papermill":{"duration":0.314106,"end_time":"2022-02-25T05:57:50.663963","exception":false,"start_time":"2022-02-25T05:57:50.349857","status":"completed"},"tags":[],"id":"e2d6eb76"},"source":["# 4.Decision Tree with pruning"]},{"cell_type":"code","execution_count":null,"id":"17b7e0f6","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:51.264739Z","iopub.status.busy":"2022-02-25T05:57:51.263669Z","iopub.status.idle":"2022-02-25T05:57:51.272917Z","shell.execute_reply":"2022-02-25T05:57:51.272347Z","shell.execute_reply.started":"2022-02-23T19:51:04.792173Z"},"papermill":{"duration":0.314222,"end_time":"2022-02-25T05:57:51.273069","exception":false,"start_time":"2022-02-25T05:57:50.958847","status":"completed"},"tags":[],"id":"17b7e0f6"},"outputs":[],"source":["# instantiate the 'DecisionTreeRegressor' object\n","# max_depth: maximum depth of the tree \n","# max_leaf_nodes: maximum number of leaf nodes in the tree\n","# pass the 'random_state' to obtain the same samples for each time you run the code\n","prune = DecisionTreeRegressor(max_depth = 10, max_leaf_nodes = 32 , random_state = 10)\n","\n","# fit the model using fit() on train data\n","decision_tree_prune = prune.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"id":"6e360eeb","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:51.868362Z","iopub.status.busy":"2022-02-25T05:57:51.867371Z","iopub.status.idle":"2022-02-25T05:57:51.873992Z","shell.execute_reply":"2022-02-25T05:57:51.874469Z","shell.execute_reply.started":"2022-02-23T19:51:04.807546Z"},"papermill":{"duration":0.304805,"end_time":"2022-02-25T05:57:51.874644","exception":false,"start_time":"2022-02-25T05:57:51.569839","status":"completed"},"tags":[],"id":"6e360eeb"},"outputs":[],"source":["y_pred_DT_prune=decision_tree_prune.predict(X_test)"]},{"cell_type":"code","execution_count":null,"id":"75ca6332","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:52.470602Z","iopub.status.busy":"2022-02-25T05:57:52.469833Z","iopub.status.idle":"2022-02-25T05:57:52.473073Z","shell.execute_reply":"2022-02-25T05:57:52.473556Z","shell.execute_reply.started":"2022-02-23T19:51:04.81654Z"},"papermill":{"duration":0.303158,"end_time":"2022-02-25T05:57:52.473718","exception":false,"start_time":"2022-02-25T05:57:52.170560","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"75ca6332","executionInfo":{"status":"ok","timestamp":1647309333401,"user_tz":-330,"elapsed":63,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"8713cfb6-6269-4dd2-cbcd-cb9797fb3bb1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([119.625     ,  61.13934426,  81.86206897, 104.3880597 ,\n","        60.7244898 ,  93.12931034,  98.98837209,  93.12931034,\n","        61.13934426,  60.7244898 ,  84.275     ,  93.12931034,\n","        81.86206897,  61.13934426, 151.34210526,  81.86206897,\n","        98.98837209,  60.7244898 ,  98.98837209,  81.86206897,\n","       104.3880597 ,  61.13934426, 127.70491803,  84.275     ,\n","        81.86206897, 104.3880597 ,  93.12931034,  81.86206897,\n","        98.98837209, 191.125     , 104.3880597 ,  61.13934426,\n","       151.34210526,  90.63461538, 127.70491803,  81.86206897,\n","        61.13934426,  61.13934426,  98.98837209, 151.34210526,\n","       104.3880597 ,  61.13934426, 101.5       ,  98.98837209,\n","        61.13934426,  84.275     ,  60.7244898 ,  60.7244898 ,\n","        93.12931034,  61.13934426,  61.13934426, 151.34210526,\n","        98.98837209,  84.275     ,  90.63461538,  81.86206897,\n","        61.13934426, 127.70491803, 119.625     , 177.        ,\n","        98.98837209, 104.3880597 ,  61.13934426,  61.13934426,\n","       127.70491803,  93.12931034,  61.13934426, 104.3880597 ,\n","        93.12931034, 156.        ,  93.12931034, 104.3880597 ,\n","        84.275     ,  60.7244898 ,  84.275     ,  90.63461538,\n","        90.63461538, 104.3880597 ,  61.13934426,  93.12931034,\n","        93.12931034,  60.7244898 ,  84.275     , 104.3880597 ,\n","        93.12931034,  84.275     ,  93.12931034, 104.3880597 ,\n","       127.70491803, 127.70491803,  84.275     ,  93.12931034,\n","       104.3880597 ,  60.7244898 , 127.70491803, 136.84782609,\n","        75.30769231, 104.3880597 ,  60.7244898 ,  98.98837209,\n","        75.30769231,  96.83333333, 127.70491803,  84.275     ,\n","        96.83333333,  93.12931034,  81.86206897, 214.33333333,\n","        90.63461538, 151.34210526,  81.86206897, 214.33333333,\n","        81.86206897, 104.3880597 , 104.3880597 , 104.3880597 ,\n","        75.30769231, 127.70491803, 104.3880597 ,  84.275     ,\n","       127.70491803,  61.13934426, 104.3880597 ,  81.86206897,\n","        93.12931034, 136.84782609, 136.84782609, 136.84782609,\n","       127.70491803, 151.34210526,  98.98837209, 181.        ,\n","        93.12931034, 130.56666667,  61.13934426,  75.30769231,\n","        93.12931034,  98.98837209,  93.12931034,  84.275     ,\n","        61.13934426, 136.84782609,  75.30769231, 127.70491803,\n","        61.13934426,  90.63461538, 136.84782609,  81.86206897,\n","       161.5       ])"]},"metadata":{},"execution_count":146}],"source":["y_pred_DT_prune"]},{"cell_type":"code","execution_count":null,"id":"541eaaf5","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:53.079064Z","iopub.status.busy":"2022-02-25T05:57:53.078194Z","iopub.status.idle":"2022-02-25T05:57:53.081142Z","shell.execute_reply":"2022-02-25T05:57:53.080549Z","shell.execute_reply.started":"2022-02-23T19:51:04.832888Z"},"papermill":{"duration":0.312639,"end_time":"2022-02-25T05:57:53.081286","exception":false,"start_time":"2022-02-25T05:57:52.768647","status":"completed"},"tags":[],"id":"541eaaf5"},"outputs":[],"source":["r_squared_DT_prune=decision_tree_prune.score(X_test,y_test)\n","# Number of observation or sample size\n","n = 593 \n","\n","# No of independent variables\n","p = 119\n","\n","#Compute Adj-R-Squared\n","Adj_r_squared_DT_prune = 1 - (1-r_squared_DT_prune)*(n-1)/(n-p-1)\n","Adj_r_squared_DT_prune\n","# Compute RMSE\n","rmse_DT_prune = sqrt(mean_squared_error(y_test, y_pred_DT_prune))"]},{"cell_type":"code","execution_count":null,"id":"5307f9a7","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:53.674075Z","iopub.status.busy":"2022-02-25T05:57:53.673307Z","iopub.status.idle":"2022-02-25T05:57:53.684728Z","shell.execute_reply":"2022-02-25T05:57:53.684229Z","shell.execute_reply.started":"2022-02-23T19:51:04.849122Z"},"papermill":{"duration":0.311339,"end_time":"2022-02-25T05:57:53.684897","exception":false,"start_time":"2022-02-25T05:57:53.373558","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"5307f9a7","executionInfo":{"status":"ok","timestamp":1647309333406,"user_tz":-330,"elapsed":61,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"e663d010-da15-46d2-9557-1c03e583b408"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                Model       RMSE  R-Squared  Adj. R-Squared\n","0                  Linreg full model   28.337711   0.664193        0.581478\n","1         Linear regression with SGD   27.183469   0.650307        0.562329\n","2                Decision Tree Model   20.713884   0.690997        0.613256\n","3  Decision Tree Model after pruning   26.319905   0.501106        0.375591"],"text/html":["\n","  <div id=\"df-999af8bc-4663-4f85-bd0f-34b8de90321a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>RMSE</th>\n","      <th>R-Squared</th>\n","      <th>Adj. R-Squared</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Linreg full model</td>\n","      <td>28.337711</td>\n","      <td>0.664193</td>\n","      <td>0.581478</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Linear regression with SGD</td>\n","      <td>27.183469</td>\n","      <td>0.650307</td>\n","      <td>0.562329</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Decision Tree Model</td>\n","      <td>20.713884</td>\n","      <td>0.690997</td>\n","      <td>0.613256</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Decision Tree Model after pruning</td>\n","      <td>26.319905</td>\n","      <td>0.501106</td>\n","      <td>0.375591</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-999af8bc-4663-4f85-bd0f-34b8de90321a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-999af8bc-4663-4f85-bd0f-34b8de90321a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-999af8bc-4663-4f85-bd0f-34b8de90321a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":148}],"source":["# compile the required information\n","linreg_full_metrics = pd.Series({'Model': \"Decision Tree Model after pruning \",\n","                     'RMSE':rmse_DT_prune,\n","                     'R-Squared': r_squared_DT_prune,\n","                     'Adj. R-Squared': Adj_r_squared_DT_prune     \n","                   })\n","\n","# append our result table using append()\n","# ignore_index=True: does not use the index labels\n","# python can only append a Series if ignore_index=True or if the Series has a name\n","result_tabulation = result_tabulation.append(linreg_full_metrics, ignore_index = True)\n","\n","# print the result table\n","result_tabulation"]},{"cell_type":"markdown","id":"8f4f7267","metadata":{"papermill":{"duration":0.296819,"end_time":"2022-02-25T05:57:54.276173","exception":false,"start_time":"2022-02-25T05:57:53.979354","status":"completed"},"tags":[],"id":"8f4f7267"},"source":["# 5.Decision Tree with grid search CV"]},{"cell_type":"code","execution_count":null,"id":"099ae761","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:54.871606Z","iopub.status.busy":"2022-02-25T05:57:54.870944Z","iopub.status.idle":"2022-02-25T05:57:54.875792Z","shell.execute_reply":"2022-02-25T05:57:54.876350Z","shell.execute_reply.started":"2022-02-23T19:51:04.866665Z"},"papermill":{"duration":0.300938,"end_time":"2022-02-25T05:57:54.876516","exception":false,"start_time":"2022-02-25T05:57:54.575578","status":"completed"},"tags":[],"id":"099ae761"},"outputs":[],"source":["# create a dictionary with hyperparameters and its values\n","# pass the criteria 'mse' and 'mae' to the parameter, 'criterion' \n","# pass the list of values to 'min_samples_split' that assigns minimum number of samples to split an internal node\n","# pass the list of values to 'max_depth' that assigns maximum depth of the tree\n","# pass the list of values to 'min_samples_leaf' that assigns minimum number of samples required at the terminal/leaf node\n","# pass the list of values to 'max_leaf_nodes' that assigns maximum number of leaf nodes in the tree\n","tuned_paramaters = [{'criterion': ['mse', 'mae'],\n","                     'min_samples_split': [10, 20, 30],\n","                     'max_depth': [3, 5, 7, 9,12,15,20,25],\n","                     'min_samples_leaf': [15, 20, 25, 30, 35],\n","                     'max_leaf_nodes': [5, 10, 15, 20, 25]}]"]},{"cell_type":"code","execution_count":null,"id":"44a7cd6f","metadata":{"execution":{"iopub.execute_input":"2022-02-25T05:57:55.471878Z","iopub.status.busy":"2022-02-25T05:57:55.471219Z","iopub.status.idle":"2022-02-25T06:02:55.421442Z","shell.execute_reply":"2022-02-25T06:02:55.422028Z","shell.execute_reply.started":"2022-02-23T19:51:04.876525Z"},"papermill":{"duration":300.24793,"end_time":"2022-02-25T06:02:55.422228","exception":false,"start_time":"2022-02-25T05:57:55.174298","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"44a7cd6f","executionInfo":{"status":"ok","timestamp":1647309636920,"user_tz":-330,"elapsed":303569,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"a390f2ad-2003-4ca1-df76-aa205245990b"},"outputs":[{"output_type":"stream","name":"stderr","text":["\u001b[1;30;43mStreaming output truncated to the last 5000 lines.\u001b[0m\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n"]},{"output_type":"stream","name":"stdout","text":["Best parameters for decision tree Regressor:  {'criterion': 'mse', 'max_depth': 9, 'max_leaf_nodes': 20, 'min_samples_leaf': 20, 'min_samples_split': 10} \n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:370: FutureWarning: Criterion 'mae' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='absolute_error'` which is equivalent.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:363: FutureWarning: Criterion 'mse' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='squared_error'` which is equivalent.\n","  FutureWarning,\n"]}],"source":["# instantiate the 'DecisionTreeRegressor' \n","# pass the 'random_state' to obtain the same samples for each time you run the code\n","decision_tree_regressor = DecisionTreeRegressor(random_state = 10)\n","\n","# use GridSearchCV() to find the optimal value of the hyperparameters\n","# estimator: pass the decision tree classifier model\n","# param_grid: pass the list 'tuned_parameters'\n","# cv: number of folds in k-fold i.e. here cv = 10\n","grid = GridSearchCV(estimator = decision_tree_regressor, \n","                         param_grid = tuned_paramaters, \n","                         cv = 10)\n","\n","# fit the model on X_train and y_train using fit()\n","dt_grid = grid.fit(X_train, y_train)\n","\n","# get the best parameters\n","print('Best parameters for decision tree Regressor: ', dt_grid.best_params_, '\\n')"]},{"cell_type":"code","execution_count":null,"id":"354f9cff","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:02:56.018590Z","iopub.status.busy":"2022-02-25T06:02:56.017896Z","iopub.status.idle":"2022-02-25T06:02:56.020258Z","shell.execute_reply":"2022-02-25T06:02:56.020696Z","shell.execute_reply.started":"2022-02-23T19:56:00.558043Z"},"papermill":{"duration":0.303154,"end_time":"2022-02-25T06:02:56.020892","exception":false,"start_time":"2022-02-25T06:02:55.717738","status":"completed"},"tags":[],"id":"354f9cff"},"outputs":[],"source":["y_pred_grid=dt_grid.predict(X_test)"]},{"cell_type":"code","execution_count":null,"id":"e5e52fca","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:02:56.617989Z","iopub.status.busy":"2022-02-25T06:02:56.617227Z","iopub.status.idle":"2022-02-25T06:02:56.620045Z","shell.execute_reply":"2022-02-25T06:02:56.620528Z","shell.execute_reply.started":"2022-02-23T19:56:00.567121Z"},"papermill":{"duration":0.303289,"end_time":"2022-02-25T06:02:56.620692","exception":false,"start_time":"2022-02-25T06:02:56.317403","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"e5e52fca","executionInfo":{"status":"ok","timestamp":1647309636932,"user_tz":-330,"elapsed":83,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"a1bd8222-0824-4d0d-d39b-98ef628c19ed"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([126.07142857,  59.72641509,  82.54545455, 111.74      ,\n","        64.07692308,  82.54545455, 116.06896552,  80.31081081,\n","        59.72641509,  64.07692308,  85.375     ,  98.34090909,\n","        99.16666667,  59.72641509, 137.55      ,  82.54545455,\n","       116.06896552,  64.07692308,  98.24137931,  99.16666667,\n","        98.07258065,  59.72641509, 142.09090909,  98.07258065,\n","        82.54545455, 111.74      , 110.19565217,  82.54545455,\n","        98.24137931, 155.57894737,  98.07258065,  59.72641509,\n","       137.55      ,  99.16666667, 128.875     ,  99.16666667,\n","        59.72641509,  59.72641509,  98.24137931, 137.55      ,\n","       111.74      ,  79.13043478, 126.07142857,  98.24137931,\n","        59.72641509,  98.07258065,  64.07692308,  98.34090909,\n","        80.31081081,  59.72641509,  59.72641509, 137.55      ,\n","        98.24137931,  98.07258065,  82.54545455,  82.54545455,\n","        59.72641509, 128.875     , 126.07142857,  98.34090909,\n","       116.06896552,  98.07258065,  59.72641509,  59.72641509,\n","       118.16666667,  82.54545455,  79.13043478, 111.74      ,\n","        80.31081081,  99.16666667,  98.34090909, 111.74      ,\n","        98.07258065,  64.07692308,  85.375     ,  82.54545455,\n","        64.07692308,  98.07258065,  79.13043478,  98.34090909,\n","        99.16666667,  64.07692308,  85.375     , 118.13043478,\n","        80.31081081,  98.07258065,  98.34090909, 118.13043478,\n","       128.875     , 128.875     , 118.13043478,  98.34090909,\n","       111.74      ,  64.07692308, 142.09090909, 155.57894737,\n","        59.72641509, 111.74      ,  64.07692308,  98.24137931,\n","        79.13043478, 110.19565217, 142.09090909,  98.07258065,\n","        64.07692308,  80.31081081,  99.16666667, 118.13043478,\n","        99.16666667, 137.55      ,  82.54545455, 118.13043478,\n","        82.54545455,  98.07258065, 111.74      ,  98.07258065,\n","        79.13043478, 118.16666667, 111.74      , 118.13043478,\n","       142.09090909,  79.13043478,  98.07258065,  99.16666667,\n","       110.19565217, 155.57894737, 155.57894737, 155.57894737,\n","       142.09090909, 137.55      ,  98.24137931,  82.54545455,\n","        98.34090909, 116.06896552,  59.72641509,  79.13043478,\n","       110.19565217, 116.06896552, 110.19565217,  85.375     ,\n","        59.72641509, 155.57894737,  79.13043478, 128.875     ,\n","        59.72641509,  82.54545455, 155.57894737,  82.54545455,\n","       111.74      ])"]},"metadata":{},"execution_count":152}],"source":["y_pred_grid"]},{"cell_type":"code","execution_count":null,"id":"9ce858de","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:02:57.217802Z","iopub.status.busy":"2022-02-25T06:02:57.217101Z","iopub.status.idle":"2022-02-25T06:02:57.222395Z","shell.execute_reply":"2022-02-25T06:02:57.222855Z","shell.execute_reply.started":"2022-02-23T19:56:00.587149Z"},"papermill":{"duration":0.30957,"end_time":"2022-02-25T06:02:57.223037","exception":false,"start_time":"2022-02-25T06:02:56.913467","status":"completed"},"tags":[],"id":"9ce858de"},"outputs":[],"source":["r_squared_grid=dt_grid.score(X_test,y_test)\n","# Number of observation or sample size\n","n = 593 \n","\n","# No of independent variables\n","p = 119\n","\n","#Compute Adj-R-Squared\n","Adj_r_squared_grid = 1 - (1-r_squared_grid)*(n-1)/(n-p-1)\n","Adj_r_squared_grid\n","# Compute RMSE\n","rmse_grid = sqrt(mean_squared_error(y_test, y_pred_grid))"]},{"cell_type":"code","execution_count":null,"id":"ce590725","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:02:57.820686Z","iopub.status.busy":"2022-02-25T06:02:57.820044Z","iopub.status.idle":"2022-02-25T06:02:57.835129Z","shell.execute_reply":"2022-02-25T06:02:57.835707Z","shell.execute_reply.started":"2022-02-23T19:56:00.600355Z"},"papermill":{"duration":0.314394,"end_time":"2022-02-25T06:02:57.835905","exception":false,"start_time":"2022-02-25T06:02:57.521511","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"ce590725","executionInfo":{"status":"ok","timestamp":1647309636940,"user_tz":-330,"elapsed":84,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"38a80809-cf26-46cf-b6e0-f8821a4edd64"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                      Model       RMSE  R-Squared  \\\n","0                        Linreg full model   28.337711   0.664193   \n","1               Linear regression with SGD   27.183469   0.650307   \n","2                      Decision Tree Model   20.713884   0.690997   \n","3        Decision Tree Model after pruning   26.319905   0.501106   \n","4  Decision Tree Model with Grid search CV   28.939465   0.396856   \n","\n","   Adj. R-Squared  \n","0        0.581478  \n","1        0.562329  \n","2        0.613256  \n","3        0.375591  \n","4        0.245114  "],"text/html":["\n","  <div id=\"df-2504ee4e-29a9-45f6-bf5a-e65f6140df90\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>RMSE</th>\n","      <th>R-Squared</th>\n","      <th>Adj. R-Squared</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Linreg full model</td>\n","      <td>28.337711</td>\n","      <td>0.664193</td>\n","      <td>0.581478</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Linear regression with SGD</td>\n","      <td>27.183469</td>\n","      <td>0.650307</td>\n","      <td>0.562329</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Decision Tree Model</td>\n","      <td>20.713884</td>\n","      <td>0.690997</td>\n","      <td>0.613256</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Decision Tree Model after pruning</td>\n","      <td>26.319905</td>\n","      <td>0.501106</td>\n","      <td>0.375591</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Decision Tree Model with Grid search CV</td>\n","      <td>28.939465</td>\n","      <td>0.396856</td>\n","      <td>0.245114</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2504ee4e-29a9-45f6-bf5a-e65f6140df90')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2504ee4e-29a9-45f6-bf5a-e65f6140df90 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2504ee4e-29a9-45f6-bf5a-e65f6140df90');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":154}],"source":["# compile the required information\n","linreg_full_metrics = pd.Series({'Model': \"Decision Tree Model with Grid search CV \",\n","                     'RMSE':rmse_grid,\n","                     'R-Squared': r_squared_grid,\n","                     'Adj. R-Squared': Adj_r_squared_grid     \n","                   })\n","\n","# append our result table using append()\n","# ignore_index=True: does not use the index labels\n","# python can only append a Series if ignore_index=True or if the Series has a name\n","result_tabulation = result_tabulation.append(linreg_full_metrics, ignore_index = True)\n","\n","# print the result table\n","result_tabulation"]},{"cell_type":"markdown","id":"b43f6977","metadata":{"papermill":{"duration":0.295505,"end_time":"2022-02-25T06:02:58.430797","exception":false,"start_time":"2022-02-25T06:02:58.135292","status":"completed"},"tags":[],"id":"b43f6977"},"source":["# 5.Rndom forest"]},{"cell_type":"code","execution_count":null,"id":"a9813bea","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:02:59.057897Z","iopub.status.busy":"2022-02-25T06:02:59.057231Z","iopub.status.idle":"2022-02-25T06:02:59.089109Z","shell.execute_reply":"2022-02-25T06:02:59.088458Z","shell.execute_reply.started":"2022-02-23T19:56:00.621779Z"},"papermill":{"duration":0.332039,"end_time":"2022-02-25T06:02:59.089263","exception":false,"start_time":"2022-02-25T06:02:58.757224","status":"completed"},"tags":[],"id":"a9813bea"},"outputs":[],"source":["# import library for random forest regressor\n","from sklearn.ensemble import RandomForestRegressor"]},{"cell_type":"code","execution_count":null,"id":"09bad9b2","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:02:59.690853Z","iopub.status.busy":"2022-02-25T06:02:59.685599Z","iopub.status.idle":"2022-02-25T06:03:00.291123Z","shell.execute_reply":"2022-02-25T06:03:00.291625Z","shell.execute_reply.started":"2022-02-23T19:56:00.653427Z"},"papermill":{"duration":0.907653,"end_time":"2022-02-25T06:03:00.291819","exception":false,"start_time":"2022-02-25T06:02:59.384166","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"09bad9b2","executionInfo":{"status":"ok","timestamp":1647309637805,"user_tz":-330,"elapsed":942,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"c51ec632-3bee-49c0-b0eb-0616159ef8b8"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  \"\"\"\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomForestRegressor(random_state=10)"]},"metadata":{},"execution_count":156}],"source":["#intantiate the regressor\n","rf_reg = RandomForestRegressor(n_estimators=100, random_state=10)\n","\n","# fit the regressor with training dataset\n","rf_reg.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"id":"9ce3dbf2","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:03:00.897996Z","iopub.status.busy":"2022-02-25T06:03:00.897291Z","iopub.status.idle":"2022-02-25T06:03:00.914643Z","shell.execute_reply":"2022-02-25T06:03:00.915152Z","shell.execute_reply.started":"2022-02-23T19:56:01.254134Z"},"papermill":{"duration":0.326711,"end_time":"2022-02-25T06:03:00.915342","exception":false,"start_time":"2022-02-25T06:03:00.588631","status":"completed"},"tags":[],"id":"9ce3dbf2"},"outputs":[],"source":["# predict the values on test dataset using predict()\n","y_pred_RF = rf_reg.predict(X_test)"]},{"cell_type":"code","execution_count":null,"id":"decba637","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:03:01.522102Z","iopub.status.busy":"2022-02-25T06:03:01.521377Z","iopub.status.idle":"2022-02-25T06:03:01.524361Z","shell.execute_reply":"2022-02-25T06:03:01.524912Z","shell.execute_reply.started":"2022-02-23T19:56:01.283265Z"},"papermill":{"duration":0.309173,"end_time":"2022-02-25T06:03:01.525081","exception":false,"start_time":"2022-02-25T06:03:01.215908","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"decba637","executionInfo":{"status":"ok","timestamp":1647309637848,"user_tz":-330,"elapsed":118,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"ecc30bed-0623-4d28-c9a2-3330c29b9e9b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([122.055     ,  64.085     ,  95.83      ,  93.62      ,\n","        73.085     , 102.1       ,  76.62      ,  85.16      ,\n","        74.015     ,  78.815     ,  77.06194048,  92.54      ,\n","        87.885     , 102.015     , 148.685     ,  81.23      ,\n","        94.22358333,  56.515     ,  84.81      ,  91.495     ,\n","       118.8775    ,  54.85      , 121.96      , 105.9875    ,\n","        80.175     , 111.285     , 103.8       , 110.89      ,\n","        86.46625   , 171.03      , 111.56      ,  56.69      ,\n","       141.32      ,  79.57      , 133.8925    , 110.705     ,\n","        52.68      ,  62.55      , 107.10333333, 148.28      ,\n","        87.84      ,  58.73      ,  88.055     , 110.11      ,\n","        80.59775   ,  90.1225    ,  56.515     , 106.765     ,\n","        76.025     ,  54.39      ,  60.28      , 148.28      ,\n","        89.14504361, 108.47      , 101.        ,  95.83      ,\n","        55.975     , 150.19521429, 116.35      , 102.595     ,\n","       114.514     ,  96.75      ,  60.33      ,  49.665     ,\n","       128.78583333, 102.1       ,  57.78      ,  94.155     ,\n","        85.16      , 132.2975    , 112.335     , 108.67      ,\n","        98.605     ,  63.39      ,  98.58666667,  90.71      ,\n","        81.48      , 106.54      , 105.9375    ,  80.435     ,\n","        97.915     ,  56.515     ,  75.20916667, 107.935     ,\n","        94.825     , 123.875     ,  76.975     , 111.435     ,\n","       133.8925    , 145.46      , 111.91      ,  82.23      ,\n","       133.03      ,  58.05      , 140.36303571, 140.945     ,\n","        64.3       ,  89.07      ,  56.405     ,  84.81      ,\n","        78.275     , 112.26      , 139.16      , 104.87      ,\n","        96.615     ,  88.715     , 113.605     , 205.205     ,\n","        84.99333333, 146.145     ,  72.315     , 205.205     ,\n","        80.175     ,  94.505     , 138.7       ,  98.75      ,\n","        77.02      , 126.74      ,  89.4       ,  88.5375    ,\n","       137.19375   ,  60.3       ,  91.705     ,  75.045     ,\n","        90.685     , 144.835     , 144.835     , 131.02166667,\n","       125.44392857, 139.875     , 107.10333333, 135.43      ,\n","        86.56      , 127.5785119 ,  58.51      ,  76.27      ,\n","       132.41      , 114.514     ,  97.595     ,  86.76666667,\n","        97.525     , 123.2905    ,  85.7       ,  96.935     ,\n","        67.725     , 101.        , 142.7655    ,  70.9625    ,\n","       153.81      ])"]},"metadata":{},"execution_count":158}],"source":["y_pred_RF"]},{"cell_type":"code","execution_count":null,"id":"a3ed5fd0","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:03:02.131957Z","iopub.status.busy":"2022-02-25T06:03:02.131316Z","iopub.status.idle":"2022-02-25T06:03:02.143325Z","shell.execute_reply":"2022-02-25T06:03:02.142758Z","shell.execute_reply.started":"2022-02-23T19:56:01.291639Z"},"papermill":{"duration":0.317351,"end_time":"2022-02-25T06:03:02.143463","exception":false,"start_time":"2022-02-25T06:03:01.826112","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"a3ed5fd0","executionInfo":{"status":"ok","timestamp":1647309637850,"user_tz":-330,"elapsed":113,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"12898f9f-1ac4-4828-84ae-b0e79ca9ea52"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Absolute Error (MAE): 13.288100618155148\n","Mean Squared Error (MSE): 332.64885051585827\n","Root Mean Squared Error (RMSE): 18.238663616500478\n"]}],"source":["# Calculate MAE\n","rf_reg_MAE = metrics.mean_absolute_error(y_test, y_pred_RF)\n","print('Mean Absolute Error (MAE):', rf_reg_MAE)\n","\n","# Calculate MSE\n","rf_reg_MSE = metrics.mean_squared_error(y_test, y_pred_RF)\n","print('Mean Squared Error (MSE):', rf_reg_MSE)\n","\n","# Calculate RMSE\n","rf_reg_RMSE = np.sqrt(metrics.mean_squared_error(y_test, y_pred_RF))\n","print('Root Mean Squared Error (RMSE):', rf_reg_RMSE)"]},{"cell_type":"code","execution_count":null,"id":"eb193c3d","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:03:02.742807Z","iopub.status.busy":"2022-02-25T06:03:02.742133Z","iopub.status.idle":"2022-02-25T06:03:02.763371Z","shell.execute_reply":"2022-02-25T06:03:02.763968Z","shell.execute_reply.started":"2022-02-23T19:56:01.311632Z"},"papermill":{"duration":0.323822,"end_time":"2022-02-25T06:03:02.764151","exception":false,"start_time":"2022-02-25T06:03:02.440329","status":"completed"},"tags":[],"id":"eb193c3d"},"outputs":[],"source":["r_squared_RF=rf_reg.score(X_test,y_test)\n","# Number of observation or sample size\n","n = 593 \n","\n","# No of independent variables\n","p = 119\n","\n","#Compute Adj-R-Squared\n","Adj_r_squared_RF = 1 - (1-r_squared_RF)*(n-1)/(n-p-1)\n","# Compute RMSE\n","rmse_RF = sqrt(mean_squared_error(y_test, y_pred_RF))"]},{"cell_type":"code","execution_count":null,"id":"0c2dcdb5","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:03:03.364629Z","iopub.status.busy":"2022-02-25T06:03:03.364022Z","iopub.status.idle":"2022-02-25T06:03:03.377705Z","shell.execute_reply":"2022-02-25T06:03:03.378405Z","shell.execute_reply.started":"2022-02-23T19:56:01.336416Z"},"papermill":{"duration":0.314757,"end_time":"2022-02-25T06:03:03.378572","exception":false,"start_time":"2022-02-25T06:03:03.063815","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"0c2dcdb5","executionInfo":{"status":"ok","timestamp":1647309637859,"user_tz":-330,"elapsed":114,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"f3dca9f6-277a-4060-b92f-f02bcc918c11"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                      Model       RMSE  R-Squared  \\\n","0                        Linreg full model   28.337711   0.664193   \n","1               Linear regression with SGD   27.183469   0.650307   \n","2                      Decision Tree Model   20.713884   0.690997   \n","3        Decision Tree Model after pruning   26.319905   0.501106   \n","4  Decision Tree Model with Grid search CV   28.939465   0.396856   \n","5                            Random Forest   18.238664   0.760434   \n","\n","   Adj. R-Squared  \n","0        0.581478  \n","1        0.562329  \n","2        0.613256  \n","3        0.375591  \n","4        0.245114  \n","5        0.700162  "],"text/html":["\n","  <div id=\"df-6de28962-1c3a-4c51-9964-8a41f6d9a9f2\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>RMSE</th>\n","      <th>R-Squared</th>\n","      <th>Adj. R-Squared</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Linreg full model</td>\n","      <td>28.337711</td>\n","      <td>0.664193</td>\n","      <td>0.581478</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Linear regression with SGD</td>\n","      <td>27.183469</td>\n","      <td>0.650307</td>\n","      <td>0.562329</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Decision Tree Model</td>\n","      <td>20.713884</td>\n","      <td>0.690997</td>\n","      <td>0.613256</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Decision Tree Model after pruning</td>\n","      <td>26.319905</td>\n","      <td>0.501106</td>\n","      <td>0.375591</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Decision Tree Model with Grid search CV</td>\n","      <td>28.939465</td>\n","      <td>0.396856</td>\n","      <td>0.245114</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Random Forest</td>\n","      <td>18.238664</td>\n","      <td>0.760434</td>\n","      <td>0.700162</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6de28962-1c3a-4c51-9964-8a41f6d9a9f2')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6de28962-1c3a-4c51-9964-8a41f6d9a9f2 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6de28962-1c3a-4c51-9964-8a41f6d9a9f2');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":161}],"source":["# compile the required information\n","linreg_full_metrics = pd.Series({'Model': \"Random Forest \",\n","                     'RMSE':rf_reg_RMSE,\n","                     'R-Squared': r_squared_RF,\n","                     'Adj. R-Squared': Adj_r_squared_RF     \n","                   })\n","\n","# append our result table using append()\n","# ignore_index=True: does not use the index labels\n","# python can only append a Series if ignore_index=True or if the Series has a name\n","result_tabulation = result_tabulation.append(linreg_full_metrics, ignore_index = True)\n","\n","# print the result table\n","result_tabulation"]},{"cell_type":"markdown","id":"540d9f85","metadata":{"papermill":{"duration":0.30024,"end_time":"2022-02-25T06:03:03.977820","exception":false,"start_time":"2022-02-25T06:03:03.677580","status":"completed"},"tags":[],"id":"540d9f85"},"source":["# 6.Random Forest using Grid search CV"]},{"cell_type":"code","execution_count":null,"id":"013bce67","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:03:04.578490Z","iopub.status.busy":"2022-02-25T06:03:04.577848Z","iopub.status.idle":"2022-02-25T06:03:04.582477Z","shell.execute_reply":"2022-02-25T06:03:04.583051Z","shell.execute_reply.started":"2022-02-23T19:56:01.3534Z"},"papermill":{"duration":0.305181,"end_time":"2022-02-25T06:03:04.583221","exception":false,"start_time":"2022-02-25T06:03:04.278040","status":"completed"},"tags":[],"id":"013bce67"},"outputs":[],"source":["# create a dictionary with hyperparameters and its values\n","# pass the n_estimators \n","# pass the list of values to 'min_samples_split' that assigns minimum number of samples to split an internal node\n","# pass the list of values to 'max_depth' that assigns maximum depth of the tree\n","# pass the list of values to 'min_samples_leaf' that assigns minimum number of samples required at the terminal/leaf node\n","# pass the list of values to 'max_leaf_nodes' that assigns maximum number of leaf nodes in the tree\n","tuned_paramaters = [{'n_estimators': [ 70,85,95,100],\n","                     'min_samples_split': [10,15,20,25],\n","                     'max_depth': [8, 10,12,14]\n","                     #'min_samples_leaf': [5,10],\n","                     #'max_leaf_nodes': [10, 15]\n","                    }]"]},{"cell_type":"code","execution_count":null,"id":"e8a4533b","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:03:05.186798Z","iopub.status.busy":"2022-02-25T06:03:05.186148Z","iopub.status.idle":"2022-02-25T06:06:43.055147Z","shell.execute_reply":"2022-02-25T06:06:43.055669Z","shell.execute_reply.started":"2022-02-23T19:56:01.360317Z"},"papermill":{"duration":218.172241,"end_time":"2022-02-25T06:06:43.056099","exception":false,"start_time":"2022-02-25T06:03:04.883858","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"e8a4533b","executionInfo":{"status":"ok","timestamp":1647309838716,"user_tz":-330,"elapsed":200940,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"f759dc41-2d5e-4e06-9379-9b8441c14d28"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py:926: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  self.best_estimator_.fit(X, y, **fit_params)\n"]},{"output_type":"stream","name":"stdout","text":["Best parameters for random forest regressor:  {'max_depth': 14, 'min_samples_split': 10, 'n_estimators': 70} \n","\n"]}],"source":["# instantiate the 'RandomForestRegressor' \n","# pass the 'random_state' to obtain the same samples for each time you run the code\n","rf_reg_CV= RandomForestRegressor(random_state = 10)\n","\n","# use GridSearchCV() to find the optimal value of the hyperparameters\n","# n_estimator: pass the decision tree classifier model\n","# param_grid: pass the list 'tuned_parameters'\n","# cv: number of folds in k-fold i.e. here cv = 10\n","grid = GridSearchCV(estimator = rf_reg_CV, \n","                         param_grid = tuned_paramaters, \n","                         cv = 10)\n","\n","# fit the model on X_train and y_train using fit()\n","dt_grid = grid.fit(X_train, y_train)\n","\n","# get the best parameters\n","print('Best parameters for random forest regressor: ', dt_grid.best_params_, '\\n')"]},{"cell_type":"code","execution_count":null,"id":"6419a51a","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:06:44.142701Z","iopub.status.busy":"2022-02-25T06:06:44.142035Z","iopub.status.idle":"2022-02-25T06:06:44.461808Z","shell.execute_reply":"2022-02-25T06:06:44.462314Z","shell.execute_reply.started":"2022-02-23T19:59:35.011398Z"},"papermill":{"duration":0.87192,"end_time":"2022-02-25T06:06:44.462507","exception":false,"start_time":"2022-02-25T06:06:43.590587","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"6419a51a","executionInfo":{"status":"ok","timestamp":1647309839741,"user_tz":-330,"elapsed":1073,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"95bea1a4-642a-4242-9b5e-54b1fa43611b"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:13: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  del sys.path[0]\n"]}],"source":["# instantiate the 'RandomForestRegressor'\n","# 'best_params_' returns the dictionary containing best parameter values and parameter name  \n","# 'get()' returns the value of specified parameter\n","# pass the 'random_state' to obtain the same samples for each time you run the code\n","dt_grid_model = RandomForestRegressor(n_estimators = dt_grid.best_params_.get('n_estimators'),\n","                                       max_depth = dt_grid.best_params_.get('max_depth'),\n","                                       #max_leaf_nodes = dt_grid.best_params_.get('max_leaf_nodes'),\n","                                       #min_samples_leaf = dt_grid.best_params_.get('min_samples_leaf'),\n","                                       min_samples_split = dt_grid.best_params_.get('min_samples_split'),\n","                                       random_state = 10)\n","\n","# use fit() to fit the model on the train set\n","dt_grid_model = dt_grid_model.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"id":"4c812a40","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:06:45.549321Z","iopub.status.busy":"2022-02-25T06:06:45.548633Z","iopub.status.idle":"2022-02-25T06:06:45.558819Z","shell.execute_reply":"2022-02-25T06:06:45.558201Z","shell.execute_reply.started":"2022-02-23T19:59:35.333557Z"},"papermill":{"duration":0.556161,"end_time":"2022-02-25T06:06:45.558988","exception":false,"start_time":"2022-02-25T06:06:45.002827","status":"completed"},"tags":[],"id":"4c812a40"},"outputs":[],"source":["# predict the class labels using 'X_test'\n","y_pred_grid = dt_grid_model.predict(X_test)"]},{"cell_type":"code","execution_count":null,"id":"aacdda59","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:06:46.640338Z","iopub.status.busy":"2022-02-25T06:06:46.639616Z","iopub.status.idle":"2022-02-25T06:06:46.643517Z","shell.execute_reply":"2022-02-25T06:06:46.643004Z","shell.execute_reply.started":"2022-02-23T19:59:35.349631Z"},"papermill":{"duration":0.546704,"end_time":"2022-02-25T06:06:46.643654","exception":false,"start_time":"2022-02-25T06:06:46.096950","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"aacdda59","executionInfo":{"status":"ok","timestamp":1647309839749,"user_tz":-330,"elapsed":100,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"e9864f99-858d-4043-a9f1-c4930b405972"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([122.38852235,  66.84512875,  93.51554524,  91.77912878,\n","        73.66969199,  96.13130769,  83.60597497,  87.74451899,\n","        77.78023233,  77.29152731,  90.06223083,  90.66224796,\n","        87.34228603,  95.86394796, 143.16584691,  76.25895887,\n","        95.21811361,  54.80923502,  85.37167971,  89.87199243,\n","       119.30788618,  55.48400018, 122.59084171, 106.54583539,\n","        77.78559081, 111.43576605, 103.72124525, 106.48445976,\n","        87.82698436, 161.87722654, 109.58673926,  58.26991953,\n","       139.8517822 ,  84.46223723, 134.01308831, 105.74412356,\n","        56.31539455,  62.15624994, 109.61491214, 145.45323653,\n","        95.43130685,  57.84892449, 103.8577268 , 112.15385096,\n","        82.82699683,  90.68209489,  54.80923502, 109.15561402,\n","        82.15175462,  56.24777124,  60.92277098, 145.45323653,\n","        90.26856408, 106.40228924,  96.32386958,  93.51554524,\n","        56.52041789, 142.6709021 , 119.27505023, 100.74729734,\n","       114.15071215,  96.96167041,  60.73402879,  53.04909602,\n","       128.9643356 ,  96.13130769,  63.27664581,  95.62782721,\n","        87.74451899, 130.05300254, 114.51778912, 108.48590985,\n","        97.20466581,  64.16453668, 100.79409646,  91.76272112,\n","        80.06066888,  99.42167744,  99.0698623 ,  81.29255892,\n","        96.24772012,  54.80923502,  77.4336863 , 105.93624924,\n","        95.49818928, 126.49115688,  81.56956321, 116.14394902,\n","       134.01308831, 144.02517445, 101.56088163,  86.81021362,\n","       120.83941123,  57.62801942, 137.78658396, 152.04731479,\n","        71.71182259,  93.00598172,  57.49143179,  85.37167971,\n","        77.08761798, 103.98738927, 136.8791682 , 104.10747486,\n","        97.17257497,  88.93237792, 106.43983784, 151.38540303,\n","        83.36512706, 140.67081286,  74.07020349, 151.38540303,\n","        77.78559081,  96.70614951, 130.78520942, 100.52881537,\n","        76.15431145, 125.68387038,  90.87780673,  89.18996437,\n","       137.56008209,  63.20147414,  98.54011193,  76.09044954,\n","        91.72241347, 143.66991851, 143.66991851, 135.88295794,\n","       126.01944773, 142.43590278, 109.61491214, 133.8900412 ,\n","        85.3767469 , 127.02682295,  59.15197946,  74.28827867,\n","       118.67379113, 114.15071215, 100.65389247,  89.79595718,\n","        96.73266921, 124.60096173,  86.42324044,  96.18465441,\n","        67.42807674,  96.32386958, 143.43496887,  72.5596322 ,\n","       144.34412846])"]},"metadata":{},"execution_count":166}],"source":["y_pred_grid"]},{"cell_type":"code","execution_count":null,"id":"9c0240ff","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:06:47.724141Z","iopub.status.busy":"2022-02-25T06:06:47.723085Z","iopub.status.idle":"2022-02-25T06:06:47.732459Z","shell.execute_reply":"2022-02-25T06:06:47.733062Z","shell.execute_reply.started":"2022-02-23T19:59:35.359567Z"},"papermill":{"duration":0.549985,"end_time":"2022-02-25T06:06:47.733232","exception":false,"start_time":"2022-02-25T06:06:47.183247","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"9c0240ff","executionInfo":{"status":"ok","timestamp":1647309839755,"user_tz":-330,"elapsed":103,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"7c99f15a-6959-4a01-ef3f-b6583546fcca"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Absolute Error (MAE): 15.69921833497906\n","Mean Squared Error (MSE): 490.96079173763167\n","Root Mean Squared Error (RMSE): 22.15763506644226\n"]}],"source":["# calculate MAE\n","rf_reg_CV_MAE = metrics.mean_absolute_error(y_test, y_pred_grid)\n","print('Mean Absolute Error (MAE):', rf_reg_CV_MAE)\n","                                         \n","# calculate MSE\n","rf_reg_CV_MSE = metrics.mean_squared_error(y_test, y_pred_grid)\n","print('Mean Squared Error (MSE):', rf_reg_CV_MSE)\n","                                         \n","# calculate RMSE\n","rf_reg_CV_RMSE = np.sqrt(metrics.mean_squared_error(y_test, y_pred_grid))\n","print('Root Mean Squared Error (RMSE):', rf_reg_CV_RMSE)"]},{"cell_type":"code","execution_count":null,"id":"565204a9","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:06:48.827267Z","iopub.status.busy":"2022-02-25T06:06:48.826576Z","iopub.status.idle":"2022-02-25T06:06:48.839352Z","shell.execute_reply":"2022-02-25T06:06:48.839906Z","shell.execute_reply.started":"2022-02-23T19:59:35.37561Z"},"papermill":{"duration":0.567661,"end_time":"2022-02-25T06:06:48.840080","exception":false,"start_time":"2022-02-25T06:06:48.272419","status":"completed"},"tags":[],"id":"565204a9"},"outputs":[],"source":["r_squared_grid=dt_grid_model.score(X_test,y_test)\n","# Number of observation or sample size\n","n = 593 \n","\n","# No of independent variables\n","p = 119\n","\n","#Compute Adj-R-Squared\n","Adj_r_squared_grid = 1 - (1-r_squared_grid)*(n-1)/(n-p-1)\n","# Compute RMSE\n","rmse_grid = sqrt(mean_squared_error(y_test, y_pred_grid))"]},{"cell_type":"code","execution_count":null,"id":"16c17851","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:06:49.952355Z","iopub.status.busy":"2022-02-25T06:06:49.951643Z","iopub.status.idle":"2022-02-25T06:06:49.966706Z","shell.execute_reply":"2022-02-25T06:06:49.967259Z","shell.execute_reply.started":"2022-02-23T19:59:35.394476Z"},"papermill":{"duration":0.591389,"end_time":"2022-02-25T06:06:49.967427","exception":false,"start_time":"2022-02-25T06:06:49.376038","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"16c17851","executionInfo":{"status":"ok","timestamp":1647309839767,"user_tz":-330,"elapsed":106,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"98d828da-51f8-4e58-e57d-63ab0f6908e5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                      Model       RMSE  R-Squared  \\\n","0                        Linreg full model   28.337711   0.664193   \n","1               Linear regression with SGD   27.183469   0.650307   \n","2                      Decision Tree Model   20.713884   0.690997   \n","3        Decision Tree Model after pruning   26.319905   0.501106   \n","4  Decision Tree Model with Grid search CV   28.939465   0.396856   \n","5                            Random Forest   18.238664   0.760434   \n","6        Random Forest with Grid Search CV   22.157635   0.646421   \n","\n","   Adj. R-Squared  \n","0        0.581478  \n","1        0.562329  \n","2        0.613256  \n","3        0.375591  \n","4        0.245114  \n","5        0.700162  \n","6        0.557465  "],"text/html":["\n","  <div id=\"df-e6650746-41dd-4255-83df-cdd95d8f636c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>RMSE</th>\n","      <th>R-Squared</th>\n","      <th>Adj. R-Squared</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Linreg full model</td>\n","      <td>28.337711</td>\n","      <td>0.664193</td>\n","      <td>0.581478</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Linear regression with SGD</td>\n","      <td>27.183469</td>\n","      <td>0.650307</td>\n","      <td>0.562329</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Decision Tree Model</td>\n","      <td>20.713884</td>\n","      <td>0.690997</td>\n","      <td>0.613256</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Decision Tree Model after pruning</td>\n","      <td>26.319905</td>\n","      <td>0.501106</td>\n","      <td>0.375591</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Decision Tree Model with Grid search CV</td>\n","      <td>28.939465</td>\n","      <td>0.396856</td>\n","      <td>0.245114</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Random Forest</td>\n","      <td>18.238664</td>\n","      <td>0.760434</td>\n","      <td>0.700162</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Random Forest with Grid Search CV</td>\n","      <td>22.157635</td>\n","      <td>0.646421</td>\n","      <td>0.557465</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e6650746-41dd-4255-83df-cdd95d8f636c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e6650746-41dd-4255-83df-cdd95d8f636c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e6650746-41dd-4255-83df-cdd95d8f636c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":169}],"source":["# compile the required information\n","linreg_full_metrics = pd.Series({'Model': \"Random Forest with Grid Search CV \",\n","                     'RMSE':rmse_grid,\n","                     'R-Squared': r_squared_grid,\n","                     'Adj. R-Squared': Adj_r_squared_grid     \n","                   })\n","\n","# append our result table using append()\n","# ignore_index=True: does not use the index labels\n","# python can only append a Series if ignore_index=True or if the Series has a name\n","result_tabulation = result_tabulation.append(linreg_full_metrics, ignore_index = True)\n","\n","# print the result table\n","result_tabulation"]},{"cell_type":"markdown","id":"8b8fa876","metadata":{"papermill":{"duration":0.538059,"end_time":"2022-02-25T06:06:51.044985","exception":false,"start_time":"2022-02-25T06:06:50.506926","status":"completed"},"tags":[],"id":"8b8fa876"},"source":["# 7. Ensemble Techniques"]},{"cell_type":"code","execution_count":null,"id":"6d08e266","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:06:52.124265Z","iopub.status.busy":"2022-02-25T06:06:52.123556Z","iopub.status.idle":"2022-02-25T06:06:52.137217Z","shell.execute_reply":"2022-02-25T06:06:52.137724Z","shell.execute_reply.started":"2022-02-23T19:59:35.410562Z"},"papermill":{"duration":0.557276,"end_time":"2022-02-25T06:06:52.137916","exception":false,"start_time":"2022-02-25T06:06:51.580640","status":"completed"},"tags":[],"id":"6d08e266"},"outputs":[],"source":["from sklearn.feature_selection import SelectKBest\n","from sklearn.feature_selection import f_regression\n","from sklearn.feature_selection import mutual_info_regression"]},{"cell_type":"code","execution_count":null,"id":"1a121da9","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:06:53.214421Z","iopub.status.busy":"2022-02-25T06:06:53.213734Z","iopub.status.idle":"2022-02-25T06:06:53.216927Z","shell.execute_reply":"2022-02-25T06:06:53.217455Z","shell.execute_reply.started":"2022-02-23T19:59:35.435974Z"},"papermill":{"duration":0.54642,"end_time":"2022-02-25T06:06:53.217634","exception":false,"start_time":"2022-02-25T06:06:52.671214","status":"completed"},"tags":[],"id":"1a121da9"},"outputs":[],"source":["x2 = X\n","y2 = y"]},{"cell_type":"code","execution_count":null,"id":"2fd3f6bc","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:06:54.296630Z","iopub.status.busy":"2022-02-25T06:06:54.295987Z","iopub.status.idle":"2022-02-25T06:06:54.300538Z","shell.execute_reply":"2022-02-25T06:06:54.301079Z","shell.execute_reply.started":"2022-02-23T19:59:35.441177Z"},"papermill":{"duration":0.548321,"end_time":"2022-02-25T06:06:54.301247","exception":false,"start_time":"2022-02-25T06:06:53.752926","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"2fd3f6bc","executionInfo":{"status":"ok","timestamp":1647309839775,"user_tz":-330,"elapsed":106,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"129528cb-a594-4317-c3ee-1304c6ca68af"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(742, 119)"]},"metadata":{},"execution_count":172}],"source":["x2.shape"]},{"cell_type":"code","execution_count":null,"id":"785cb8dc","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:06:55.467816Z","iopub.status.busy":"2022-02-25T06:06:55.467109Z","iopub.status.idle":"2022-02-25T06:06:55.471709Z","shell.execute_reply":"2022-02-25T06:06:55.472377Z","shell.execute_reply.started":"2022-02-23T19:59:35.454139Z"},"papermill":{"duration":0.632006,"end_time":"2022-02-25T06:06:55.472549","exception":false,"start_time":"2022-02-25T06:06:54.840543","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"785cb8dc","executionInfo":{"status":"ok","timestamp":1647309839780,"user_tz":-330,"elapsed":108,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"39a6db93-56c9-43f7-9568-2dfcffcb4e1f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(742, 119)"]},"metadata":{},"execution_count":173}],"source":["X.shape"]},{"cell_type":"code","execution_count":null,"id":"139402b5","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:06:56.548687Z","iopub.status.busy":"2022-02-25T06:06:56.548053Z","iopub.status.idle":"2022-02-25T06:06:56.564917Z","shell.execute_reply":"2022-02-25T06:06:56.565807Z","shell.execute_reply.started":"2022-02-23T19:59:35.466791Z"},"papermill":{"duration":0.555989,"end_time":"2022-02-25T06:06:56.566087","exception":false,"start_time":"2022-02-25T06:06:56.010098","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"139402b5","executionInfo":{"status":"ok","timestamp":1647309839782,"user_tz":-330,"elapsed":108,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"50538239-97c9-4e07-daae-77e6d7510003"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.7/dist-packages/sklearn/feature_selection/_univariate_selection.py:289: RuntimeWarning: divide by zero encountered in true_divide\n","  correlation_coefficient /= X_norms\n","/usr/local/lib/python3.7/dist-packages/sklearn/feature_selection/_univariate_selection.py:358: RuntimeWarning: invalid value encountered in true_divide\n","  f_statistic = corr_coef_squared / (1 - corr_coef_squared) * deg_of_freedom\n"]}],"source":["select_feature = SelectKBest(f_regression, k=42).fit(x2,y2)"]},{"cell_type":"code","execution_count":null,"id":"2f31a67f","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:06:57.695991Z","iopub.status.busy":"2022-02-25T06:06:57.695325Z","iopub.status.idle":"2022-02-25T06:06:57.698649Z","shell.execute_reply":"2022-02-25T06:06:57.698093Z","shell.execute_reply.started":"2022-02-23T19:59:35.492074Z"},"papermill":{"duration":0.54425,"end_time":"2022-02-25T06:06:57.698863","exception":false,"start_time":"2022-02-25T06:06:57.154613","status":"completed"},"tags":[],"id":"2f31a67f"},"outputs":[],"source":["X2=select_feature.transform(x2)"]},{"cell_type":"code","execution_count":null,"id":"b65b201c","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:06:58.785947Z","iopub.status.busy":"2022-02-25T06:06:58.785218Z","iopub.status.idle":"2022-02-25T06:06:58.787785Z","shell.execute_reply":"2022-02-25T06:06:58.788275Z","shell.execute_reply.started":"2022-02-23T19:59:35.508977Z"},"papermill":{"duration":0.548345,"end_time":"2022-02-25T06:06:58.788452","exception":false,"start_time":"2022-02-25T06:06:58.240107","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"b65b201c","executionInfo":{"status":"ok","timestamp":1647309839787,"user_tz":-330,"elapsed":107,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"fb79deff-5d89-4871-8c00-5a84e6afc00e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(742, 42)"]},"metadata":{},"execution_count":176}],"source":["X2.shape"]},{"cell_type":"code","execution_count":null,"id":"24fe9f47","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:06:59.872047Z","iopub.status.busy":"2022-02-25T06:06:59.871409Z","iopub.status.idle":"2022-02-25T06:06:59.875391Z","shell.execute_reply":"2022-02-25T06:06:59.876094Z","shell.execute_reply.started":"2022-02-23T19:59:35.522678Z"},"papermill":{"duration":0.547232,"end_time":"2022-02-25T06:06:59.876274","exception":false,"start_time":"2022-02-25T06:06:59.329042","status":"completed"},"scrolled":true,"tags":[],"id":"24fe9f47"},"outputs":[],"source":["D=select_feature.get_support(indices=True)"]},{"cell_type":"code","execution_count":null,"id":"e86a8283","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:00.990269Z","iopub.status.busy":"2022-02-25T06:07:00.989591Z","iopub.status.idle":"2022-02-25T06:07:00.994702Z","shell.execute_reply":"2022-02-25T06:07:00.995264Z","shell.execute_reply.started":"2022-02-23T19:59:35.530867Z"},"papermill":{"duration":0.579815,"end_time":"2022-02-25T06:07:00.995431","exception":false,"start_time":"2022-02-25T06:07:00.415616","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"e86a8283","executionInfo":{"status":"ok","timestamp":1647309839794,"user_tz":-330,"elapsed":107,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"4325ca09-eea9-4374-825b-c9e7389dc2e8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([  1,   4,   5,   6,   9,  10,  12,  13,  14,  19,  20,  21,  24,\n","        25,  28,  30,  31,  37,  38,  45,  46,  48,  51,  60,  61,  63,\n","        65,  67,  71,  75,  76,  80,  91, 106, 107, 110, 112, 114, 115,\n","       116, 117, 118])"]},"metadata":{},"execution_count":178}],"source":["D"]},{"cell_type":"code","execution_count":null,"id":"23321f53","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:02.084066Z","iopub.status.busy":"2022-02-25T06:07:02.081344Z","iopub.status.idle":"2022-02-25T06:07:02.169525Z","shell.execute_reply":"2022-02-25T06:07:02.170040Z","shell.execute_reply.started":"2022-02-23T19:59:35.549871Z"},"papermill":{"duration":0.632335,"end_time":"2022-02-25T06:07:02.170215","exception":false,"start_time":"2022-02-25T06:07:01.537880","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"23321f53","executionInfo":{"status":"ok","timestamp":1647309839800,"user_tz":-330,"elapsed":111,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"5c3b96a2-9d99-4c42-9825-86c489511cf5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     const  Rating  Founded   Age  Python  spark  aws  excel  sql  sas  keras  \\\n","0      1.0     3.8   1973.0  48.0     1.0    0.0  0.0    1.0  0.0  1.0    0.0   \n","1      1.0     3.4   1984.0  37.0     1.0    0.0  0.0    0.0  0.0  0.0    0.0   \n","2      1.0     4.8   2010.0  35.0     1.0    1.0  0.0    1.0  1.0  1.0    0.0   \n","3      1.0     3.8   1965.0  56.0     1.0    0.0  0.0    0.0  0.0  0.0    0.0   \n","4      1.0     2.9   1998.0  23.0     1.0    0.0  0.0    1.0  1.0  1.0    0.0   \n","..     ...     ...      ...   ...     ...    ...  ...    ...  ...  ...    ...   \n","737    1.0     3.9   1830.0  51.0     0.0    0.0  1.0    0.0  0.0  0.0    0.0   \n","738    1.0     4.4   2006.0  15.0     1.0    1.0  1.0    0.0  1.0  0.0    0.0   \n","739    1.0     2.6   1984.0  37.0     0.0    0.0  0.0    1.0  0.0  0.0    0.0   \n","740    1.0     3.2   1992.0  29.0     0.0    0.0  0.0    1.0  0.0  0.0    0.0   \n","741    1.0     3.6   1967.0  54.0     1.0    0.0  0.0    0.0  0.0  0.0    0.0   \n","\n","     pytorch  scikit  tensor  hadoop  tableau   bi  flink  mongo  google_an  \\\n","0        0.0     0.0     0.0     0.0      1.0  1.0    0.0    0.0        0.0   \n","1        0.0     0.0     0.0     0.0      0.0  0.0    0.0    0.0        0.0   \n","2        0.0     0.0     0.0     0.0      0.0  0.0    0.0    0.0        0.0   \n","3        0.0     0.0     0.0     0.0      0.0  0.0    0.0    0.0        0.0   \n","4        0.0     0.0     0.0     0.0      0.0  0.0    0.0    0.0        0.0   \n","..       ...     ...     ...     ...      ...  ...    ...    ...        ...   \n","737      0.0     0.0     0.0     0.0      0.0  0.0    0.0    0.0        0.0   \n","738      0.0     0.0     0.0     1.0      0.0  0.0    0.0    0.0        0.0   \n","739      0.0     0.0     0.0     0.0      0.0  0.0    0.0    0.0        0.0   \n","740      0.0     0.0     0.0     0.0      0.0  0.0    0.0    0.0        0.0   \n","741      0.0     0.0     0.0     0.0      0.0  0.0    0.0    0.0        0.0   \n","\n","     Size_10000+   Size_1001 - 5000   Size_201 - 500   Size_5001 - 10000   \\\n","0               0                  0                0                   0   \n","1               1                  0                0                   0   \n","2               0                  0                0                   0   \n","3               0                  1                0                   0   \n","4               0                  0                0                   0   \n","..            ...                ...              ...                 ...   \n","737             1                  0                0                   0   \n","738             0                  1                0                   0   \n","739             0                  0                0                   0   \n","740             0                  0                0                   0   \n","741             0                  0                0                   0   \n","\n","     Size_501 - 1000   Size_51 - 200   Size_unknown  \\\n","0                   1               0             0   \n","1                   0               0             0   \n","2                   1               0             0   \n","3                   0               0             0   \n","4                   0               1             0   \n","..                ...             ...           ...   \n","737                 0               0             0   \n","738                 0               0             0   \n","739                 1               0             0   \n","740                 0               0             0   \n","741                 1               0             0   \n","\n","     Type of ownership_Company - Private  Type of ownership_Company - Public  \\\n","0                                      1                                   0   \n","1                                      0                                   0   \n","2                                      1                                   0   \n","3                                      0                                   0   \n","4                                      1                                   0   \n","..                                   ...                                 ...   \n","737                                    0                                   1   \n","738                                    0                                   1   \n","739                                    0                                   0   \n","740                                    1                                   0   \n","741                                    0                                   0   \n","\n","     Type of ownership_Government  Type of ownership_Hospital  \\\n","0                               0                           0   \n","1                               0                           0   \n","2                               0                           0   \n","3                               1                           0   \n","4                               0                           0   \n","..                            ...                         ...   \n","737                             0                           0   \n","738                             0                           0   \n","739                             0                           0   \n","740                             0                           0   \n","741                             0                           0   \n","\n","     Type of ownership_Nonprofit Organization  \\\n","0                                           0   \n","1                                           0   \n","2                                           0   \n","3                                           0   \n","4                                           0   \n","..                                        ...   \n","737                                         0   \n","738                                         0   \n","739                                         0   \n","740                                         0   \n","741                                         1   \n","\n","     Type of ownership_Other Organization  \\\n","0                                       0   \n","1                                       1   \n","2                                       0   \n","3                                       0   \n","4                                       0   \n","..                                    ...   \n","737                                     0   \n","738                                     0   \n","739                                     0   \n","740                                     0   \n","741                                     0   \n","\n","     Type of ownership_School / School District  \\\n","0                                             0   \n","1                                             0   \n","2                                             0   \n","3                                             0   \n","4                                             0   \n","..                                          ...   \n","737                                           0   \n","738                                           0   \n","739                                           0   \n","740                                           0   \n","741                                           0   \n","\n","     Type of ownership_Subsidiary or Business Segment  \\\n","0                                                   0   \n","1                                                   0   \n","2                                                   0   \n","3                                                   0   \n","4                                                   0   \n","..                                                ...   \n","737                                                 0   \n","738                                                 0   \n","739                                                 0   \n","740                                                 0   \n","741                                                 0   \n","\n","     Sector_Aerospace & Defense  Sector_Agriculture & Forestry  \\\n","0                             1                              0   \n","1                             0                              0   \n","2                             0                              0   \n","3                             0                              0   \n","4                             0                              0   \n","..                          ...                            ...   \n","737                           0                              0   \n","738                           0                              0   \n","739                           0                              0   \n","740                           0                              0   \n","741                           0                              0   \n","\n","     Sector_Arts, Entertainment & Recreation  \\\n","0                                          0   \n","1                                          0   \n","2                                          0   \n","3                                          0   \n","4                                          0   \n","..                                       ...   \n","737                                        0   \n","738                                        0   \n","739                                        0   \n","740                                        0   \n","741                                        0   \n","\n","     Sector_Biotech & Pharmaceuticals  Sector_Business Services  \\\n","0                                   0                         0   \n","1                                   0                         0   \n","2                                   0                         1   \n","3                                   0                         0   \n","4                                   0                         1   \n","..                                ...                       ...   \n","737                                 1                         0   \n","738                                 0                         0   \n","739                                 0                         0   \n","740                                 0                         1   \n","741                                 0                         0   \n","\n","     Sector_Construction, Repair & Maintenance  Sector_Consumer Services  \\\n","0                                            0                         0   \n","1                                            0                         0   \n","2                                            0                         0   \n","3                                            0                         0   \n","4                                            0                         0   \n","..                                         ...                       ...   \n","737                                          0                         0   \n","738                                          0                         0   \n","739                                          0                         0   \n","740                                          0                         0   \n","741                                          0                         0   \n","\n","     Sector_Education  Sector_Finance  Sector_Government  Sector_Health Care  \\\n","0                   0               0                  0                   0   \n","1                   0               0                  0                   1   \n","2                   0               0                  0                   0   \n","3                   0               0                  0                   0   \n","4                   0               0                  0                   0   \n","..                ...             ...                ...                 ...   \n","737                 0               0                  0                   0   \n","738                 0               0                  0                   0   \n","739                 1               0                  0                   0   \n","740                 0               0                  0                   0   \n","741                 0               0                  1                   0   \n","\n","     Sector_Information Technology  Sector_Insurance  Sector_Manufacturing  \\\n","0                                0                 0                     0   \n","1                                0                 0                     0   \n","2                                0                 0                     0   \n","3                                0                 0                     0   \n","4                                0                 0                     0   \n","..                             ...               ...                   ...   \n","737                              0                 0                     0   \n","738                              1                 0                     0   \n","739                              0                 0                     0   \n","740                              0                 0                     0   \n","741                              0                 0                     0   \n","\n","     Sector_Media  Sector_Mining & Metals  Sector_Non-Profit  \\\n","0               0                       0                  0   \n","1               0                       0                  0   \n","2               0                       0                  0   \n","3               0                       0                  0   \n","4               0                       0                  0   \n","..            ...                     ...                ...   \n","737             0                       0                  0   \n","738             0                       0                  0   \n","739             0                       0                  0   \n","740             0                       0                  0   \n","741             0                       0                  0   \n","\n","     Sector_Oil, Gas, Energy & Utilities  Sector_Real Estate  Sector_Retail  \\\n","0                                      0                   0              0   \n","1                                      0                   0              0   \n","2                                      0                   0              0   \n","3                                      1                   0              0   \n","4                                      0                   0              0   \n","..                                   ...                 ...            ...   \n","737                                    0                   0              0   \n","738                                    0                   0              0   \n","739                                    0                   0              0   \n","740                                    0                   0              0   \n","741                                    0                   0              0   \n","\n","     Sector_Telecommunications  Sector_Transportation & Logistics  \\\n","0                            0                                  0   \n","1                            0                                  0   \n","2                            0                                  0   \n","3                            0                                  0   \n","4                            0                                  0   \n","..                         ...                                ...   \n","737                          0                                  0   \n","738                          0                                  0   \n","739                          0                                  0   \n","740                          0                                  0   \n","741                          0                                  0   \n","\n","     Sector_Travel & Tourism  Revenue_$1 to $5 million (USD)  \\\n","0                          0                               0   \n","1                          0                               0   \n","2                          0                               0   \n","3                          0                               0   \n","4                          0                               0   \n","..                       ...                             ...   \n","737                        0                               0   \n","738                        0                               0   \n","739                        0                               0   \n","740                        0                               0   \n","741                        0                               0   \n","\n","     Revenue_$10 to $25 million (USD)  Revenue_$10+ billion (USD)  \\\n","0                                   0                           0   \n","1                                   0                           0   \n","2                                   0                           0   \n","3                                   0                           0   \n","4                                   0                           0   \n","..                                ...                         ...   \n","737                                 0                           1   \n","738                                 0                           0   \n","739                                 0                           0   \n","740                                 0                           0   \n","741                                 0                           0   \n","\n","     Revenue_$100 to $500 million (USD)  Revenue_$2 to $5 billion (USD)  \\\n","0                                     0                               0   \n","1                                     0                               1   \n","2                                     1                               0   \n","3                                     0                               0   \n","4                                     0                               0   \n","..                                  ...                             ...   \n","737                                   0                               0   \n","738                                   1                               0   \n","739                                   0                               0   \n","740                                   0                               0   \n","741                                   0                               0   \n","\n","     Revenue_$25 to $50 million (USD)  Revenue_$5 to $10 billion (USD)  \\\n","0                                   0                                0   \n","1                                   0                                0   \n","2                                   0                                0   \n","3                                   0                                0   \n","4                                   0                                0   \n","..                                ...                              ...   \n","737                                 0                                0   \n","738                                 0                                0   \n","739                                 0                                0   \n","740                                 0                                0   \n","741                                 0                                0   \n","\n","     Revenue_$5 to $10 million (USD)  Revenue_$50 to $100 million (USD)  \\\n","0                                  0                                  1   \n","1                                  0                                  0   \n","2                                  0                                  0   \n","3                                  0                                  0   \n","4                                  0                                  0   \n","..                               ...                                ...   \n","737                                0                                  0   \n","738                                0                                  0   \n","739                                0                                  0   \n","740                                1                                  0   \n","741                                0                                  1   \n","\n","     Revenue_$500 million to $1 billion (USD)  \\\n","0                                           0   \n","1                                           0   \n","2                                           0   \n","3                                           1   \n","4                                           0   \n","..                                        ...   \n","737                                         0   \n","738                                         0   \n","739                                         0   \n","740                                         0   \n","741                                         0   \n","\n","     Revenue_Less than $1 million (USD)  Revenue_Unknown / Non-Applicable  \\\n","0                                     0                                 0   \n","1                                     0                                 0   \n","2                                     0                                 0   \n","3                                     0                                 0   \n","4                                     0                                 1   \n","..                                  ...                               ...   \n","737                                   0                                 0   \n","738                                   0                                 0   \n","739                                   0                                 1   \n","740                                   0                                 0   \n","741                                   0                                 0   \n","\n","     Job Location_AZ  Job Location_CA  Job Location_CO  Job Location_CT  \\\n","0                  0                0                0                0   \n","1                  0                0                0                0   \n","2                  0                0                0                0   \n","3                  0                0                0                0   \n","4                  0                0                0                0   \n","..               ...              ...              ...              ...   \n","737                0                0                0                0   \n","738                0                0                0                0   \n","739                0                0                0                0   \n","740                0                0                0                0   \n","741                0                0                0                0   \n","\n","     Job Location_DC  Job Location_DE  Job Location_FL  Job Location_GA  \\\n","0                  0                0                0                0   \n","1                  0                0                0                0   \n","2                  0                0                1                0   \n","3                  0                0                0                0   \n","4                  0                0                0                0   \n","..               ...              ...              ...              ...   \n","737                0                0                0                0   \n","738                0                0                0                0   \n","739                0                0                0                0   \n","740                0                0                0                0   \n","741                0                0                0                0   \n","\n","     Job Location_IA  Job Location_ID  Job Location_IL  Job Location_IN  \\\n","0                  0                0                0                0   \n","1                  0                0                0                0   \n","2                  0                0                0                0   \n","3                  0                0                0                0   \n","4                  0                0                0                0   \n","..               ...              ...              ...              ...   \n","737                0                0                0                0   \n","738                0                0                0                0   \n","739                0                0                0                0   \n","740                0                0                0                0   \n","741                0                0                0                0   \n","\n","     Job Location_KS  Job Location_KY  Job Location_LA  Job Location_MA  \\\n","0                  0                0                0                0   \n","1                  0                0                0                0   \n","2                  0                0                0                0   \n","3                  0                0                0                0   \n","4                  0                0                0                0   \n","..               ...              ...              ...              ...   \n","737                0                0                0                1   \n","738                0                0                0                0   \n","739                0                0                0                0   \n","740                0                0                0                0   \n","741                0                0                0                0   \n","\n","     Job Location_MD  Job Location_MI  Job Location_MN  Job Location_MO  \\\n","0                  0                0                0                0   \n","1                  1                0                0                0   \n","2                  0                0                0                0   \n","3                  0                0                0                0   \n","4                  0                0                0                0   \n","..               ...              ...              ...              ...   \n","737                0                0                0                0   \n","738                0                0                0                0   \n","739                0                0                0                0   \n","740                0                0                0                0   \n","741                0                0                0                0   \n","\n","     Job Location_NC  Job Location_NE  Job Location_NJ  Job Location_NM  \\\n","0                  0                0                0                1   \n","1                  0                0                0                0   \n","2                  0                0                0                0   \n","3                  0                0                0                0   \n","4                  0                0                0                0   \n","..               ...              ...              ...              ...   \n","737                0                0                0                0   \n","738                0                0                0                0   \n","739                0                0                0                0   \n","740                0                0                0                0   \n","741                0                0                0                0   \n","\n","     Job Location_NY  Job Location_OH  Job Location_OR  Job Location_PA  \\\n","0                  0                0                0                0   \n","1                  0                0                0                0   \n","2                  0                0                0                0   \n","3                  0                0                0                0   \n","4                  1                0                0                0   \n","..               ...              ...              ...              ...   \n","737                0                0                0                0   \n","738                0                0                0                0   \n","739                0                0                0                1   \n","740                0                0                0                1   \n","741                0                1                0                0   \n","\n","     Job Location_RI  Job Location_SC  Job Location_TN  Job Location_TX  \\\n","0                  0                0                0                0   \n","1                  0                0                0                0   \n","2                  0                0                0                0   \n","3                  0                0                0                0   \n","4                  0                0                0                0   \n","..               ...              ...              ...              ...   \n","737                0                0                0                0   \n","738                0                0                1                0   \n","739                0                0                0                0   \n","740                0                0                0                0   \n","741                0                0                0                0   \n","\n","     Job Location_UT  Job Location_VA  Job Location_WA  Job Location_WI  \\\n","0                  0                0                0                0   \n","1                  0                0                0                0   \n","2                  0                0                0                0   \n","3                  0                0                1                0   \n","4                  0                0                0                0   \n","..               ...              ...              ...              ...   \n","737                0                0                0                0   \n","738                0                0                0                0   \n","739                0                0                0                0   \n","740                0                0                0                0   \n","741                0                0                0                0   \n","\n","     job_title_sim_analyst  job_title_sim_data analitics  \\\n","0                        0                             0   \n","1                        0                             0   \n","2                        0                             0   \n","3                        0                             0   \n","4                        0                             0   \n","..                     ...                           ...   \n","737                      0                             0   \n","738                      0                             0   \n","739                      0                             0   \n","740                      0                             0   \n","741                      0                             0   \n","\n","     job_title_sim_data engineer  job_title_sim_data modeler  \\\n","0                              0                           0   \n","1                              0                           0   \n","2                              0                           0   \n","3                              0                           0   \n","4                              0                           0   \n","..                           ...                         ...   \n","737                            0                           0   \n","738                            1                           0   \n","739                            0                           0   \n","740                            0                           0   \n","741                            0                           0   \n","\n","     job_title_sim_data scientist  job_title_sim_director  \\\n","0                               1                       0   \n","1                               1                       0   \n","2                               1                       0   \n","3                               1                       0   \n","4                               1                       0   \n","..                            ...                     ...   \n","737                             0                       0   \n","738                             0                       0   \n","739                             0                       0   \n","740                             1                       0   \n","741                             0                       0   \n","\n","     job_title_sim_machine learning engineer  job_title_sim_na  \\\n","0                                          0                 0   \n","1                                          0                 0   \n","2                                          0                 0   \n","3                                          0                 0   \n","4                                          0                 0   \n","..                                       ...               ...   \n","737                                        0                 0   \n","738                                        0                 0   \n","739                                        0                 0   \n","740                                        0                 0   \n","741                                        0                 0   \n","\n","     job_title_sim_other scientist  seniority_by_title_na  \\\n","0                                0                      1   \n","1                                0                      1   \n","2                                0                      1   \n","3                                0                      1   \n","4                                0                      1   \n","..                             ...                    ...   \n","737                              1                      0   \n","738                              0                      0   \n","739                              1                      1   \n","740                              0                      1   \n","741                              1                      1   \n","\n","     seniority_by_title_sr  Degree_P  Degree_na  \n","0                        0         0          0  \n","1                        0         0          0  \n","2                        0         0          0  \n","3                        0         0          1  \n","4                        0         0          1  \n","..                     ...       ...        ...  \n","737                      1         0          0  \n","738                      1         0          1  \n","739                      0         1          0  \n","740                      0         0          1  \n","741                      0         0          0  \n","\n","[742 rows x 119 columns]"],"text/html":["\n","  <div id=\"df-206b701a-331e-48ab-8bff-b56fa34e8454\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>const</th>\n","      <th>Rating</th>\n","      <th>Founded</th>\n","      <th>Age</th>\n","      <th>Python</th>\n","      <th>spark</th>\n","      <th>aws</th>\n","      <th>excel</th>\n","      <th>sql</th>\n","      <th>sas</th>\n","      <th>keras</th>\n","      <th>pytorch</th>\n","      <th>scikit</th>\n","      <th>tensor</th>\n","      <th>hadoop</th>\n","      <th>tableau</th>\n","      <th>bi</th>\n","      <th>flink</th>\n","      <th>mongo</th>\n","      <th>google_an</th>\n","      <th>Size_10000+</th>\n","      <th>Size_1001 - 5000</th>\n","      <th>Size_201 - 500</th>\n","      <th>Size_5001 - 10000</th>\n","      <th>Size_501 - 1000</th>\n","      <th>Size_51 - 200</th>\n","      <th>Size_unknown</th>\n","      <th>Type of ownership_Company - Private</th>\n","      <th>Type of ownership_Company - Public</th>\n","      <th>Type of ownership_Government</th>\n","      <th>Type of ownership_Hospital</th>\n","      <th>Type of ownership_Nonprofit Organization</th>\n","      <th>Type of ownership_Other Organization</th>\n","      <th>Type of ownership_School / School District</th>\n","      <th>Type of ownership_Subsidiary or Business Segment</th>\n","      <th>Sector_Aerospace &amp; Defense</th>\n","      <th>Sector_Agriculture &amp; Forestry</th>\n","      <th>Sector_Arts, Entertainment &amp; Recreation</th>\n","      <th>Sector_Biotech &amp; Pharmaceuticals</th>\n","      <th>Sector_Business Services</th>\n","      <th>Sector_Construction, Repair &amp; Maintenance</th>\n","      <th>Sector_Consumer Services</th>\n","      <th>Sector_Education</th>\n","      <th>Sector_Finance</th>\n","      <th>Sector_Government</th>\n","      <th>Sector_Health Care</th>\n","      <th>Sector_Information Technology</th>\n","      <th>Sector_Insurance</th>\n","      <th>Sector_Manufacturing</th>\n","      <th>Sector_Media</th>\n","      <th>Sector_Mining &amp; Metals</th>\n","      <th>Sector_Non-Profit</th>\n","      <th>Sector_Oil, Gas, Energy &amp; Utilities</th>\n","      <th>Sector_Real Estate</th>\n","      <th>Sector_Retail</th>\n","      <th>Sector_Telecommunications</th>\n","      <th>Sector_Transportation &amp; Logistics</th>\n","      <th>Sector_Travel &amp; Tourism</th>\n","      <th>Revenue_$1 to $5 million (USD)</th>\n","      <th>Revenue_$10 to $25 million (USD)</th>\n","      <th>Revenue_$10+ billion (USD)</th>\n","      <th>Revenue_$100 to $500 million (USD)</th>\n","      <th>Revenue_$2 to $5 billion (USD)</th>\n","      <th>Revenue_$25 to $50 million (USD)</th>\n","      <th>Revenue_$5 to $10 billion (USD)</th>\n","      <th>Revenue_$5 to $10 million (USD)</th>\n","      <th>Revenue_$50 to $100 million (USD)</th>\n","      <th>Revenue_$500 million to $1 billion (USD)</th>\n","      <th>Revenue_Less than $1 million (USD)</th>\n","      <th>Revenue_Unknown / Non-Applicable</th>\n","      <th>Job Location_AZ</th>\n","      <th>Job Location_CA</th>\n","      <th>Job Location_CO</th>\n","      <th>Job Location_CT</th>\n","      <th>Job Location_DC</th>\n","      <th>Job Location_DE</th>\n","      <th>Job Location_FL</th>\n","      <th>Job Location_GA</th>\n","      <th>Job Location_IA</th>\n","      <th>Job Location_ID</th>\n","      <th>Job Location_IL</th>\n","      <th>Job Location_IN</th>\n","      <th>Job Location_KS</th>\n","      <th>Job Location_KY</th>\n","      <th>Job Location_LA</th>\n","      <th>Job Location_MA</th>\n","      <th>Job Location_MD</th>\n","      <th>Job Location_MI</th>\n","      <th>Job Location_MN</th>\n","      <th>Job Location_MO</th>\n","      <th>Job Location_NC</th>\n","      <th>Job Location_NE</th>\n","      <th>Job Location_NJ</th>\n","      <th>Job Location_NM</th>\n","      <th>Job Location_NY</th>\n","      <th>Job Location_OH</th>\n","      <th>Job Location_OR</th>\n","      <th>Job Location_PA</th>\n","      <th>Job Location_RI</th>\n","      <th>Job Location_SC</th>\n","      <th>Job Location_TN</th>\n","      <th>Job Location_TX</th>\n","      <th>Job Location_UT</th>\n","      <th>Job Location_VA</th>\n","      <th>Job Location_WA</th>\n","      <th>Job Location_WI</th>\n","      <th>job_title_sim_analyst</th>\n","      <th>job_title_sim_data analitics</th>\n","      <th>job_title_sim_data engineer</th>\n","      <th>job_title_sim_data modeler</th>\n","      <th>job_title_sim_data scientist</th>\n","      <th>job_title_sim_director</th>\n","      <th>job_title_sim_machine learning engineer</th>\n","      <th>job_title_sim_na</th>\n","      <th>job_title_sim_other scientist</th>\n","      <th>seniority_by_title_na</th>\n","      <th>seniority_by_title_sr</th>\n","      <th>Degree_P</th>\n","      <th>Degree_na</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>3.8</td>\n","      <td>1973.0</td>\n","      <td>48.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>3.4</td>\n","      <td>1984.0</td>\n","      <td>37.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>4.8</td>\n","      <td>2010.0</td>\n","      <td>35.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>3.8</td>\n","      <td>1965.0</td>\n","      <td>56.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.0</td>\n","      <td>2.9</td>\n","      <td>1998.0</td>\n","      <td>23.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>737</th>\n","      <td>1.0</td>\n","      <td>3.9</td>\n","      <td>1830.0</td>\n","      <td>51.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>738</th>\n","      <td>1.0</td>\n","      <td>4.4</td>\n","      <td>2006.0</td>\n","      <td>15.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>739</th>\n","      <td>1.0</td>\n","      <td>2.6</td>\n","      <td>1984.0</td>\n","      <td>37.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>740</th>\n","      <td>1.0</td>\n","      <td>3.2</td>\n","      <td>1992.0</td>\n","      <td>29.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>741</th>\n","      <td>1.0</td>\n","      <td>3.6</td>\n","      <td>1967.0</td>\n","      <td>54.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>742 rows × 119 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-206b701a-331e-48ab-8bff-b56fa34e8454')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-206b701a-331e-48ab-8bff-b56fa34e8454 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-206b701a-331e-48ab-8bff-b56fa34e8454');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":179}],"source":["X"]},{"cell_type":"code","execution_count":null,"id":"84450efb","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:03.267713Z","iopub.status.busy":"2022-02-25T06:07:03.265673Z","iopub.status.idle":"2022-02-25T06:07:03.269928Z","shell.execute_reply":"2022-02-25T06:07:03.270519Z","shell.execute_reply.started":"2022-02-23T19:59:35.666103Z"},"papermill":{"duration":0.55392,"end_time":"2022-02-25T06:07:03.270685","exception":false,"start_time":"2022-02-25T06:07:02.716765","status":"completed"},"scrolled":true,"tags":[],"id":"84450efb"},"outputs":[],"source":["features_df_new = X.iloc[:,D]"]},{"cell_type":"code","execution_count":null,"id":"d9c94ecf","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:04.358381Z","iopub.status.busy":"2022-02-25T06:07:04.357637Z","iopub.status.idle":"2022-02-25T06:07:04.362803Z","shell.execute_reply":"2022-02-25T06:07:04.363405Z","shell.execute_reply.started":"2022-02-23T19:59:35.673446Z"},"papermill":{"duration":0.551396,"end_time":"2022-02-25T06:07:04.363570","exception":false,"start_time":"2022-02-25T06:07:03.812174","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"d9c94ecf","executionInfo":{"status":"ok","timestamp":1647309840453,"user_tz":-330,"elapsed":230,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"9855df01-9c8e-4e80-ad53-4b4430f71a7e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Rating', 'Python', 'spark', 'aws', 'sas', 'keras', 'scikit', 'tensor',\n","       'hadoop', 'google_an', 'Size_10000+ ', 'Size_1001 - 5000 ',\n","       'Size_501 - 1000 ', 'Size_51 - 200 ',\n","       'Type of ownership_Company - Public', 'Type of ownership_Hospital',\n","       'Type of ownership_Nonprofit Organization',\n","       'Sector_Arts, Entertainment & Recreation',\n","       'Sector_Biotech & Pharmaceuticals', 'Sector_Health Care',\n","       'Sector_Information Technology', 'Sector_Manufacturing',\n","       'Sector_Non-Profit', 'Revenue_$10+ billion (USD)',\n","       'Revenue_$100 to $500 million (USD)',\n","       'Revenue_$25 to $50 million (USD)', 'Revenue_$5 to $10 million (USD)',\n","       'Revenue_$500 million to $1 billion (USD)', 'Job Location_CA',\n","       'Job Location_DE', 'Job Location_FL', 'Job Location_IL',\n","       'Job Location_NE', 'job_title_sim_analyst',\n","       'job_title_sim_data analitics', 'job_title_sim_data scientist',\n","       'job_title_sim_machine learning engineer',\n","       'job_title_sim_other scientist', 'seniority_by_title_na',\n","       'seniority_by_title_sr', 'Degree_P', 'Degree_na'],\n","      dtype='object')"]},"metadata":{},"execution_count":181}],"source":["features_df_new.columns"]},{"cell_type":"code","execution_count":null,"id":"6a2e31e5","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:05.451054Z","iopub.status.busy":"2022-02-25T06:07:05.449696Z","iopub.status.idle":"2022-02-25T06:07:05.452688Z","shell.execute_reply":"2022-02-25T06:07:05.453293Z","shell.execute_reply.started":"2022-02-23T19:59:35.686601Z"},"papermill":{"duration":0.54982,"end_time":"2022-02-25T06:07:05.453466","exception":false,"start_time":"2022-02-25T06:07:04.903646","status":"completed"},"scrolled":true,"tags":[],"id":"6a2e31e5"},"outputs":[],"source":["# C=X.columns\n","# B=select_feature.get_support()\n","# selected_features=[]\n","# for bool,X in zip(B,C):\n","#     if bool:\n","#         selected_features.append(X)"]},{"cell_type":"code","execution_count":null,"id":"9c579ba3","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:06.566928Z","iopub.status.busy":"2022-02-25T06:07:06.566185Z","iopub.status.idle":"2022-02-25T06:07:06.568100Z","shell.execute_reply":"2022-02-25T06:07:06.568722Z","shell.execute_reply.started":"2022-02-23T19:59:35.696915Z"},"papermill":{"duration":0.574508,"end_time":"2022-02-25T06:07:06.568935","exception":false,"start_time":"2022-02-25T06:07:05.994427","status":"completed"},"tags":[],"id":"9c579ba3"},"outputs":[],"source":["# selected_features"]},{"cell_type":"code","execution_count":null,"id":"18b1c0c9","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:07.715354Z","iopub.status.busy":"2022-02-25T06:07:07.714550Z","iopub.status.idle":"2022-02-25T06:07:07.716520Z","shell.execute_reply":"2022-02-25T06:07:07.715970Z","shell.execute_reply.started":"2022-02-23T19:59:35.707132Z"},"papermill":{"duration":0.561894,"end_time":"2022-02-25T06:07:07.716660","exception":false,"start_time":"2022-02-25T06:07:07.154766","status":"completed"},"tags":[],"id":"18b1c0c9"},"outputs":[],"source":["#import libraries\n","from sklearn.ensemble import BaggingRegressor"]},{"cell_type":"code","execution_count":null,"id":"700f6d63","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:08.892046Z","iopub.status.busy":"2022-02-25T06:07:08.891313Z","iopub.status.idle":"2022-02-25T06:07:08.898385Z","shell.execute_reply":"2022-02-25T06:07:08.897841Z","shell.execute_reply.started":"2022-02-23T19:59:35.718483Z"},"papermill":{"duration":0.576706,"end_time":"2022-02-25T06:07:08.898540","exception":false,"start_time":"2022-02-25T06:07:08.321834","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"700f6d63","executionInfo":{"status":"ok","timestamp":1647309840483,"user_tz":-330,"elapsed":244,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"c8715556-17dc-49ef-b5a5-c3ab4a85dc6d"},"outputs":[{"output_type":"stream","name":"stdout","text":["The shape of X2_train is: (593, 42)\n","The shape of X2_test is: (149, 42)\n","The shape of y2_train is: (593, 1)\n","The shape of y2_test is: (149, 1)\n"]}],"source":["# split data into train data and test data \n","# what proportion of data should be included in test data is passed using 'test_size'\n","# set 'random_state' to get the same data each time the code is executed \n","X2_train, X2_test, y2_train, y2_test = train_test_split(X2, y2, test_size = 0.2, random_state = 1)\n","\n","# check the dimensions of the train & test subset for \n","# print dimension of predictors train set\n","print(\"The shape of X2_train is:\",X2_train.shape)\n","\n","# print dimension of predictors test set\n","print(\"The shape of X2_test is:\",X2_test.shape)\n","\n","# print dimension of target train set\n","print(\"The shape of y2_train is:\",y2_train.shape)\n","\n","# print dimension of target test set\n","print(\"The shape of y2_test is:\",y2_test.shape)"]},{"cell_type":"code","execution_count":null,"id":"62cba89d","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:10.011361Z","iopub.status.busy":"2022-02-25T06:07:10.010250Z","iopub.status.idle":"2022-02-25T06:07:10.055090Z","shell.execute_reply":"2022-02-25T06:07:10.055598Z","shell.execute_reply.started":"2022-02-23T19:59:35.733494Z"},"papermill":{"duration":0.602143,"end_time":"2022-02-25T06:07:10.055786","exception":false,"start_time":"2022-02-25T06:07:09.453643","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"62cba89d","executionInfo":{"status":"ok","timestamp":1647309840486,"user_tz":-330,"elapsed":242,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"c920e500-184e-4ec7-fd44-91dcc6980065"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_bagging.py:429: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  return column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["BaggingRegressor(base_estimator=DecisionTreeRegressor(random_state=10))"]},"metadata":{},"execution_count":186}],"source":["# build the model\n","meta_estimator = BaggingRegressor(tree.DecisionTreeRegressor(random_state=10)) #Similar to a random forest, just that the DT's are having all the features to split on\n","\n","# fit the model\n","meta_estimator.fit(X2_train, y2_train) \n"]},{"cell_type":"code","execution_count":null,"id":"b72b6f26","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:11.150737Z","iopub.status.busy":"2022-02-25T06:07:11.149648Z","iopub.status.idle":"2022-02-25T06:07:11.154494Z","shell.execute_reply":"2022-02-25T06:07:11.155070Z","shell.execute_reply.started":"2022-02-23T19:59:35.784065Z"},"papermill":{"duration":0.553908,"end_time":"2022-02-25T06:07:11.155244","exception":false,"start_time":"2022-02-25T06:07:10.601336","status":"completed"},"tags":[],"id":"b72b6f26"},"outputs":[],"source":["# predict the values\n","y_pred_ET = meta_estimator.predict(X2_test)"]},{"cell_type":"code","execution_count":null,"id":"e6698888","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:12.282875Z","iopub.status.busy":"2022-02-25T06:07:12.282154Z","iopub.status.idle":"2022-02-25T06:07:12.284905Z","shell.execute_reply":"2022-02-25T06:07:12.285385Z","shell.execute_reply.started":"2022-02-23T19:59:35.791468Z"},"papermill":{"duration":0.553447,"end_time":"2022-02-25T06:07:12.285554","exception":false,"start_time":"2022-02-25T06:07:11.732107","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"e6698888","executionInfo":{"status":"ok","timestamp":1647309840497,"user_tz":-330,"elapsed":223,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"781f3382-21c8-4d19-9f2f-134d583d5783"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([116.2       ,  66.3       , 105.4       ,  89.5       ,\n","        74.2       ,  93.9       ,  80.975     ,  77.65      ,\n","        92.6       ,  76.61666667,  81.54666667,  82.3       ,\n","        96.8       , 103.65      , 160.2       ,  82.75      ,\n","        94.24166667,  56.5       ,  84.5       ,  96.35      ,\n","       112.9       ,  64.55      , 119.45      , 123.85      ,\n","        77.3       , 115.        , 109.        , 117.15      ,\n","        82.9       , 167.85      , 125.05      ,  50.5875    ,\n","       124.65      ,  87.95      , 125.3       , 114.2       ,\n","        46.55      ,  55.05      , 110.65      , 145.        ,\n","        78.4       ,  51.        ,  88.35      , 109.85      ,\n","       134.5       ,  83.15      ,  56.5       , 117.75      ,\n","        93.1       ,  49.45      ,  48.05      , 145.        ,\n","        89.64505952, 108.7       ,  92.6       , 105.4       ,\n","        48.75      , 139.05      , 130.41666667,  74.05      ,\n","       116.07142857,  95.26666667,  60.15      ,  48.5       ,\n","       132.82307692,  93.9       ,  57.85      ,  93.1       ,\n","        77.65      , 137.4       , 105.35      ,  97.2       ,\n","       105.8       ,  69.5       ,  88.6       ,  83.75      ,\n","        90.79      , 103.45      ,  79.95      ,  99.75      ,\n","        99.        ,  56.5       ,  76.55      , 103.2       ,\n","        89.65      , 102.85      ,  78.8       , 124.15      ,\n","       125.3       , 145.1       , 119.45      ,  68.7       ,\n","       136.75      ,  59.47222222, 122.77307692, 121.42777778,\n","        61.85      ,  83.9       ,  66.69      ,  84.5       ,\n","        90.05      , 118.15      , 139.3       , 109.3       ,\n","       102.03849928,  98.5       , 114.2       , 212.9       ,\n","       102.65      , 174.1       ,  78.55      , 212.9       ,\n","        77.3       ,  88.08      , 137.85      ,  92.88      ,\n","        76.5       , 136.9       , 109.05      ,  94.95      ,\n","       140.05593407,  69.6       , 101.05      ,  82.65      ,\n","        90.        , 137.5       , 137.5       , 151.85      ,\n","       127.4625    , 139.15      , 110.65      , 153.2       ,\n","        88.7       , 124.14166667,  60.55      ,  71.6       ,\n","       110.65      , 116.07142857, 110.05      ,  91.93      ,\n","       108.05      , 154.05      ,  71.        , 100.3       ,\n","        61.4       ,  92.6       , 137.85      ,  85.35      ,\n","       152.8       ])"]},"metadata":{},"execution_count":188}],"source":["y_pred_ET"]},{"cell_type":"code","execution_count":null,"id":"239257ee","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:13.382245Z","iopub.status.busy":"2022-02-25T06:07:13.381621Z","iopub.status.idle":"2022-02-25T06:07:13.391915Z","shell.execute_reply":"2022-02-25T06:07:13.392517Z","shell.execute_reply.started":"2022-02-23T19:59:35.806842Z"},"papermill":{"duration":0.559493,"end_time":"2022-02-25T06:07:13.392689","exception":false,"start_time":"2022-02-25T06:07:12.833196","status":"completed"},"tags":[],"id":"239257ee"},"outputs":[],"source":["r_squared_ET=meta_estimator.score(X2_test,y2_test)\n","# Number of observation or sample size\n","n = 593 \n","\n","# No of independent variables\n","p = 119\n","\n","#Compute Adj-R-Squared\n","Adj_r_squared_ET = 1 - (1-r_squared_ET)*(n-1)/(n-p-1)\n","# Compute RMSE\n","rmse_ET = sqrt(mean_squared_error(y2_test, y_pred_ET))"]},{"cell_type":"code","execution_count":null,"id":"91292d8d","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:14.501175Z","iopub.status.busy":"2022-02-25T06:07:14.500467Z","iopub.status.idle":"2022-02-25T06:07:14.504137Z","shell.execute_reply":"2022-02-25T06:07:14.503574Z","shell.execute_reply.started":"2022-02-23T19:59:35.82101Z"},"papermill":{"duration":0.565146,"end_time":"2022-02-25T06:07:14.504284","exception":false,"start_time":"2022-02-25T06:07:13.939138","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"91292d8d","executionInfo":{"status":"ok","timestamp":1647309840512,"user_tz":-330,"elapsed":222,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"e243eb4f-ddd0-443b-e2c1-fae3c96bd2d6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                           Model       RMSE  R-Squared  \\\n","0                             Linreg full model   28.337711   0.664193   \n","1                    Linear regression with SGD   27.183469   0.650307   \n","2                           Decision Tree Model   20.713884   0.690997   \n","3             Decision Tree Model after pruning   26.319905   0.501106   \n","4       Decision Tree Model with Grid search CV   28.939465   0.396856   \n","5                                 Random Forest   18.238664   0.760434   \n","6             Random Forest with Grid Search CV   22.157635   0.646421   \n","7  Ensemble Techniques (Bagging Meta Estimator)   18.787830   0.745790   \n","\n","   Adj. R-Squared  \n","0        0.581478  \n","1        0.562329  \n","2        0.613256  \n","3        0.375591  \n","4        0.245114  \n","5        0.700162  \n","6        0.557465  \n","7        0.681834  "],"text/html":["\n","  <div id=\"df-fd338d12-2bdf-4ae4-a922-5a6b3fdf75a5\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>RMSE</th>\n","      <th>R-Squared</th>\n","      <th>Adj. R-Squared</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Linreg full model</td>\n","      <td>28.337711</td>\n","      <td>0.664193</td>\n","      <td>0.581478</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Linear regression with SGD</td>\n","      <td>27.183469</td>\n","      <td>0.650307</td>\n","      <td>0.562329</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Decision Tree Model</td>\n","      <td>20.713884</td>\n","      <td>0.690997</td>\n","      <td>0.613256</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Decision Tree Model after pruning</td>\n","      <td>26.319905</td>\n","      <td>0.501106</td>\n","      <td>0.375591</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Decision Tree Model with Grid search CV</td>\n","      <td>28.939465</td>\n","      <td>0.396856</td>\n","      <td>0.245114</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Random Forest</td>\n","      <td>18.238664</td>\n","      <td>0.760434</td>\n","      <td>0.700162</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Random Forest with Grid Search CV</td>\n","      <td>22.157635</td>\n","      <td>0.646421</td>\n","      <td>0.557465</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Ensemble Techniques (Bagging Meta Estimator)</td>\n","      <td>18.787830</td>\n","      <td>0.745790</td>\n","      <td>0.681834</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fd338d12-2bdf-4ae4-a922-5a6b3fdf75a5')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-fd338d12-2bdf-4ae4-a922-5a6b3fdf75a5 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-fd338d12-2bdf-4ae4-a922-5a6b3fdf75a5');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":190}],"source":["# compile the required information\n","linreg_full_metrics = pd.Series({'Model': \"Ensemble Techniques (Bagging Meta Estimator) \",\n","                     'RMSE':rmse_ET,\n","                     'R-Squared': r_squared_ET,\n","                     'Adj. R-Squared': Adj_r_squared_ET     \n","                   })\n","\n","# append our result table using append()\n","# ignore_index=True: does not use the index labels\n","# python can only append a Series if ignore_index=True or if the Series has a name\n","result_tabulation = result_tabulation.append(linreg_full_metrics, ignore_index = True)\n","\n","# print the result table\n","result_tabulation"]},{"cell_type":"markdown","id":"7756d497","metadata":{"papermill":{"duration":0.545284,"end_time":"2022-02-25T06:07:15.594413","exception":false,"start_time":"2022-02-25T06:07:15.049129","status":"completed"},"tags":[],"id":"7756d497"},"source":["# 8. Ensemble Techniques(Adaboost)"]},{"cell_type":"code","execution_count":null,"id":"65cf3b2c","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:16.690265Z","iopub.status.busy":"2022-02-25T06:07:16.689613Z","iopub.status.idle":"2022-02-25T06:07:16.812154Z","shell.execute_reply":"2022-02-25T06:07:16.811521Z","shell.execute_reply.started":"2022-02-23T19:59:35.838708Z"},"papermill":{"duration":0.671451,"end_time":"2022-02-25T06:07:16.812294","exception":false,"start_time":"2022-02-25T06:07:16.140843","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"65cf3b2c","executionInfo":{"status":"ok","timestamp":1647309840515,"user_tz":-330,"elapsed":217,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"78e13dfc-27eb-443a-e5b6-248c3978e9c8"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["AdaBoostRegressor(random_state=10)"]},"metadata":{},"execution_count":191}],"source":["from sklearn.ensemble import AdaBoostRegressor\n","\n","# build the model\n","adaboost = AdaBoostRegressor(random_state=10)\n","# fit the model\n","adaboost.fit(X2_train, y2_train)\n"]},{"cell_type":"code","execution_count":null,"id":"c1de63c9","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:17.914685Z","iopub.status.busy":"2022-02-25T06:07:17.912952Z","iopub.status.idle":"2022-02-25T06:07:17.923475Z","shell.execute_reply":"2022-02-25T06:07:17.922927Z","shell.execute_reply.started":"2022-02-23T19:59:35.962975Z"},"papermill":{"duration":0.558406,"end_time":"2022-02-25T06:07:17.923631","exception":false,"start_time":"2022-02-25T06:07:17.365225","status":"completed"},"tags":[],"id":"c1de63c9"},"outputs":[],"source":["# predict the values\n","y_pred_adaboost  = adaboost.predict(X2_test)"]},{"cell_type":"code","execution_count":null,"id":"423327cb","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:19.034080Z","iopub.status.busy":"2022-02-25T06:07:19.033407Z","iopub.status.idle":"2022-02-25T06:07:19.036026Z","shell.execute_reply":"2022-02-25T06:07:19.036494Z","shell.execute_reply.started":"2022-02-23T19:59:35.973317Z"},"papermill":{"duration":0.559314,"end_time":"2022-02-25T06:07:19.036656","exception":false,"start_time":"2022-02-25T06:07:18.477342","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"423327cb","executionInfo":{"status":"ok","timestamp":1647309840519,"user_tz":-330,"elapsed":214,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"09fb9d2b-cddb-41d3-feaa-5c12b3cd17c8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([128.61754386,  83.63480392,  97.87142857, 103.04601227,\n","        88.51546392,  89.24404762, 108.25      ,  88.51546392,\n","        86.20833333,  88.51546392, 105.82116788,  91.19782609,\n","        89.24404762,  92.59139785, 106.17320261,  89.97508897,\n","       114.31840796,  80.32      , 107.01785714,  89.2375    ,\n","       102.95      ,  86.64935065, 151.655     , 103.04601227,\n","        89.24404762, 111.19942197,  98.97627119,  89.97508897,\n","       106.91534392, 145.79787234, 102.95      ,  83.63480392,\n","       120.14285714,  89.2375    , 170.06060606,  89.28975265,\n","        78.52027027,  86.64935065, 103.24634146, 125.76041667,\n","       111.19942197,  89.28975265, 114.80769231,  98.57857143,\n","        89.24404762, 114.31840796,  80.32      ,  98.97627119,\n","        89.28975265,  88.51546392,  78.52027027, 125.76041667,\n","        98.41542289, 103.04601227, 114.86397059,  97.87142857,\n","        86.64935065, 143.95266272, 130.9       ,  91.19782609,\n","       128.25862069, 103.04601227,  88.51546392,  86.64935065,\n","       149.50510204,  89.24404762,  89.97508897, 102.95238095,\n","        88.51546392, 114.31840796, 110.33333333, 115.05535714,\n","       103.04601227,  88.02662722, 105.82116788,  98.57857143,\n","        89.97508897, 105.73783784,  98.26699029,  92.59139785,\n","        89.97508897,  80.32      , 103.04601227, 102.95      ,\n","        88.02662722,  98.57857143,  98.26699029, 102.95238095,\n","       170.06060606, 151.655     , 102.95      ,  97.87142857,\n","       103.51851852,  87.23553719, 151.655     , 176.47395833,\n","        86.73853211, 111.19942197,  88.02662722, 107.01785714,\n","       114.25      ,  90.90265487, 158.15811966, 106.17320261,\n","        88.02662722,  88.51546392,  89.28975265, 225.76829268,\n","        98.97627119, 126.375     ,  89.97508897, 225.76829268,\n","        89.24404762, 106.17320261, 106.17320261, 105.82116788,\n","       107.13492063, 120.14285714, 110.24310345, 102.95238095,\n","       151.655     ,  91.19782609, 110.24310345,  97.87142857,\n","        83.6314554 , 158.15811966, 158.15811966, 152.42718447,\n","       144.76086957, 119.18918919, 103.24634146,  98.57857143,\n","        98.97627119, 113.73648649,  87.23553719,  97.87142857,\n","        91.19782609, 128.25862069,  90.90265487, 102.95      ,\n","       103.51851852, 122.85714286,  92.125     , 105.73783784,\n","        84.38770053, 114.86397059, 152.42718447,  92.59139785,\n","       102.95238095])"]},"metadata":{},"execution_count":193}],"source":["y_pred_adaboost"]},{"cell_type":"code","execution_count":null,"id":"3d27c1d1","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:20.136530Z","iopub.status.busy":"2022-02-25T06:07:20.135865Z","iopub.status.idle":"2022-02-25T06:07:20.144355Z","shell.execute_reply":"2022-02-25T06:07:20.143711Z","shell.execute_reply.started":"2022-02-23T19:59:35.983895Z"},"papermill":{"duration":0.560808,"end_time":"2022-02-25T06:07:20.144508","exception":false,"start_time":"2022-02-25T06:07:19.583700","status":"completed"},"tags":[],"id":"3d27c1d1"},"outputs":[],"source":["r_squared_ADA=meta_estimator.score(X2_test,y2_test)\n","# Number of observation or sample size\n","n = 593 \n","\n","# No of independent variables\n","p = 119\n","\n","#Compute Adj-R-Squared\n","Adj_r_squared_ADA = 1 - (1-r_squared_ADA)*(n-1)/(n-p-1)\n","# Compute RMSE\n","rmse_ADA = sqrt(mean_squared_error(y2_test, y_pred_adaboost))"]},{"cell_type":"code","execution_count":null,"id":"6fb70a42","metadata":{"execution":{"iopub.execute_input":"2022-02-25T06:07:21.257850Z","iopub.status.busy":"2022-02-25T06:07:21.257132Z","iopub.status.idle":"2022-02-25T06:07:21.259972Z","shell.execute_reply":"2022-02-25T06:07:21.260468Z","shell.execute_reply.started":"2022-02-23T19:59:35.999107Z"},"papermill":{"duration":0.563801,"end_time":"2022-02-25T06:07:21.260636","exception":false,"start_time":"2022-02-25T06:07:20.696835","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"6fb70a42","executionInfo":{"status":"ok","timestamp":1647309840523,"user_tz":-330,"elapsed":209,"user":{"displayName":"Omkar Gowda","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgaO0p1fL4fSGtlH2xrAloKwS41Bdly1Kli1I2YdQ=s64","userId":"11446173996038832194"}},"outputId":"88c773ad-7e21-484e-87ae-d3b0e1a9429d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                           Model       RMSE  R-Squared  \\\n","0                             Linreg full model   28.337711   0.664193   \n","1                    Linear regression with SGD   27.183469   0.650307   \n","2                           Decision Tree Model   20.713884   0.690997   \n","3             Decision Tree Model after pruning   26.319905   0.501106   \n","4       Decision Tree Model with Grid search CV   28.939465   0.396856   \n","5                                 Random Forest   18.238664   0.760434   \n","6             Random Forest with Grid Search CV   22.157635   0.646421   \n","7  Ensemble Techniques (Bagging Meta Estimator)   18.787830   0.745790   \n","8               Ensemble Techniques (ADA Boost)   26.507143   0.745790   \n","\n","   Adj. R-Squared  \n","0        0.581478  \n","1        0.562329  \n","2        0.613256  \n","3        0.375591  \n","4        0.245114  \n","5        0.700162  \n","6        0.557465  \n","7        0.681834  \n","8        0.681834  "],"text/html":["\n","  <div id=\"df-9ed31b06-2adb-4b5b-bc19-55d84732fcf5\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>RMSE</th>\n","      <th>R-Squared</th>\n","      <th>Adj. R-Squared</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Linreg full model</td>\n","      <td>28.337711</td>\n","      <td>0.664193</td>\n","      <td>0.581478</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Linear regression with SGD</td>\n","      <td>27.183469</td>\n","      <td>0.650307</td>\n","      <td>0.562329</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Decision Tree Model</td>\n","      <td>20.713884</td>\n","      <td>0.690997</td>\n","      <td>0.613256</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Decision Tree Model after pruning</td>\n","      <td>26.319905</td>\n","      <td>0.501106</td>\n","      <td>0.375591</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Decision Tree Model with Grid search CV</td>\n","      <td>28.939465</td>\n","      <td>0.396856</td>\n","      <td>0.245114</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Random Forest</td>\n","      <td>18.238664</td>\n","      <td>0.760434</td>\n","      <td>0.700162</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Random Forest with Grid Search CV</td>\n","      <td>22.157635</td>\n","      <td>0.646421</td>\n","      <td>0.557465</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Ensemble Techniques (Bagging Meta Estimator)</td>\n","      <td>18.787830</td>\n","      <td>0.745790</td>\n","      <td>0.681834</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Ensemble Techniques (ADA Boost)</td>\n","      <td>26.507143</td>\n","      <td>0.745790</td>\n","      <td>0.681834</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9ed31b06-2adb-4b5b-bc19-55d84732fcf5')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9ed31b06-2adb-4b5b-bc19-55d84732fcf5 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9ed31b06-2adb-4b5b-bc19-55d84732fcf5');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":195}],"source":["# compile the required information\n","linreg_full_metrics = pd.Series({'Model': \"Ensemble Techniques (ADA Boost) \",\n","                     'RMSE':rmse_ADA,\n","                     'R-Squared': r_squared_ADA,\n","                     'Adj. R-Squared': Adj_r_squared_ADA     \n","                   })\n","\n","# append our result table using append()\n","# ignore_index=True: does not use the index labels\n","# python can only append a Series if ignore_index=True or if the Series has a name\n","result_tabulation = result_tabulation.append(linreg_full_metrics, ignore_index = True)\n","\n","# print the result table\n","result_tabulation"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.12"},"papermill":{"default_parameters":{},"duration":692.23531,"end_time":"2022-02-25T06:07:22.781459","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2022-02-25T05:55:50.546149","version":"2.3.3"},"colab":{"name":"Data scientist salary prediction (only algo)","provenance":[]}},"nbformat":4,"nbformat_minor":5}